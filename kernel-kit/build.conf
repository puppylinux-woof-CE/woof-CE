#--
#             Configuration options
#             =====================
# 
#  **NOTE**: check the original file every once in a while
#            settings might be added or removed...
#
# see http://www.kernel.org/ for the latest kernel info..
#--

################################################################
## add a Kernel .config file in one of the configs_* directories
## It must follow this syntax:
##           version  info
## DOTconfig-3.14.73-i686-4g
################################################################

## speed up the process by specifing a DOTconfig file:
#DOTconfig_file=DOTconfig
#DOTconfig_file=configs_x86/DOTconfig-3.16.85-i686-4g

# latest in series, LatestK 
# this gets the latest kernel in relation to the DOTconfig_file
# specified above and depends on that value. It must be a longterm
# kernel
#LatestK=1

## use this version string with the current ./DOTconfig
## (in case it doesn't have usable version info inside)
kernel_ver=

## i386 specific stuff: force pae/nopae - i486/i686
## note: the script will run 'make oldconfig' to ensure
##       the new settings take effect..
#x86_disable_pae=yes
#x86_enable_pae=yes

## this is the kernel suffix hack, you can leave it empty ie: uname -r
## if you don't leave empty the leading "dash" is required
## DO NOT change it between minor versions (i.e 3.14.1 and 3.14.2); otherwise,
## third-party drivers will break and users won't be able to upgrade: kernel-kit
## patches the kernel to ensure drivers built for the major version (say, 3.14)
## continue to work with any future minor version (3.14.1, 3.14.2, etc') and
## don't have to be rebuilt, but the suffix must not change for this to work
## (this is particularly good if you wish to stick with a longterm kernel branch
## without any maintenance and without frustrating users that need extra drivers)
## example:
#custom_suffix=-4G
custom_suffix=

## this is the name of the pet package suffix, and source sfs
## name it whatever you like, usually put in a signifier for your distro
## eg: "s" is for slacko
## if you leave empty the script will determine a proper package suffix
package_name_suffix=

##-----------------------------------------------------------------------

## remove kernel sublevel, or not : set yes or no
remove_sublevel=no

## aufs version (git branch) - see README -> AUFS GIT BRANCHES
## the script automatically detects the aufs version, but when it does not
## you must specify it here:
#aufsv=3.14.40+

## JOBS ###
## if you have a multicore processor you can set this var
## don't set if you have a single core! >> cooked machine 
## DO NOT set it to 0 (zero) >> cooked machine
#JOBS=-j6

### squashfs compression ###
## unset this for the default of your mksquashfs binary
#COMP="-comp gzip"
COMP="-comp xz"
#COMP="-comp xz -b 512K"

## strip kernel modules?
## warning: this might cause issues
STRIP_KMODULES=no

## Firmware tarballs repository
#FW_URL=http://ftp.nluug.nl/ftp/pub/os/Linux/distr/puppylinux/firmware

## Firmware tarball or SFS (fdrv)
## specify pkg url to automate the process
#FW_PKG_URL="http://ftp.nluug.nl/ftp/pub/os/Linux/distr/puppylinux/firmware/firmware-140621-big.tar.bz2"

## Kernel download mirrors
kernel_mirrors='https://www.kernel.org/pub/linux/kernel
ftp://ftp.ntu.edu.tw/linux/kernel
ftp://ftp.heanet.ie/pub/kernel.org/pub/linux/kernel
ftp://ftp.yandex.ru/pub/linux/kernel/
https://mirror.aarnet.edu.au/pub/ftp.kernel.org/linux/kernel
ftp://ftp.jaist.ac.jp/pub/Linux/kernel.org/linux/kernel
ftp://www.mirrorservice.org/pub/linux/kernel
ftp://ftp.be.debian.org/pub/linux/kernel'

## This kit now gets firmware from kernel.org
## The default is to produce a firmware package that is based on the running
## kernel package and sent to main build or you can send it to the fdrv 
## or you can opt to have no firmware
## fware=b >> builtin (zdrv)
## fware=f >> fdrv
## fware=n >> no firmware - no download of large firmware repo
## RECOMMENDATION: choose f!
fware=f

## Extra firmware for wireless devices including B43, B43legacy and Intel Pro Wireless
## Set to 'yes' to download and extract these firmware blobs to fdrv
## depends on fware=f or fware=b
EXTRA_FW=yes

## -- AUTO --
## Enforce automation of the process. Also triggered by: ./build.sh auto
## Every error is fatal, so you must specify all the needed stuff in build.conf first..
#AUTO=yes

## if no third party drivers will be built, the generation of a kernel sources
## SFS can be skipped
#CREATE_SOURCES_SFS=no

## in some special cases, like some ARM platforms, one might wish to build the
## kernel without aufs
# warning: Puppy might not boot, or be partially broken without aufs
#AUFS=no
