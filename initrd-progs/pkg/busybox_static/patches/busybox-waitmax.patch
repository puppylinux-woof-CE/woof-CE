diff -Naur busybox-1.26.1-orig/miscutils/timeout.c busybox-1.26.1/miscutils/timeout.c
--- busybox-1.26.1-orig/miscutils/timeout.c	2016-12-11 01:46:36.000000000 +0800
+++ busybox-1.26.1/miscutils/timeout.c	2017-01-04 15:17:30.801256794 +0800
@@ -38,6 +38,14 @@
 
 //kbuild:lib-$(CONFIG_TIMEOUT) += timeout.o
 
+//                                   alias   _main()                                help (xx_xx_usage)
+//applet:IF_TIMEOUT( APPLET_ODDNAME(waitmax, timeout, BB_DIR_USR_BIN, BB_SUID_DROP, waitmax) )
+
+//usage:#define waitmax_trivial_usage
+//usage:       "[-s SIG] MAXTIME PROG ARGS"
+//usage:#define waitmax_full_usage "\n\n"
+//usage:       "Runs PROG. Sends SIG to it if it is not gone in MAXTIME seconds.\n"
+
 //usage:#define timeout_trivial_usage
 //usage:       "[-t SECS] [-s SIG] PROG ARGS"
 //usage:#define timeout_full_usage "\n\n"
@@ -46,6 +54,8 @@
 
 #include "libbb.h"
 
+#define WAITMAX (ENABLE_TIMEOUT && applet_name[0] == 'w')
+
 int timeout_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int timeout_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -61,10 +71,21 @@
 
 	/* -p option is not documented, it is needed to support NOMMU. */
 
-	/* -t SECONDS; -p PARENT_PID */
-	/* '+': stop at first non-option */
-	getopt32(argv, "+s:t:+" USE_FOR_NOMMU("p:+"), &opt_s, &timeout, &parent);
-	/*argv += optind; - no, wait for bb_daemonize_or_rexec! */
+	if (WAITMAX) {
+		// Need at least two arguments
+		opt_complementary = "-2:" USE_FOR_NOMMU(":p+");
+		getopt32(argv, "s:" USE_FOR_NOMMU("p:"), &opt_s, &parent);
+		timeout = strtol(argv[optind], NULL, 10);
+		if (!timeout) bb_show_usage();
+		optind++;
+	}
+	else {
+		/* -t SECONDS; -p PARENT_PID */
+		/* '+': stop at first non-option */
+		getopt32(argv, "+s:t:+" USE_FOR_NOMMU("p:+"), &opt_s, &timeout, &parent);
+		/*argv += optind; - no, wait for bb_daemonize_or_rexec! */
+	}
+
 	signo = get_signum(opt_s);
 	if (signo < 0)
 		bb_error_msg_and_die("unknown signal '%s'", opt_s);
