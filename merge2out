#!/bin/bash
#BK nov. 2011

if [ ! -f /etc/rc.d/PUPSTATE ] ; then
	echo "It's not advised to use the build system"
	echo "in a distro other than  a recent WOOFCE Puppy"
	echo
	echo "You should be able to do the building using run-woof"
	echo "	https://github.com/puppylinux-woof-CE/run_woof"
	echo "	http://murga-linux.com/puppy/viewtopic.php?p=963764&sid=bb5882c97a03e39fff3ecb2a827a5155"
	echo
	echo "So you wouldn't need to install Puppy if you don't want to"
	echo "but you will still need to download a Puppy ISO and devx sfs."
	exit 1
fi

if [ "`whoami`" != "root" ] ; then
	echo "Must be root"
	exit 1
fi

[ -d ./woof-arch ] || [ -d ./woof-code ] || [ -d ./woof-distro ] || exit
echo
echo 'This script merges woof-arch, woof-code
woof-distro, kernel-kit and initrd-progs to ../woof-out_*.
See README
'
# autodetect HOSTARCH - how hard can it be?
case `uname -m` in
	i?86)HOSTARCH=x86 ;;
	x86_64|amd64)HOSTARCH=x86_64 ;;
	arm*)HOSTARCH=arm ;;
	*) echo "Error detecting host architecture, exiting..." ; exit 1 ;;
esac
echo "-----------------"
echo "Host arch: $HOSTARCH     (The host is the machine you are running Woof on)"
echo "-----------------"
echo
echo "Please choose the target target architecture.. (the target 
is the machine in which the Puppy that you build is going to run):"
while [ "$TARGETARCH" = "" ] ; do
	echo
	CNT=1
	for ONEARCH in `find woof-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^woof-arch/%%' | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONEARCH"
		CNT=$(($CNT + 1))
	done
	echo -n 'Type number of target architecture: '
	read nTARGETARCH
	TARGETARCH="`find woof-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^woof-arch/%%' | sort | head -n $nTARGETARCH 2>/dev/null | tail -n 1`"
done
echo "...ok, $TARGETARCH"
echo

echo 'Woof builds a Puppy based on the binary packages from another distro.
We sometimes refer to this as the "compat-distro".'
while [ "$COMPATDISTRO" = "" ] ; do
	echo
	CNT=1
	taPTN="s%^woof-distro/${TARGETARCH}/%%"
	for ONEDISTRO in `find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONEDISTRO"
		CNT=$(($CNT + 1))
	done
	echo -n 'Type number of compat-distro: '
	read nCOMPATDISTRO
	COMPATDISTRO="`find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | head -n $nCOMPATDISTRO 2>/dev/null | tail -n 1`"
done
echo "...ok, $COMPATDISTRO"
echo

echo 'The compat-distro usually has release versions
Choose which release you want to obtain the binary packages from.'
while [ "$COMPATVERSION" = "" ] ; do
	echo
	CNT=1
	for ONECOMPAT in `find woof-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONECOMPAT"
		CNT=$(($CNT + 1))
	done
	if [ $CNT -eq 1 ];then
		echo -e "\nSorry, there are no release directories inside woof-distro/${COMPATDISTRO}."
		exit
	fi
	if [ $CNT -eq 2 ];then
		COMPATVERSION="`find woof-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | head -n 1 2>/dev/null | tail -n 1`"
		continue
	fi
	echo -n 'Type number of release: '
	read nCOMPATVERSION
	COMPATVERSION="`find woof-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | head -n $nCOMPATVERSION 2>/dev/null | tail -n 1`"
done
echo "...ok, $COMPATVERSION"
echo

echo 'Choices:'
echo "Host architecture:     $HOSTARCH"
echo "Target architecture:   $TARGETARCH"
echo "Compatible-distro:     $COMPATDISTRO"
echo "Compat-distro version: $COMPATVERSION"
echo
echo -n "If these are ok, press ENTER, other CTRL-C to quit: "
read waitforit

#-------
WOOF_OUT=../woof-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}
#-------

echo
echo "Directory '${WOOF_OUT}'
will now be created, if not already, and the contents of 'woof-code' copied
into it. Then, these will also be copied into it:
woof-arch/${HOSTARCH}/build
woof-arch/${TARGETARCH}/target
woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} (files all levels)"
echo
echo "Any existing files in '${WOOF_OUT}' will be over-ridden."
echo "(Also, all files in folders 'boot', 'kernel-skeleton',
 'packages-templates', 'rootfs-skeleton', 'rootfs-packages', 'support',
 'kernel-kit' and 'initrd-progs' will be deleted.)"
echo
echo -n 'Press ENTER to continue: '
read goforit

sdirs='boot initrd-progs kernel-kit kernel-skeleton packages-templates rootfs-packages rootfs-skeleton support'

# as files/dirs could be removed in future woofs, need to wipe entire target dirs first...
for d in $sdirs
do
	if [ -d ${WOOF_OUT}/${d} ] ; then
		echo "Deleting ${WOOF_OUT}/${d}"
		rm -rf ${WOOF_OUT}/${d} 2> /dev/null
	fi
done
sync

mkdir -p ${WOOF_OUT}
echo "Copying woof-code/*..."
cp -a -f --remove-destination woof-code/* ${WOOF_OUT}/
sync
echo "Copying woof-arch/${HOSTARCH}/build/*..."
cp -a -f --remove-destination woof-arch/${HOSTARCH}/build/* ${WOOF_OUT}/
sync
echo "Copying woof-arch/${TARGETARCH}/target/*"
cp -a -f --remove-destination woof-arch/${TARGETARCH}/target/* ${WOOF_OUT}/
sync
if [ "${COMPATDISTRO}" = "slackware64" -a "${TARGETARCH}" = "x86_64" ];then
	# fix up the templates for 64 bit build
	TEMPLATES="${WOOF_OUT}/packages-templates"
	LIST=`ls ${TEMPLATES}|grep -v pcmciautils`
	echo -n "fixing package templates for 64 bit: "
	sleep 2
	for i in $LIST
	do 
		echo -n "$i "
		if [ -d ${TEMPLATES}/${i}/lib ];then
			mv ${TEMPLATES}/${i}/lib ${TEMPLATES}/${i}/lib64
			echo -n '' > ${TEMPLATES}/${i}/PLUSEXTRADIRS
		fi
		if [ -d ${TEMPLATES}/${i}/usr/lib ] ; then
			mv ${TEMPLATES}/${i}/usr/lib ${TEMPLATES}/${i}/usr/lib64
		fi
	done
	#fix FIXUPHACK scripts
	find ${TEMPLATES} -type f -name FIXUPHACK -exec sed -i -e 's%lib\/%lib64/%g' -e 's%lib %lib64 %g' '{}' \;
	# restore dbus_slack; needs /var/lib not /var/lib64
	sed -i 's%lib64\/%lib/%g' ${TEMPLATES}/dbus_slack/FIXUPHACK
	echo -e "\n\nlib64 directories created in packages-templates."
fi
echo "Copying kernel-kit, initrd-progs..."
cp -a -f --remove-destination kernel-kit ${WOOF_OUT}/
cp -a -f --remove-destination initrd-progs ${WOOF_OUT}/
sync
echo "Copying woof-distro/${COMPATDISTRO}/${COMPATVERSION}/*..."
#copy any top-level files, going down...
for ONETOP in \
`find woof-distro -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '` \
`find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '` \
`find woof-distro/${TARGETARCH}/${COMPATDISTRO} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '` \
`find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
	cp -a -f --remove-destination $ONETOP ${WOOF_OUT}/
done

if [ -d "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/packages-templates" ];then
	echo "Copying woof-distro/${COMPATDISTRO}/${COMPATVERSION}/packages-templates..."
	for ONEDIRECTORY in \
	`find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/packages-templates -mindepth 1 -maxdepth 1 -type d | tr '\n' ' '`
	do
		TEMPLATEDIR=`expr "$ONEDIRECTORY" : "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/packages-templates/\(.*\)"`
		echo "    $TEMPLATEDIR"
		if [ -n "$TEMPLATEDIR" -a -d "${WOOF_OUT}/packages-templates/${TEMPLATEDIR}" ];then
			rm -r ${WOOF_OUT}/packages-templates/${TEMPLATEDIR}
		fi
		cp -a ${ONEDIRECTORY} ${WOOF_OUT}/packages-templates/
	done
fi
if [ -d "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-packages" ];then
	echo "Copying woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-packages..."
	for ONEDIRECTORY in \
	`find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-packages -mindepth 1 -maxdepth 1 -type d | tr '\n' ' '`
	do
		PACKAGEDIR=`expr "$ONEDIRECTORY" : "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-packages/\(.*\)"`
		echo "    $PACKAGEDIR"
		if [ -n "$PACKAGEDIR" -a -d "${WOOF_OUT}/rootfs-packages/${PACKAGEDIR}" ];then
			rm -r ${WOOF_OUT}/rootfs-packages/${PACKAGEDIR}
		fi
		cp -a ${ONEDIRECTORY} ${WOOF_OUT}/rootfs-packages/
	done
fi
if [ -d "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-skeleton" ];then
	echo "Copying woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-skeleton..."
	SKELETONFILES=`find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-skeleton/ -type f -printf '    %f\n'`
	if [ -n "$SKELETONFILES" ];then
		echo "$SKELETONFILES"
		cp -a -f --remove-destination woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/rootfs-skeleton/* ${WOOF_OUT}/rootfs-skeleton/
	fi
fi
if [ -d "woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/patches" ];then
	echo "Applying patches from woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/patches..."
	for PATCHFILE in \
	`find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/patches -mindepth 1 -maxdepth 1 -type f -iname '*.patch' | tr '\n' ' '`
	do
		echo "    $PATCHFILE"
		patch --unified --forward --silent -p 3 --input="../woof-CE/$PATCHFILE" --directory=${WOOF_OUT}
	done
fi

rm -f ${WOOF_OUT}/c_apps
cp -a README ${WOOF_OUT}/README.TXT
sync

echo "WOOF_HOSTARCH='$HOSTARCH'
WOOF_TARGETARCH='${TARGETARCH}'
WOOF_COMPATDISTRO='${COMPATDISTRO}'
WOOF_COMPATVERSION='${COMPATVERSION}'" > ${WOOF_OUT}/WOOFMERGEVARS

# new to avoid checkbox GUI; idea from peebee. See 3builddistro-Z
(
cd ${WOOF_OUT}
rm -f support/rootfs-packages.conf-backup 2>/dev/null
ls rootfs-packages|while read pkg;do
	echo -e "$pkg=\"true\"" >> support/rootfs-packages.conf-backup
done
)

if [ "`stat -c %U:%G $0`" != 'root:root' ] ; then
	[ "${WOOF_OUT}" != "/" ] && chown -R root:root ${WOOF_OUT}
fi

echo -e "\nUndoing VCS-friendly stuff..."
(
cd ${WOOF_OUT}
for d in $sdirs huge_kernel
do
	[ -d "${d}" ] && find $d -type f -name EMPTYDIRMARKER -delete
done
sync
if [ -s VCSMETADATA ];then #permissions/ownership...
	echo -n "Fixing file/dir permissions/ownership..."
	grep -q '^spot:' /etc/passwd || sed -i '/:spot:/d' VCSMETADATA
	while read ONESPEC ; do
		IFS=":" read -r ONEFILE ONEPERM ONEOWNER ONEGROUP <<< "$ONESPEC"
		[ ! -e "$ONEFILE" ] && continue
		chmod $ONEPERM $ONEFILE
		# change owner:group of symlink instead of what it points to...
		[ "$ONEOWNER" != "UNKNOWN" ] && chown -h $ONEOWNER $ONEFILE
		[ "$ONEOWNER" = "UNKNOWN" ] && chown -h root $ONEFILE
		[ "$ONEGROUP" != "UNKNOWN" ] && chgrp -h $ONEGROUP $ONEFILE
		[ "$ONEGROUP" = "UNKNOWN" ] && chgrp -h root $ONEFILE
	done < VCSMETADATA
fi
rm -f VCSMETADATA
. ./_00func
create_local_repos_dirs
)

#record target architecture in DISTRO_SPECS (will end up in /etc/ in Puppy build)...
sed -i '/DISTRO_TARGETARCH=/d' ${WOOF_OUT}/DISTRO_SPECS
echo "DISTRO_TARGETARCH='${TARGETARCH}'" >> ${WOOF_OUT}/DISTRO_SPECS

#record the woof state we build from
sed -i '/BUILD_FROM_WOOF=/d' ${WOOF_OUT}/DISTRO_SPECS
if [ "`git log -n 1`" != "" ]; then
	GITBRANCH=$(git rev-parse --abbrev-ref HEAD)
	GITHEAD=$(git log -n 1 --pretty=format:"%h;%ci") # git rev-parse HEAD
	echo "BUILD_FROM_WOOF='${GITBRANCH};${GITHEAD}'" >> ${WOOF_OUT}/DISTRO_SPECS
else
	echo "BUILD_FROM_WOOF=No woof-CE-git info available" >> ${WOOF_OUT}/DISTRO_SPECS
fi

# make sure host puppy has these...
[ ! -f /usr/sbin/printcols ] && cp -af woof-arch/${HOSTARCH}/build/support/printcols /usr/sbin/ #column manipulator.

# make sure target has these...
cp -af woof-arch/${TARGETARCH}/build/support/debdb2pupdb ${WOOF_OUT}/${NEWBASE}/rootfs-skeleton/usr/local/petget/
cp -af woof-arch/${TARGETARCH}/build/support/find_cat ${WOOF_OUT}/${NEWBASE}/rootfs-skeleton/usr/local/petget/
cp -af woof-arch/${TARGETARCH}/build/support/printcols ${WOOF_OUT}/${NEWBASE}/rootfs-skeleton/usr/sbin/

echo
echo "Directory '${WOOF_OUT}'
is now normal (the workarounds have been removed). Note,
../local-repositories has been created (if not already),
to be used as a common binary package download place."

### END ###
