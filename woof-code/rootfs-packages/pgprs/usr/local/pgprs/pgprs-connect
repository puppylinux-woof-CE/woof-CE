#!/bin/bash
# shellcheck disable=SC1091 # Skip sourced checks.
#120131 rodin.s: internationalized.
#130505 rerwin: ensure network_tray icon shows wireless modem
#130812 rerwin: Modification as version 1.5 for Puppy integration
#151222 rerwin: Add device name to 'not detected' message
#160116 rerwin: restore display of current connection; disconnect network if resolveconf absent.
#180720 Revert 130505 -- network_tray ignores.
#200607 (v3.0) Correct display of connect log to work around Xdialog regression; correct not-connected logic; make pppd detach after connection; specify busybox microcom because full version interprets -t as "work in telnet mode" instead of timeout; add version to window title; prevent running if pgprs or frisbee connect window active; replace pidof with ps -C; complete internationalization; accommodate busybox 'tail'; resolve shellcheck warnings.

. /root/.config/gprs.conf #130812...

#set -x; test -f /tmp/xerrs.log && exec 1>&2 || exec &>/tmp/debug.log #send feedback and trace to xerrs.log or debug.log

export TEXTDOMAIN=pgprs
export OUTPUT_CHARSET=UTF-8
. gettext.sh

CONNECTLOG=/tmp/.gprs_connect.log #200607

# connect
function connect_func () {
    export TEXTDOMAIN=pgprs
    export OUTPUT_CHARSET=UTF-8
    . gettext.sh
    echo -e "$(eval_gettext "Attempting connection through \$GPRSDEV to APN \$GPRSAPN...")\n" >> $CONNECTLOG #130812 200607
    if [ ! -x /usr/sbin/resolvconf ]; then #160116...
        if [ -x /usr/sbin/networkdisconnect ]; then #but not ppp interface.
            /usr/sbin/networkdisconnect
        else
            ps -C wpa_supplicant >/dev/null \
              && wpa_cli terminate #kills any running wpa_supplicant #200607
            if [ -x /etc/rc.d/rc.network ]; then
                /etc/rc.d/rc.network stop
            else
                dhcpcd -k
            fi
        fi
    fi
    [ -e /dev/ppp ] || mknod /dev/ppp c 108 0
    # Start PPP daemon...
    # For sanity, keep a lock on the serial line (lock).
    logger "pgprs: $(eval_gettext "Starting PPP daemon for \$GPRSDEV")"
    /usr/sbin/pppd "$GPRSDEV" \
      call gprs-generated \
      connect "chat -v -T $GPRSNBR -f /etc/ppp/chatscripts/gprs-connect-chat" \
      disconnect "chat -v -s -S -f /etc/ppp/chatscripts/gprs-disconnect-chat" \
      linkname gprs \
      updetach \
      lock \
      >> $CONNECTLOG 2>&1 #200607
    local STATUS=$?
# shellcheck disable=SC2005 # echo needed for newline.
    echo "$(eval_gettext "Exit status is \$STATUS")" >> $CONNECTLOG #130812 200607
    logger "pgprs: $(eval_gettext "pppd exit status for \$GPRSDEV is \$STATUS")"
    if [ -s /var/run/ppp-gprs.pid ]; then #200607...
# shellcheck disable=SC2005 # echo needed for newline.
        echo "$(gettext 'CONNECTED')" >> $CONNECTLOG
    else
# shellcheck disable=SC2005 # echo needed for newline.
        echo "$(gettext 'NOT CONNECTED')" >> $CONNECTLOG
    fi
    sleep 2 #Let connection_dialog_func show the entire log before stopping the feed.
    TAILPID="$(pgrep -f "tail -f $CONNECTLOG")"
    [ -n "$TAILPID" ] && kill "$TAILPID"
    exit $STATUS
}
export -f connect_func

#160116 connect dialog...
function connection_dialog_func () {
    local READLOG='cat' #200607...
    local TAIL_PATH
    TAIL_PATH="$(which tail)"
    if [ -n "$CONNECT_PID" ] && [ -n "$TAIL_PATH" ]; then
        if [ -L "$TAIL_PATH" ]; then #busybox tail, cannot follow (-f)
            gtkdialog-splash -timeout 10 -placement center -bg orange -text "$(eval_gettext "Attempting connection to APN \$GPRSAPN.")  $(gettext 'Please wait.')" &
            sleep 10
        else
            READLOG="tail -f"
        fi
    fi
    $READLOG $CONNECTLOG | \
      Xdialog --center --wmclass pgprs --title "$(eval_gettext "Pgprs \$VERSION - GPRS Connection Log")" --backtitle "$(gettext 'NOTICE: If log shows a failure to connect, click DISCONNECT to exit.')" --ok-label "$(gettext 'DISCONNECT or stop trying')" --cancel-label "$(gettext 'CLOSE window but stay online')" --logbox - 25 82
    local STATUS=$? #0 = disconnect/stop, 1 = close but stay connected, 255 = abort
    if [ $STATUS -eq 0 ] && [ -s /var/run/ppp-gprs.pid ]; then #200607 end
        local GPRS_PPPD_PID=$(cat /var/run/ppp-gprs.pid)
        if [ -n "$GPRS_PPPD_PID" ]; then
            kill "$GPRS_PPPD_PID"
            sleep 0.1 #200607
            rm -f /var/run/ppp-gprs.pid
            gtkdialog-splash -timeout 15 -placement center -bg orange -text "$(eval_gettext "Mobile device \$GPRSDEV disconnected")"
        fi
    fi
    # Return 0 = configure/setup, 1 = done, 255 = abort #200607...
    [ $STATUS -ne 0 ] && return $STATUS
    Xdialog --center --wmclass pgprs --title "$(gettext 'Pgprs GPRS Connect')" --icon "$ICONLIB/info.xpm" --ok-label "$(gettext 'Yes')" --cancel-label "$(gettext 'No')" --yesno "\n$(gettext 'Not connected.')\n\n$(gettext 'Return to configuration setup window?')\n" 10 60
    return $?
}

while true; do #200607...
    if pgrep -f 'pgprs --connect' | grep -qwv "$PPID"; then
        Xdialog --center --wmclass pgprs --title "$(gettext 'Pgprs GPRS Connect')" --icon "$ICONLIB/error.xpm" --ok-label "$(gettext 'Configure')" --cancel-label "$(gettext 'Retry')" --yesno "\n$(gettext 'PGPRS cannot start now because a Pgprs Connection window is already active.')\n\n$(gettext 'If you terminate the connection, you can Retry connecting.')\n\n$(gettext "Otherwise, you can go to Setup or use 'X' to exit.")\n" 0 70
        STATUS=$? #0 = configure, 1 = retry, 255 = abort
        [ $STATUS -eq 1 ] && continue || exit $STATUS
    elif pgrep -f 'frisbee --connect-gprs' >/dev/null; then
        Xdialog --center --wmclass pgprs --title "$(gettext 'Pgprs GPRS Connect')" --icon "$ICONLIB/error.xpm" --ok-label "$(gettext 'OK')" --cancel-label "$(gettext 'Retry')" --yesno "\n$(gettext 'PGPRS cannot start now because Frisbee mobile wireless (GPRS) is active.')\n\n$(gettext 'If you terminate the Frisbee connection, you can Retry connecting.')\n" 0 70
        STATUS=$? #0 = configure, 1 = retry, 255 = abort
        [ $STATUS -eq 1 ] && continue
        [ $STATUS -eq 0 ] && exit 1 || exit $STATUS
    else break
    fi
done

#160116...
if [ -s /var/run/ppp-gprs.pid ]; then
    GPRS_PPPD_PID="$(grep -ow '[0-9]*' /var/run/ppp-gprs.pid)" #200607...
    #Kill connection if not for current device.
    if pgrep -ax 'pppd' | grep -w "^$GPRS_PPPD_PID" | grep -qv "$GPRSDEV"; then
        kill "$GPRS_PPPD_PID"
        rm -f /var/run/ppp-gprs.pid
    fi
    CONNECT_PID=''
    connection_dialog_func
    exit $? #0 = configure/setup, 1 = done, 255 = abort
fi #160116 end

echo "#Generated by pgprs-connect" > /etc/ppp/peers/gprs-generated
echo "call gprs-editable" >> /etc/ppp/peers/gprs-generated
if [ "$GPRSUSER" ]; then #130812
    echo -e "auth\nuser $GPRSUSER" >> /etc/ppp/peers/gprs-generated
    [ "$GPRSPAPONLY" = "true" ] \
     && echo "require-pap" >> /etc/ppp/peers/gprs-generated
else
    echo "noauth" >> /etc/ppp/peers/gprs-generated
fi

[ -n "${GPRSPIN}" ] && [ "${GPRSPIN}" != "gprspin" ] \
  && SAVEVAL="AT+CPIN=\"$GPRSPIN\"" \
  || SAVEVAL="AT"
[ "$SAVEVAL" != "$(grep -sv "^'" /etc/ppp/chatscripts/gprs-cpin_command)" ] \
 && echo "$SAVEVAL" > /etc/ppp/chatscripts/gprs-cpin_command #130812 end
SAVEVAL="AT+CGDCONT=1,\"IP\",\"$GPRSAPN\""
[ "$SAVEVAL" != "$(grep -sv "^'" /etc/ppp/chatscripts/gprs-cgdcont_command)" ] \
  && echo "$SAVEVAL" > /etc/ppp/chatscripts/gprs-cgdcont_command

if [ -c "$GPRSDEV" ] \
  && echo ATZ | busybox microcom -t 200 "$GPRSDEV" 2>/dev/null | grep -q 'ATZ'; then #130812 151224 160104
    echo -n > $CONNECTLOG
    connect_func & #200607
# shellcheck disable=SC2181 # status test necessary due to '&' above.
    if [ $? -eq 0 ]; then
        CONNECT_PID=$! #200607
        connection_dialog_func #160116
        # Returns 0 = configure/setup, 1 = done, 255 = abort #200607...
        STATUS=$? #200607
    else
        Xdialog --center --wmclass pgprs --title "$(gettext 'Pgprs GPRS Connect')" --backtitle "\n$(gettext 'The attempt to connect was unsuccessful:')\n" --ok-label "$(gettext 'Configure')" --cancel-label "$(gettext 'Close')" --logbox $CONNECTLOG 25 82
        STATUS=$? #200607
    fi
else
    Xdialog --center --wmclass pgprs --title "$(gettext 'Pgprs GPRS Connect')" --icon "$ICONLIB/error.xpm" --ok-label "$(gettext 'Configure')" --cancel-label "$(gettext 'Close')" --yesno "\n$(gettext 'Cannot connect.')\n\n$(eval_gettext "Modem device '\$GPRSDEV' is not accessable")\n$(gettext 'It might not be plugged in.')\n" 10 60
    STATUS=$? #200607
fi
#STATUS: #0 = configure/setup, 1 = done, 255 = abort #200607
exit $STATUS
