#!/bin/bash
# common functions

if [ "`whoami`" != "root" ] ; then
	echo "Must be root"
	exit 1
fi

RFS=${PWD}/rootfs-skeleton
export PATH=${PATH}:${RFS}/bin:${RFS}/sbin:${RFS}/usr/bin:${RFS}/usr/sbin:${PWD}/support

function source_compat_repos() {
	DCRFILE=''
	if [ -f ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
		. ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
		DCRFILE="DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}"
	else
		. ./DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}
		DCRFILE="DISTRO_COMPAT_REPOS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}"
	fi
}

function source_pkgs_specs() {
	DPSFILE=''
	if [ -f ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then #w478
		. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} #has FALLBACKS_COMPAT_VERSIONS
		DPSFILE="DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}"
	else
		. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT} #has FALLBACKS_COMPAT_VERSIONS
		DPSFILE="DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}"
	fi
}

function source_woofmergevars() {
	if [ -f WOOFMERGEVARS ];then
		. ./WOOFMERGEVARS #has variables WOOF_HOSTARCH, WOOF_TARGETARCH, WOOF_COMPATDISTRO, WOOF_COMPATVERSION
	else
		echo 'File WOOFMERGEVARS does not exist. This is created by script
	merge2out. Your setup is wrong, quiting.'
		exit 1
	fi
}

function set_binaries_var() {
	BINARIES='deb' #download to packages-deb.
	[ "$DISTRO_BINARY_COMPAT" = "slackware" ] && BINARIES="tgz_txz" #100617 download to packages-tgz_txz-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "slackware64" ] && BINARIES="tgz_txz" #140716 download to packages-tgz_txz-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "debian" ] && BINARIES="deb" #download to packages-deb-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "devuan" ] && BINARIES="deb" #download to packages-deb-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "gentoo" ] && BINARIES="gentoo" #120515 download to packages-gentoo-gap6
	[ "$DISTRO_BINARY_COMPAT" = "raspbian" ] && BINARIES="deb_raspbian" #download to packages-deb_raspbian-${DISTRO_COMPAT_VERSION}.
	BINARIES="${BINARIES}-${DISTRO_COMPAT_VERSION}" #w478
}

function set_archdir_var() {
	#debian and derivatives: wheezy and later
	#ubuntu and derivatives: precise and later
	ARCHDIR=''
	case $WOOF_COMPATDISTRO in raspbian|debian|devuan|ubuntu|trisquel)
		case $WOOF_TARGETARCH in #see file WOOFMERGEVARS
			x86) ARCHDIR='i386-linux-gnu' ;;
			x86_64) ARCHDIR='x86_64-linux-gnu' ;;
			arm) ARCHDIR='arm-linux-gnueabihf' ;;
		esac
	esac
}

function run_findpkgs() {
	#new script to find all pkgs for build...
	./support/findpkgs
	#...returns file status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
	# each line is full db entry for pkg, prefixed with :generic-name:, pet/compat and repo-filename.
	# ex: :a52dec:|compat|Packages-puppy-wary5-official|a52dec-0.7.4-w5|a52dec|0.7.4-w5||BuildingBlock|68K||a52dec-0.7.4-w5.pet||A free ATSC A52 stream decoder|puppy|wary5||
	if [ $? -ne 0 ];then
		echo
		echo "ERROR: Script support/findpkgs aborted with an error, exiting."
		exit 1
	fi
	if [ ! -f status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
		echo
		echo "ERROR: Something went wrong with support/findpkgs, exiting."
		exit 1
	fi
}

function create_local_repos_dirs() {
	. ./WOOFMERGEVARS
	. ./DISTRO_SPECS
	#common dir to download pet pkgs to...
	mkdir -p ../local-repositories/${WOOF_TARGETARCH}/packages-pet
	[ ! -e packages-pet ] && ln -s ../local-repositories/${WOOF_TARGETARCH}/packages-pet packages-pet # check exist.
	set_binaries_var
	mkdir -p ../local-repositories/${WOOF_TARGETARCH}/packages-${BINARIES}
	[ ! -e packages-${BINARIES} ] && ln -s ../local-repositories/${WOOF_TARGETARCH}/packages-${BINARIES} packages-${BINARIES} # check exist.
	mkdir -p ../local-repositories/initrd-progs/0sources
	[ ! -e initrd-progs/0sources ] && ln -s ../../local-repositories/initrd-progs/0sources initrd-progs/0sources # check exist.
	if [ "$DISTRO_TARGETARCH" = "arm" ]; then
		mkdir -p ../local-repositories/${WOOF_TARGETARCH}/sd-skeleton-images
		[ ! -e sd-skeleton-images ] && ln -s ../local-repositories/${WOOF_TARGETARCH}/sd-skeleton-images sd-skeleton-images
	fi
	mkdir -p ../local-repositories/kernel-kit/sources
	[ ! -e kernel-kit/sources ] && ln -s ../../local-repositories/kernel-kit/sources kernel-kit/sources # check exist.
	mkdir -p ../local-repositories/kernel-kit/tools
	[ ! -e kernel-kit/tools ] && ln -s ../../local-repositories/kernel-kit/tools kernel-kit/tools # check exist.
}

function set_layer_type() { # sets $LAYER_TYPE
	LAYER_TYPE='aufs'
	modprobe aufs &>/dev/null
	cat /proc/filesystems | grep -q 'aufs' && return
	mount | grep ' / ' | grep -q 'aufs' && return
	lsmod | grep -q '^aufs ' && return
	#-
	LAYER_TYPE='overlay'
	modprobe overlay &>/dev/null
	cat /proc/filesystems | grep -q 'overlay' && return
	lsmod | grep -q '^overlay ' && return
	#-
	echo "ERROR: need aufs or overlay"
	exit 1
}

function clean_out_whiteouts() { #dir
	local dir="$@"
	# aufs whiteouts
	#find "$dir" -name '.wh*' -delete
	find "$dir" -name '.wh.*' -exec rm -rf '{}' 2>/dev/null \;
	# overlayfs whiteouts
	if [ "$LAYER_TYPE" = 'overlay' ]; then
		for ONE_CHAR_NODE in `find "$dir" -type c`
		do
			if [ "`stat -c '%t, %T' $ONE_CHAR_NODE`" = '0, 0' ]; then
				# paranoid test, regular files are also '0, 0'
				if [ "`stat -c '%F' $ONE_CHAR_NODE`" = 'character special file' ]; then
					rm $ONE_CHAR_NODE
				fi
			fi
		done
	fi
}

function copy_pkgs_to_build() {
	. ./DISTRO_SPECS
	SFS_DIR=$2
	case $SFS_DIR in
		*drv)xPRE=${SFS_DIR:0:1};; #extract first char: a, y, z, f ...
		*)xPRE='';;
	esac
	while read ONEPKG
	do
	case $SFS_DIR in
		adrv|ydrv)
			if ls rootfs-packages | grep -q "${ONEPKG}" ;then
				case "${ONEPKG}" in
					jwm*|ptheme|pfilesearch|pfind|wallpaper)
					echo "$ADRV_INC YDRV_INC FDRV_INC" | grep -q "${ONEPKG}" && continue;; #don't copy these in {a,y,f}drv
				esac
				echo -n " ${ONEPKG}"
				cp -a --remove-destination rootfs-packages/${ONEPKG}/* sandbox3/${SFS_DIR}/ 2> /tmp/3builddistro-cp-errlog
				continue
			fi
			;;
	esac
	if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG} ];then
		if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DEV ];then #pkg may go entirely into devx.
			if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DOC ];then #pkg may go entirely into docs.
				echo "WARNING, PKG DOES NOT EXIST: packages-${DISTRO_FILE_PREFIX}/${ONEPKG}"
				continue
			fi
		fi
    fi
    case "$ONEPKG" in
		mscw|sfs_load|pupx|busybox)continue;; #use woofce apps; busy box may conflict with core apps
		net_setup|wag_profiles) continue ;;
    esac
    echo -n " ${ONEPKG}"
    cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}/* sandbox3/${SFS_DIR}/ 2> /tmp/3builddistro-cp-errlog
    sync
    if [ -s /tmp/3builddistro-cp-errlog ];then #130430 next line fixes those quote chars...
		cat /tmp/3builddistro-cp-errlog | grep 'cannot overwrite non-directory' | tr '[`‘’]' "'" | cut -f 2 -d "'" |
		while read ONEDIRSYMLINK
		do
			xONEDIRSYMLINK="`echo -n "$ONEDIRSYMLINK" | sed -e "s%sandbox3/${SFS_DIR}%%"`"
			cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}${xONEDIRSYMLINK}/* sandbox3/${SFS_DIR}${xONEDIRSYMLINK}/
		done
    fi
	if [ -f sandbox3/${SFS_DIR}/pinstall.sh ];then
		#note, do not filter #! /bin/sh (with a space)...
		grep  -E -v '^\#\!\/bin\/sh' sandbox3/${SFS_DIR}/pinstall.sh >> sandbox3/${xPRE}pinstall.sh
		rm -f sandbox3/${SFS_DIR}/pinstall.sh
    fi
    #get rid of .specs file...
    rm -f sandbox3/${SFS_DIR}/*.specs
    done <<< "$(echo "$1" | tr ' ' '\n')"
}

#=========================================================================
#                           EXTRA ...
#=========================================================================

## you can use this after running ./support/findpkgs and ./1download
## to remove compat distro pkgs (deb,txz) that are no longer needed...
## sh _00func remove_unneeded_compat_pkgs
function remove_unneeded_compat_pkgs() {
	. ./DISTRO_SPECS
	create_local_repos_dirs
	case $DISTRO_BINARY_COMPAT in
		raspbian|debian|devuan|ubuntu|trisquel) W='.*\.deb' ;;
		slackware*) W='.*\.txz|.*\.tgz' ;;
		*) echo "Not supported: $DISTRO_BINARY_COMPAT" ;;
	esac
	if [ ! -f status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
		echo "MISSING FILE: status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}"
		return 1
	fi
	grep -E -o ${W} status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} | \
	sed 's%.*|%%' > /tmp/compatpkgs$$
	if [ ! -d packages-${BINARIES}/zzzzz ] ; then
		mkdir -p packages-${BINARIES}/zzzzz
		cat /tmp/compatpkgs$$ | while read file ; do
			if [ -f packages-${BINARIES}/${file} ] ; then
				mv packages-${BINARIES}/${file} packages-${BINARIES}/zzzzz
			fi
		done
		rm -f packages-${BINARIES}/* 2>/dev/null
		mv packages-${BINARIES}/zzzzz/* packages-${BINARIES}/
		rm -rf packages-${BINARIES}/zzzzz
	fi
	rm -f /tmp/compatpkgs$$
}

if [ "${0##*/}" = "_00func" ] ; then
	$@
fi

### END ###
