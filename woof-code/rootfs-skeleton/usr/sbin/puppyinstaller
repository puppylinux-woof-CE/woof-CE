#!/bin/bash
#(c) Copyright Barry Kauler 2006 www.puppylinux.com
#(c) Copyright 01micko, shinobar and others
#2007 Lesser GPL licence v2 (/usr/share/doc/legal/lgpl-2.1.txt)
#140705 major overhaul of guis and conditions.

# to enable full install to hdd (before running this script):
#   export ENABLE_FULLINSTALL=1 

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@} #110505

if [ -d /sys/firmware/efi ] ; then
	/usr/lib/gtkdialog/box_yesno --ok-cancel --no-first --yes-label Continue --no-label Close --warning "Puppy Installer" "This installer does not support UEFI. It's only useful if you want to install to a drive that will not be booted on this machine.."
	[ $? -ne 0 ] && exit
fi

export TEXTDOMAIN=puppyinstaller
export OUTPUT_CHARSET=UTF-8
. gettext.sh

export TMPDIR=/tmp/apps/puppyinstaller
! [ -d $TMPDIR ] && mkdir -p ${TMPDIR}

. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS
[ -f /initrd/DISTRO_SPECS ] && . /initrd/DISTRO_SPECS
NEWVER="$DISTRO_VERSION"
L_PUPPY_INSTALLER=$(gettext 'Puppy Installer')
CWD=`pwd`

if [ "$PUPSFS" ] ; then #PUPSTATE
	DISTRO_PUPPYSFS=${PUPSFS##*/}
	DISTRO_ZDRVSFS=${ZDRV##*/}
	DISTRO_FDRVSFS=${FDRV##*/}
	DISTRO_ADRVSFS=${ADRV##*/}
	DISTRO_YDRVSFS=${YDRV##*/}
fi

#===================================================================
#                           FUNCTIONS
#===================================================================

# $1: fstype
# $2: partition
linux_func() {
	#returns $DISTRO;windows, version of already-installed Puppy or other Linux if any.
	#set -x ###debug
	unset DISTRO
	# check for Puppy frugal .. some wild guessing/assumptions
	DISTRO=""
	[ ! $2 ] && return 0
	mkdir -p /mnt/$2
	ISPUPMNTPT="`mount | grep "^/dev/$2" | tr -s " " | cut -f 3 -d " "|head -n1`"
	if [ "$ISPUPMNTPT" = "" ];then
		ISPUPMNTPT="/mnt/$2"
		mount -t $1 /dev/$2 /mnt/$2
		[ $? -ne 0 ] && return 0
	fi
	# find puppy. Should find most versions back to puppy 2
	# should handle: pup-4.2, pup_432, lupu-500, spup-052, puppy_slacko_5.9.3.x, puppy-214x
	#echo "$ISPUPMNTPT" ###debug
	ISFILE=`find "$ISPUPMNTPT" -maxdepth 2 -type f -name '*up*[0-9]*.sfs'`
	#echo $ISFILE ###debug
	TEMP=${TMPDIR}/num${2}
	printf "$ISFILE" > $TEMP
	echo "" >> $TEMP # add a carriage return for 'wc'
	#echo -n "This many " ###debug
	#wc -l $TEMP ###debug
	NUMBER_FOUND=`grep 'sfs$' $TEMP|wc -l`
	[ "$NUMBER_FOUND" -ge 1 ] && echo "found $NUMBER_FOUND pups" || echo "no pups found"
	[ "$NUMBER_FOUND" -gt 1 ] && DISTRO="Many frugal Puppies"
	if [ "$NUMBER_FOUND" -eq 1 ];then #make a pretty name
		ISNAME=`grep 'sfs$' $TEMP`
		echo "name is $ISNAME"
		SFSNAME="${ISNAME##*/}" # first strip direcory
		# puppy_slacko_5.9.3.sfs = Puppy Slacko 5.9.3 or pup-431 = Pup 431 .. we care not about the DOTS!
		DISTROX="`echo ${SFSNAME%.*}|tr '_' '\n'|tr '-' '\n'|sed 's%^\(.\)%\U\1%g'|tr '\n' ' '`"
		case "$1" in # filesystem
			*fat|ntfs)echo "continuing search" ;;
			*)DISTRO="${DISTROX}" ;;
		esac
		rm $TEMP
		#echo 1 ###debug
		[ "$DISTRO" ] && echo "distro is $DISTRO" || echo "no distro"
	fi
	if [ ! "$DISTRO" ];then # look for full puppy or other linux
		if [ -f "$ISPUPMNTPT"/etc/DISTRO_SPECS ];then
			. "$ISPUPMNTPT"/etc/DISTRO_SPECS
			DISTRO="$DISTRO_NAME $DISTRO_VERSION full"
		elif [ -f "$ISPUPMNTPT"/etc/puppyversion ];then  #pre woof
			DISTRO="Puppy `cat "$ISPUPMNTPT"/etc/puppyversion` full"
		elif [ -f "${ISPUPMNTPT}"/etc/os-release ];then # other linux
			. "${ISPUPMNTPT}"/etc/os-release
			DISTRO="$PRETTY_NAME"
		fi
		#echo 2 ###debug
	fi
	# last chance.. check for vmlinuz
	if [ ! "$DISTRO" ];then
		KERNELS=$(find -L "$ISPUPMNTPT" -maxdepth 2 -type f -iname 'vmlinuz*') #shinobar, but reduced depth to 2
		[ "$KERNELS" ] && DISTRO="Unknown Linux"
		# could be a frugal pup though
		FRUGPUP=`find "$ISPUPMNTPT" -maxdepth 2 -type f -name '*up*[0-9]*.sfs'`
		[ "$FRUGPUP" ] && DISTRO=''
		#echo 3 ###debug
		[ "$DISTRO" ] && echo "distro is $DISTRO" || echo "no distro"
	fi
	# finally check for windows
	if [ ! "$DISTRO" ];then
		case "$1" in *fat|ntfs)
			echo $ISPUPMNTPT
			MSW=""
			WINSTALL=`find "$ISPUPMNTPT" -maxdepth 1 -type d -iname 'windows'`
			ANCW=`find "$ISPUPMNTPT" -maxdepth 2 -type f -name AUTOEXEC.BAT`
			OLDW=`find "$ISPUPMNTPT" -maxdepth 2 -type f -name boot.ini`
			MEDW=`find "$ISPUPMNTPT" -maxdepth 2 -type f -name 'BCD'`
			NEWW=`find "$ISPUPMNTPT" -maxdepth 3 -type d -name 'EFI'` # windows server 2008 is 3 deep
			SIXTY4W=`find "$ISPUPMNTPT"/Windows -maxdepth 2 -type d -name 'SysWOW64' 2>/dev/null`
			if [ "$WINSTALL" != "" ] ; then
				if [ "$ANCW" -o "$OLDW" -o "$MEDW" -o "$MEDW" -o "$SIXTY4W" ];then
					MSW="MS Windows"
				fi
			elif  [ "$MEDW" != "" ] || [ "$NEWW" != "" ];then
				MSW="Windows boot"
				[ "$NEWW" != "" ] && MSW="New Windows boot"
			fi
			echo "is windows? $MSW"
			if [ "$MSW" != "" ];then # Windows is installed
				echo "$MSW" >>${TMPDIR}/win
				if [ "$DISTROX" -a "$DISTROX" != "none" ];then
					DISTRO="$MSW and $DISTROX"
				else
					DISTRO="$MSW"
				fi
			else
				DISTRO="$DISTROX"
			fi
			;;
		esac
	fi
	[ ! "$DISTRO" ] && DISTRO="none"
	umount /mnt/$2 2>/dev/null
	unset DISTROX
	# done
}

# $1: dev
free_space_func() {
	# function to determine if there is substantial free space on a physical drive
	# check what is used
	USED=`probepart -k "$1" | cut -d '|' -f3` #KB
	t=0
	for k in `echo "$USED"`;do
		t=$(($t + $k))
	done
	# check size of disk
	s=`blockdev --getsize64 "$1"` #B
	s=$(($s / 1024)) #KB
	# calc freespace
	f=$(($s - $t))
	f=$((f / 1024)) #MB
}

gpartedfixfunc() { #params: $DRVSEL
	GPDRV="$1"
	gparted /dev/$GPDRV &
	sleep 2
	gxmessage -bg '#EBADE2' -center -title "$L_PUPPY_INSTALLER" \
 "$(gettext 'GParted is a partition manager, a tool for deleting,
 creating and resizing partitions.')

$(gettext "Regarding 'ntfs' or 'vfat', of course do not change these to ext3
if the partition has Windows installed on it! However,
a Flash drive can be changed to ext3 and still boots fine.")

$(gettext 'WARNING: changing the filesystem will wipe everything in the partition!')

$(gettext "Right-click on the partition and you will see a menu
option to 'Manage flags'. Make sure the 'boot' flag is set.")

$(gettext "If you have a USB Flash drive that you have installed Puppy to but it will
not boot... this may fix it:
 1. delete all partitions on the USB device. 
 2. Create a new primary ext3 partition
 3. Click the 'Apply' button to write changes
 4. Set the 'boot' configuration flag (right-click on partition, 
    choose 'manage flags').")

$(gettext 'after exiting GParted, do a mouse-over the desktop drive
icon(s) -- if it(they) has not updated, unplug then replug the USB drive.')" &
	MSGID=$!
	while [ 1 ];do
	  [ "`pidof gparted`" = "" ] && break #v424
	  sleep 1
	done
	[ ! "`which gparted`" = "" ] && pupkill $MSGID 2>/dev/null
	#w015 need to refresh desktop drive icons(s)...
	sync
	#now have a binary daemon, send this uevent to it, then /usr/local/pup_event/frontend_change will be called...
	echo change > /sys/block/${GPDRV}/uevent
}

unmountcdfunc() {
	if [ "$CDDRIVE" -a "`mount | grep "^/dev/$CDDRIVE " | cut -f 3 -d ' '`" ];then
		umount /dev/$CDDRIVE "`mount | grep "^/dev/$CDDRIVE " | cut -f 3 -d ' '`"
	fi
	if [ "$ISO_MP" -a "`mount | grep " $ISO_MP "`" ] ; then
		umount $ISO_MP 2>/dev/null #iso mountpoint
	fi
}

locate_puppy_src_files() { # sets $SRCPATH $CDDRIVE
	SRCPATH=""
	CDDRIVE=""
	ISO_MP=""
	MOUNT_ISO=""
	#-----
	if [ $PUPMODE -eq 2 ] ; then #full install
		MOUNT_ISO=1
	else
		PDEV1_IS_CD=$(probedisk /dev/${PDEV1} 2>/dev/null | grep '|optical|')
		PDEV1_MP=$(LANG=C mount | grep "^/dev/${PDEV1} " | awk '{print $3}')
		PDEV1_FS=$(busybox blkid /dev/${PDEV1} | grep -o ' TYPE=.*' | cut -f 2 -d '"')
		if [ "$PDEV1_MP" ] && [ ! "$PDEV1_FS" ] ; then # no fs?
			# hmm mounted but media not present?... removable drive (probably)
			umount $PDEV1_MP
			PDEV1_MP=""
		fi
		#--
		if [ ! "$PDEV1_FS" ] ; then
			# no partition fs
			PDEV1_FS="$DEV1FS" #DEV1FS is in /etc/rc.d/PUPSTATE
		fi
		if [ ! "$PDEV1_MP" ] ; then
			# not mounted
			mkdir -p /mnt/$PDEV1
			mount -t $PDEV1_FS /dev/$PDEV1 /mnt/$PDEV1
			if [ $? -eq 0 -a -f /mnt/${PDEV1}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
				SRCPATH=/mnt/${PDEV1}${PSUBDIR}
			else
				umount /mnt/$PDEV1 2>/dev/null
			fi
		else
			# already mounted
			if [ -f ${PDEV1_MP}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
				SRCPATH=${PDEV1_MP}${PSUBDIR}
			fi
		fi
		#--
		if [ -z "$SRCPATH" -a -n "$PDEV1_IS_CD" ] ; then # not found yet..
			# may need to insert CD..
			CDDRIVE=${PDEV1}
			CDDRVINFO=$(echo "$PDEV1_IS_CD" | cut -f 3 -d '|')
			Xdialog --wmclass "gtkdialog2" --left --title "$L_PUPPY_INSTALLER" \
			--msgbox "$(eval_gettext "Please insert the Puppy live-CD (if not already) \
  into the drive.\nNote, in case your PC has two CD/DVD drives, \
  Puppy is expecting\nthe live-CD to be inserted into $CDDRIVE, which is \
  described as:\n $CDDRVINFO \n\nAfter inserting live-CD, \
  click OK button...")" 0 0
			mkdir /mnt/${CDDRIVE} 2> /dev/null
			mount -t iso9660 /dev/${CDDRIVE} /mnt/${CDDRIVE} || umount /dev/${CDDRIVE}
			if [ -f /mnt/${CDDRIVE}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
				SRCPATH=/mnt/${CDDRIVE}${PSUBDIR}
			fi
		fi
	fi
	#-----
	if [ ! "$SRCPATH" ] ; then
		MOUNT_ISO=1 #last resort..
	fi
	#-----
	if [ "$MOUNT_ISO" ] ; then
		ISO_MP=/mnt/iso_file
		cd $HOME
		ISO_FILE=$(/usr/lib/gtkdialog/file_chooser "ISO File" "$(gettext "Please select a Puppy live-CD .iso file for $DISTRO_NAME $DISTRO_VERSION ")")
		[ $? -ne 0 ] && exit 1
		umount ${ISO_MP} 2>/dev/null
		mkdir -p ${ISO_MP}
		mount -t iso9660 -o loop ${ISO_FILE} ${ISO_MP}
		#--
		if [ -f ${ISO_MP}${PSUBDIR}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${ISO_MP}${PSUBDIR}
		elif [ -f ${ISO_MP}/${DISTRO_PUPPYSFS} ] ; then
			SRCPATH=${ISO_MP}
		else
			umount ${ISO_MP} 2>/dev/null
			ISO_MP=""
		fi
		#--
	fi
	#===============================
	#sanity check...
	if [ ! -f ${SRCPATH}/${DISTRO_PUPPYSFS} ];then #v3.01 v424 100913
		unmountcdfunc
		Xdialog --wmclass "gtkdialog2" --left \
			--title "$(gettext 'ERROR')" --msgbox "`eval_gettext \"Oh dear, a 'sanity check' has failed.\
 \nThis file: \\\$SRCPATH/\\\${DISTRO_PUPPYSFS}\ndoes not exist.\nThe above \
 is supposed to be path-to-where-puppy-files-are/\\\${DISTRO_PUPPYSFS}\
 \nClick OK button to quit...\"`" 0 0
		exit
	fi
}

# $1: directory
# $2: distro
# $3: pmedia
copy_g4dos_cd() {
	if [ ! -d "$1" ] ; then
		return 1
	fi

	cp -fv /usr/share/g4dos/pcd/* "$1"/ # deleted dir - obsolete code - delete this
	cp -fv /usr/share/boot-dialog/menu.lst "$1"/
	cp -fv /usr/share/boot-dialog/menu_phelp.lst "$1"/
	cp -fv /usr/share/boot-dialog/grldr "$1"/

	if [ "$2" ] ; then #distro
		if [ "$2" = "auto" ] ; then
			. /etc/DISTRO_SPECS
			sed -i "s%#distrodesc#%${DISTRO_NAME} ${DISTRO_VERSION}%" "$1"/menu.lst
		else
			sed -i "s%#distrodesc#%${2}%" "$1"/menu.lst
		fi
	fi
	if [ "$3" ] ; then #pmedia
		sed -i "s|pmedia=cd|pmedia=${3}|" "$1"/menu.lst
	fi

	# frugalpup
	if [ -f /usr/local/frugalpup/grub4dos.tar.xz ] ; then
		tar -C "$1"/ -xf /usr/local/frugalpup/grub4dos.tar.xz ./grldr
	fi

	if [ ! -f "$1"/grldr ] && [ -f /usr/lib/grub4dos/grldr ] ; then # grub4dosconfig
		cp /usr/lib/grub4dos/grldr "$1"/
	fi
}

# $1: drive
write_wee_mbr() {
	XDEV=${1##*/}
	BLOCKDEV=$1
	WEE_MBR='/usr/share/boot-dialog/wee.mbr'
	[ -f /usr/share/g4dos/wee.mbr ] && WEE_MBR='/usr/share/g4dos/wee.mbr' # moved - delete this
	if [ ! -f $WEE_MBR ] ; then
		echo "file not found: $WEE_MBR"
		exit 1
	fi
	cp ${WEE_MBR} /tmp/wee.mbr
	## Read disk signature and partition table from MBR
	## and write it to wee.mbr:
	dd if=${BLOCKDEV} bs=1 skip=439 count=72 2>/dev/null | \
		dd of=/tmp/wee.mbr bs=1 seek=439 conv=notrunc
	## backup MBR
	dd if=${BLOCKDEV} of=/tmp/${XDEV}.mbr bs=512 count=63
	## Write wee MBR to $MBR_DEV
	echo "Installing bootloader(Wee) on ${BLOCKDEV} ..."
	dd if=/tmp/wee.mbr of=${BLOCKDEV}
}

grub4dos_func() {
	#really need gtkdialog here.. add a "readme" button or something... all this says is "trust me" }:-)
	GR4MSG=$(gettext "You now have the option to install a bootloader named 'grub4dos'. \
\nIt is a very simple exercise and will find all of your previous \
\nWindows and Linux installations and create a simple boot menu so \
\nyou can choose which Operating System to boot at power on. \
\n\nWould you like to install Grub4dos?")
	Xdialog --title "$gettext 'Puppy Installer - Grub4dos'" \
	--yesno "$GR4MSG" 0 0 0
	case "$?" in
	  #until grub4dosconfig becomes part of woofce it shouldn't be exec'd
	  0) grub4dosconfig ;; #exec grub4dosconfig
	  *)echo "no" ;;
	esac
}

fatal() {
	[ $XPID ] && kill $XPID
	/usr/lib/gtkdialog/box_ok "$(gettext 'Puppy Installer')" error "$(gettext 'ERROR: Failed to copy files.')"
	unmountcdfunc
	exit 1
}

#===================================================================
#                          MAIN DIALOG
#===================================================================

tmpsel=${TMPDIR}/selections

# gui
[ -s $HOME/.config/ptheme/gtkdialog_active ] && . $HOME/.config/ptheme/gtkdialog_active 
[ ! "$SVG_BAR_COLOR_TOTAL" ] && SVG_BAR_COLOR_TOTAL='#111' 
[ ! "$SVG_BAR_COLOR_TEXT" ] && SVG_BAR_COLOR_TEXT='#eee' #background color 

export PUI=' 
<window title="'$L_PUPPY_INSTALLER'" icon-name="gtk-preferences"> 
<vbox> 
  '"`/usr/lib/gtkdialog/xml_info 0 puppy_install.svg 60 "$(gettext "If you wish to install Puppy to a removable media, such as a USB Flash or hard drive, <b>please insert it right now</b>, before proceeding. Then, choose the media that you want to install Puppy to.")"`"' 
  <frame '$L_PUPPY_INSTALLER'> 
    <hbox space-expand="true" space-fill="true"> 
      <eventbox name="bg" above-child="false" visible-window="true" space-expand="false" space-fill="false"> 
        <hbox space-expand="false" space-fill="false"> 
          <vbox margin="5"> 
            <text angle="90" wrap="false" use-markup="true" yalign="0.5" space-expand="true" space-fill="true"><label>"<big><big><span fgcolor='"'$SVG_BAR_COLOR_TEXT'"'><b>USB</b></span></big></big>"</label></text> 
          </vbox> 
        </hbox> 
      </eventbox> 
      <vbox> 
        <hbox space-expand="true" space-fill="true"> 
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"<b>USB</b> '$(gettext 'Flash drive / SD card')'"</label></text> 
          <vbox space-expand="false" space-fill="false"> 
            <button> 
              '"`/usr/lib/gtkdialog/xml_button-icon flashcard_usb.svg big`"' 
              <action type="exit">usbflash</action> 
            </button> 
          </vbox> 
        </hbox> 
        <hbox space-expand="true" space-fill="true"> 
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"<b>USB</b> '$(gettext 'hard drive / SSD')'"</label></text> 
          <vbox space-expand="false" space-fill="false"> 
            <button> 
              '"`/usr/lib/gtkdialog/xml_button-icon harddisk_usb.svg big`"' 
              <action type="exit">usbhd</action> 
            </button> 
          </vbox> 
        </hbox> 
      </vbox> 
    </hbox> 

    <hbox space-expand="true" space-fill="true"> 
      <vbox> 
        <hbox space-expand="true" space-fill="true"> 
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext '<b>Internal</b> hard drive / SSD')'"</label></text> 
          <vbox space-expand="false" space-fill="false"> 
            <button> 
              '"`/usr/lib/gtkdialog/xml_button-icon harddisk.svg big`"' 
              <action type="exit">atahd</action> 
            </button> 
          </vbox> 
        </hbox> 
      </vbox> 
    </hbox> 

  </frame> 

  <hbox space-expand="false" space-fill="false"> 
    <text space-expand="true" space-fill="false"><label>" "</label></text>
    <button> 
      '"`/usr/lib/gtkdialog/xml_button-icon quit.svg`"' 
      <label>'$(gettext 'Quit')'</label> 
      <action type="exit">EXIT</action> 
    </button> 
  </hbox> 
</vbox> 
</window>' 

echo ' 
style "bg" { bg [NORMAL] = "'$SVG_BAR_COLOR_TOTAL'" } 
widget "*bg*" style "bg"' > ${TMPDIR}/gtkrc_pui 
export GTK2_RC_FILES=${TMPDIR}/gtkrc_pui:/root/.gtkrc-2.0 

. /usr/lib/gtkdialog/xml_info gtk #build bg_pixmap for gtk-theme 
RETVAL="`gtkdialog --center -p PUI --styles=/tmp/gtkrc_xml_info.css 2>/dev/null`" 
eval "$RETVAL" 
[ ! "`grep -E "usbflash|usbhd|atahd|cd" <<< "$EXIT"`" ] && exit 
PMEDIA=$EXIT

# builds woofified gui for selected install type
gui_func() {
	#set -x ###debug
	echo -n '' > ${TMPDIR}/drivegui
	message="$1"
	case "$message" in
		1)installmessage=$(gettext "Choose which drive to install to:") ;;
		*)installmessage="$message" ;;
	esac
	cat $tmpsel | \
	while read d
	do
		s_icon=`echo "$d" | grep -E "usbflash|usbhd|atahd"`
		if [ "$s_icon" != "" ];then
			case "$s_icon" in
				usbflash)m_icon=flashcard_usb.svg;TYPE=USB ;;
				atahd)m_icon=harddisk.svg;TYPE="Hard Disk" ;;
				usbhd)m_icon=harddisk_usb.svg;TYPE="USB Hard Drive" ;;
			esac
			echo "$TYPE" > ${TMPDIR}/type
			continue # got icon, reitterate
		fi
		echo "$d" | grep -q 'size' || continue
		drv=`echo "$d" | cut -d ' ' -f1`
		Exit=$drv
		case "$drv" in
			sr*)Exit="exit" ;;
		esac
		desc=`echo "$d" | cut -d ' ' -f2,3,4,5,6,7 | tr -d '"'`
		echo '<hbox space-expand="true" space-fill="true"> 
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"<b>'$drv'</b> '"$desc"'"</label></text> 
          <vbox space-expand="false" space-fill="false"> 
            <button> 
              '"`/usr/lib/gtkdialog/xml_button-icon $m_icon big`"' 
              <action type="exit">'$Exit'</action> 
            </button> 
          </vbox> 
        </hbox>' >> ${TMPDIR}/drivegui
	done
	DRVS=`cat ${TMPDIR}/drivegui`
	TYPE=`cat ${TMPDIR}/type`
	export dlg1='<window title="'$L_PUPPY_INSTALLER'" icon-name="gtk-preferences" window-position="1"> 
<vbox> 
  <frame '$L_PUPPY_INSTALLER'> 
    '"`/usr/lib/gtkdialog/xml_info 0 puppy_install.svg 32 "$installmessage"`"' 

	<hbox space-expand="true" space-fill="true"> 
      <eventbox name="bg" above-child="false" visible-window="true" space-expand="false" space-fill="false"> 
        <hbox space-expand="false" space-fill="false"> 
          <vbox margin="5"> 
            <text angle="90" wrap="false" use-markup="true" yalign="0.5" space-expand="true" space-fill="true"><label>"<big><big><span fgcolor='"'$SVG_BAR_COLOR_TEXT'"'><b>'"$TYPE"'</b></span></big></big>"</label></text> 
          </vbox> 
        </hbox> 
      </eventbox> 
      <vbox> 
        
        '"$DRVS"'
        
      </vbox> 
    </hbox> 
  </frame> 
  <hbox space-expand="false" space-fill="false"> 
    <button> 
      '"`/usr/lib/gtkdialog/xml_button-icon quit`"' 
      <label>'$(gettext 'Quit')'</label> 
      <action type="exit">EXIT</action> 
    </button> 
    '"`/usr/lib/gtkdialog/xml_scalegrip`"' 
  </hbox> 
</vbox> 
</window>'
	echo ' 
style "bg" { bg [NORMAL] = "'$SVG_BAR_COLOR_TOTAL'" } 
widget "*bg*" style "bg"' > ${TMPDIR}/gtkrc_pui 
	export GTK2_RC_FILES=${TMPDIR}/gtkrc_pui:/root/.gtkrc-2.0 
	#--
	. /usr/lib/gtkdialog/xml_info gtk #build bg_pixmap for gtk-theme
	RETVAL="`gtkdialog -p dlg1 --styles=/tmp/gtkrc_xml_info.css`" 
	eval "$RETVAL"
	echo "$EXIT" > ${TMPDIR}/retval
	case "$EXIT" in EXIT|abort) exit ;; esac
}

echo "debug pmedia $PMEDIA"
echo "$PMEDIA" > $tmpsel

#===================================================================
#                          BIG LOOP
#===================================================================

while [ 1 ]
do

 PROBEDISK="`probedisk -extended-usb -type -model -size -hr`"
 case $PMEDIA in
 	usbflash) GREP_PTN='\|usbflash\||\|card\|' ; GREP_OPT='-E' ;;
	usbhd)    GREP_PTN='|usbdrive|' ;;
	atahd)    GREP_PTN='|drive|'  ;;
	*)  /usr/lib/gtkdialog/box_ok "$(gettext 'Puppy installer')" error "$(gettext 'Not yet implemented')"
		exit
		;;
 esac

 while IFS="|" read XDEV XTYPE DRVINFO DRVSIZE
 do
	[ -z "$XDEV" ] && continue
	DRVINFO="$(echo "$DRVINFO" | tr '$' " " | tr ',' ' ' | tr -s " " | sed -e 's/ $//')"
	SELECTIONS="${XDEV##*/} \"${DRVINFO}, size ${DRVSIZE}\""
	echo "$SELECTIONS" >> $tmpsel
 done <<< "`echo "$PROBEDISK" | grep $GREP_OPT "$GREP_PTN"`"

 if [ "$SELECTIONS" = "" ];then
	MSGCHOOSE=$(gettext 'Nothing to choose. If a plugin device, did you plug it in?')
	/usr/lib/gtkdialog/box_ok --ok-label "$(gettext 'QUIT')" "$L_PUPPY_INSTALLER" error "$MSGCHOOSE" 
	exit
 fi

 gui_func 1 #precaution
 gtkdialog-splash -close box -text "$(gettext "Please Wait...")" &
 SPID=$!

 unset SELECTIONS #120126 jemimah: if you choose to run gparted the drive selection
 #window shows your drive twice in the drive selection window after you quit gparted.
 echo "$PMEDIA" > $tmpsel

 DRVSEL="`cat ${TMPDIR}/retval`"
 [ "$DRVSEL" = "" ] && exit

 #          /dev/sdc|vfat   |1939968
 IFS="|" read -r DEV SUPERFS SIZE512B <<< "$(probepart $DRVSEL)"
 DRVSIZE=$(filesize -bytes=512 -2 $SIZE512B) # ex: 947.25 MB
 DRVSIZM=${DRVSIZE%% *}  #ex: 947.25
 IDRVSIZM=${DRVSIZE%%.*} #ex: 947     #truncate to integer.
 DRVSIZE="size $DRVSIZE" #ex: size 947.25
 echo "$DRVSEL - $SUPERFS - $DRVSIZE - $DRVSIZM - $IDRVSIZM" #debug

 DRVMSG=""
 if [ "$SUPERFS" != "" -a "$SUPERFS" != "none" ];then
	FSTYPE=$SUPERFS
	linux_func $FSTYPE $DRVSEL
	[ "$DISTRO" = "none" ] && INST="" || INST=", $DISTRO installed"
	DRVMSG="${DRVSEL}:  ${FSTYPE}, ${DRVSIZE}${INST}
"
 else
	DRVINFO="`probepart "${DRVSEL}.*"`" #probe all drive partitions
	#has mbr and partitions...
	echo -n "" > ${TMPDIR}/pidrvmsg.txt
	echo "$DRVINFO" | \
	while read ONELINE
	do
		IFS="|" read -r XDEV FSTYPE XSIZE <<< "$ONELINE"
		if [ "$FSTYPE" != "" -a "$FSTYPE" != "none" ];then
			PARTSIZE=$(filesize -bytes=512 -2 $XSIZE)
			linux_func $FSTYPE ${XDEV#/dev/}
			[ "$DISTRO" = "none" ] && INST="" || INST=", $DISTRO installed"
			echo "${XDEV#/dev/}: ${FSTYPE}, size ${PARTSIZE}${INST}" >> ${TMPDIR}/pidrvmsg.txt #${PUPINST}
		fi
	done
	DRVMSG="`cat ${TMPDIR}/pidrvmsg.txt`"
 fi

 if [ "$PMEDIA" != "cd" ] ; then
	free_space_func /dev/"$DRVSEL" #returns free space (unpartitioned on drive)
 fi

 freespace=$f #MB
 if [ "$freespace" -gt 32 ];then #I would reclaim less than that but..
	unit=MB
	if [ "$freespace" -gt 1024 ];then
		unit=GB
		freespace=$(($freespace / 1024)) #GB
	fi
	/usr/lib/gtkdialog/box_yesno --ok-cancel --no-label "web" --no-icon "/usr/share/pixmaps/puppy/internet.svg" "$L_PUPPY_INSTALLER" \
  "<span fgcolor='"'green'"'><big><b>Unpartitioned Space!</b></big></span>" \
  "$(eval_gettext "Puppy has found that you have some unpartitioned space on your $DRVSEL drive.")" \
  "<big><big><b> $freespace $unit </b></big></big>" \
  "$(eval_gettext "We recommend that you use the <b>GParted</b> partition manager program in the next window to reclaim this space by making a new partition or click the <b>Web</b> button to learn about Gparted and run this program later.")"
	if [ $? -eq 1 ];then
		kill -9 $SPID 2>/dev/null
		exec defaultbrowser http://gparted.org/documentation.php
		exit
	fi
 fi

 DLGTXT=""
 CHOICES="`echo "$DRVMSG" | grep ':' | cut -f 1 -d ':' | tr "\n" " "`"
 cnt=0
 for ONECHOICE in $CHOICES
 do
	state=true
	ACTION=${ONECHOICE}
 	DLGTXT="$DLGTXT
   <hbox space-expand=\"false\" space-fill=\"false\">  
    <text space-expand=\"true\" space-fill=\"true\" xalign=\"0.2\"><label>$(gettext 'Install Puppy to') ${ONECHOICE}:</label></text>
    <button sensitive=\"$state\">
     <input file>/usr/share/pixmaps/puppy/puppy_install.svg</input>
     <width>24</width>
     <variable>${ONECHOICE}btn</variable>
     <action>Exit:${ACTION}</action>
    </button>
   </hbox>
"
	cnt=$(($cnt + 1)) # for hbox height
 done
 echo $cnt > ${TMPDIR}/cnt
 case "$cnt" in
	1|2)h=100;; #min
	3)h=120;;
	4)h=160;;
	5)h=200;;
	*)h=240;; #max
 esac

 if [ "$SUPERFS" != "" -a "$SUPERFS" != "none" ];then
   WMSG="`gettext "<span fgcolor='"'darkred'"'><b>ERROR: 'Superfloppies' are not supported.
* Please run GParted and 'Create a Partition Table' of type: msdos, and then a ext3 partition....</b></span>"`"
 else
   WMSG="`eval_gettext "WARNING: Notice the filesystem in the intended destination, is that what you want? In particular, if the f.s. is 'vfat' or 'ntfs' you might want to replace these with a Linux ext3 f.s. if the partition can be taken over totally for Puppy's use. If you are installing to an internal drive of a PC, it is highly recommended that the f.s. be a Linux ext3. Puppy can install to vfat/ntfs but limited to "frugal" with "${DISTRO_FILE_PREFIX}save" only. Click the button to run GParted, which will enable you to examine and modify the partitions."`"
 fi
 if [ -s ${TMPDIR}/win ] ; then
   WMSG="$(gettext "<span fgcolor='"'darkred'"'><b>DANGER: MS Windows has been detected. It's not advised to install in the same partition or even the same drive.

But if you know what you're doing, be sure your Windows partition is defragmented and <u>not hibernated</u>!</b></span>")"
 fi

 if [ "$DLGTXT" = "" ];then
	DLGTXT="<text><label>`eval_gettext \"No partitions on drive \\\${DRVSEL}! It is recommended that you run GParted now to create a partition\"`</label></text>"
	#if [ "$PMEDIA" = "usbflash" ];then
	WMSG="$(gettext "IMPORTANT: after creating the partition be sure to set the 'boot' flag (right-click: Manage flags). Also, for a USB Flash drive choose fat32 or ext4 filesystem.
Extra note: Gparted may show invalid partitions on the drive, marked with a '!' icon -- delete it/them and recreate a partition (and make it bootable)")"
 fi

 DLGEXT=""
 DLGEXT1='
   <frame '$(gettext "Filesystem in partition")'>
    <hbox space-expand="true" space-fill="false">
     <text space-expand="true" space-fill="true" use-markup="true"><label>"'"${WMSG}"'"</label></text>
     <vbox>
      <button image-position="Bottom" width-request="100" tooltip-text="GParted is a partition manager much like Partition Magic (TM)">
		<label>'GParted'</label>
		<input file>/usr/share/icons/hicolor/48x48/apps/gparted.png</input>
		<action>EXIT:RUNGPARTED</action>
	  </button>
      
     </vbox>
    </hbox>
   </frame>'

 case $PMEDIA in atahd|usbhd) DLGEXT="" ;; esac
 kill -9 $SPID

 DLG2="
<window title=\"$L_PUPPY_INSTALLER\">
 <vbox>
  <hbox height-request=\"$h\" width-request=\"750\">
   <vbox space-expand=\"true\" space-fill=\"true\">
    <hbox>
      <vbox scrollable=\"true\">
      <text><label>$(gettext 'Info about the chosen drive:')</label></text>
      <text use-markup=\"true\"><label>\"<tt>${DRVMSG}</tt>\"</label></text>
      </vbox>
     </hbox>
    </vbox>
     
     <vbox space-expand=\"true\" space-fill=\"false\" scrollable=\"true\">
$DLGTXT

    </vbox>
   </hbox>
   
$DLGEXT1
$DLGEXT
  
  <hbox>
   <button>
    <input file stock=\"gtk-redo\"></input>
    <label>$(gettext 'Go back and choose a different drive')</label>
    <action>EXIT:GOBACK</action>
   </button>
   <button cancel></button>
  </hbox>
 </vbox>
</window>
"
 RETTXT=$(echo "$DLG2" | gtkdialog --stdin -c --styles=/tmp/gtkrc_xml_info.css)
 eval "$RETTXT"
 rm ${TMPDIR}/{buttonstate,win,cnt,num*,ntfsmnterr*} 2>/dev/null #cleanup
 #returns EXIT="Cancel" or EXIT="abort"...]
 case "$EXIT" in 
	Cancel|abort) exit ;;
	RUNGPARTED)gpartedfixfunc $DRVSEL ; continue ;; #BIG LOOP
	GOBACK)continue ;; #BIG LOOP
 esac

 #sanity check...
 SANITYPART="`echo -n "$RETTXT" | grep '^EXIT' | cut -f 2 -d '"' | cut -f 2 -d '_'`" #'geany
 SANITYMNTPT="`mount | grep "^/dev/${SANITYPART} " | tr -s " " | cut -f 3 -d " "`"

 if [ ! "$SANITYMNTPT" = "" ];then
	SANITYMSG1="$SANITYPART $(gettext 'currently mounted, need to unmount it!!!')"
	SANITYMSG2="$SANITYPART $(gettext 'currently mounted read-write.')"
	SANITYMSG3="`eval_gettext \"\\\$SANITYPART does not have \\\${DISTRO_FILE_PREFIX}save in it.\"`"
	SANITYRORW="`mount | grep "/$SANITYPART" | tr -s " " | cut -f 6 -d " "`"
	[ ! "`echo -n "$SANITYMNTPT" | grep "/initrd/"`" = "" ] && SANITYMSG1="$SANITYPART $(gettext 'cannot be unmounted!')"
	[ "$SANITYRORW" = "(ro)" ] && SANITYMSG2="$SANITYPART $(gettext 'is mounted read-only!')"
	[ "$(find  $SANITYMNTPT/ -maxdepth 3 -name ${DISTRO_FILE_PREFIX}save*)" != "" ] && SANITYMSG3="`eval_gettext \"\\\$SANITYPART has personal storage \\\${DISTRO_FILE_PREFIX}save in it!\"`"
	Xdialog --wmclass "gtkdialog2" --left \
		--title "$(gettext 'Puppy installer: SANITY CHECK')" \
		--ok-label "$(gettext 'CONTINUE')" --cancel-label "$(gettext 'QUIT')" \
		--yesno "`eval_gettext \"A partition sanity check before continuing:\
\n\\\$SANITYMSG1 \n\\\$SANITYMSG2 \n\\\$SANITYMSG3 \n\nIf the above report \
is that the partition is mounted, you need to unmount it\nright now, but if \
report is it cannot be unmounted, then there may be install\ndifficulties -- \
certainly, in the case of install to hard drive you will only\nbe able to do \
an 'option1' install (explained further on).\nIf the partition has \
\\\${DISTRO_FILE_PREFIX}save in it, that is the reason it cannot be\
\nunmounted -- it is currently in use by Puppy. If booting Puppy from \
live-CD,\nif \\\${DISTRO_FILE_PREFIX}save does not exist then Puppy will \
run totally in RAM, which will\nsolve the problem -- but you should not \
delete or rename \\\${DISTRO_FILE_PREFIX}save right\nnow as it is in \
use. Instead, boot some other OS then rename the file, then\nboot Puppy \
live-CD.\n\nBottom-line, unmount the partition now, if you can, otherwise \
CONTINUE script\nwith the restricted install choice, or QUIT script now and \
try to fix the\nproblem of the partition getting mounted...\"`" 0 0
	[ ! $? -eq 0 ] && exit
 fi

 DESTPART="`echo "$RETTXT" | grep '^EXIT' | cut -f 2 -d '"'`" #'geany
 DESTFS="`echo "$DRVMSG" | grep "${DESTPART}:" | cut -f 1 -d ',' | tr -s " " | cut -f 2 -d " "`" #120310
 DESTSIZE="`echo "$DRVMSG" | grep "${DESTPART}:" | tr -s " " | cut -f 4-5 -d " "`" #120310
 DESTSIZM="`echo -n "$DESTSIZE" | cut -f 1 -d " "`"
 if [ ! "`echo "$DESTSIZE" | grep "GB"`" = "" ];then
	DESTSIZM="`LANG=C; dc -e "$DESTSIZM 1000 * p"`" #LANG=C; rodin.s for i18n
 fi
 IDESTSIZM="`echo -n "$DESTSIZM" | cut -f 1 -d '.'`" #truncate to integer.
 DESTVER="`echo "$DRVMSG" | grep "${DESTPART}:" | tr -s " " | grep "installed" | cut -f 8 -d " "`" #120310

 break
done ###########END BIG LOOP###############

/usr/lib/gtkdialog/box_yesno --ok-cancel "$L_PUPPY_INSTALLER" \
"`eval_gettext \"You have chosen to install Puppy to partition /dev/\\\${DESTPART}, which has a \\\${DESTFS} filesystem and the size is \\\${DESTSIZM}M.\"`" \
"$(gettext 'Press OK button to install Puppy (note, there will be one or two more dialog windows before you have to commit to the actual install)...')"
[ ! $? -eq 0 ] && exit

locate_puppy_src_files # sets $SRCPATH $CDDRIVE

#===================================================================
#                 INSTALL TO REMOVABLE MEDIA
#===================================================================

case $PMEDIA in usb*)
	case $DESTFS in
	vfat|ntfs|ext2|ext3|ext4)

		if [ "`echo "$DESTPART" | grep '[0-9]$'`" != "" ];then
			DESTDRV="`echo -n "$DESTPART" | sed -e 's/[0-9]*$//' -e 's/p$//'`" #110126 mmcblk0
			if parted /dev/${DESTDRV} print | grep msdos ; then
				/usr/lib/gtkdialog/box_yesno \
					--yes-label "Install bootloader" --no-label "Don't install bootloader" \
					"Install bootloader?" "Now a tough decision. If you have formatted the partition or drive, you might want to install a bootloader." \
					"But if a working bootloader is already installed, you may want to keep it." \
					"Keep in mind that this installer is meant to work with grub4dos"
				if [ $? -eq 0 ] ; then
					write_wee_mbr /dev/${DESTDRV}
				fi
				#check that partition has 'boot' flag set...
				if ! [ "`fdisk -l /dev/$DESTDRV | grep "/dev/$DESTDRV" | grep '*'`" ] ; then
					parted --script -- /dev/${DESTDRV} set 1 boot on
				fi
			else
				/usr/lib/gtkdialog/box_yesno --error --yes-label Continue --no-label Exit --yes-first \
				"$(gettext 'Installer')" "`eval_gettext \"\\\$DESTDRV does not have a supported partition table (msdos). This installer expects a msdos and is meant to work with grub4dos. I do not know much about the outcome, but if you know you are doing you may continue.\"`"
				[ $? -ne 0 ] && exit
			fi
		fi

		umount /dev/${DESTPART}
		mkdir -p /mnt/data
		mount -t $DESTFS /dev/${DESTPART} /mnt/data

		/usr/lib/gtkdialog/box_yesno \
			--yes-label "Wipe ${DESTPART}" --no-label "Don't wipe ${DESTPART}" \
			"WIPE PARTITION" "Do you want to delete everything in ${DESTPART}?"
		if [ $? -eq 0 ];then
			yaf-splash -bg orange -text "'$(gettext 'Deleting everything in /mnt/data...')'" &
			XPID=$!
			rm -rf /mnt/data/*
			sync
			kill $XPID
		fi
		#--
		if ! [ -f /mnt/data/menu.lst ] ; then
			copy_g4dos_cd /mnt/data auto ${PMEDIA}
		fi
		#--
		yaf-splash -bg orange -text "`eval_gettext \"Please wait, copying files to \\\$DESTPART ...\"`" &
		XPID=$!
		mkdir -p /mnt/data
		for i in vmlinuz initrd.gz ${DISTRO_PUPPYSFS} ${DISTRO_ZDRVSFS} ${DISTRO_FDRVSFS} ${DISTRO_ADRVSFS} ${DISTRO_YDRVSFS}; do
			[ -f "${SRCPATH}/${i}" ] && cp -f "${SRCPATH}/${i}" /mnt/data/
			sync
		done
		kill $XPID
		umount /dev/$DESTPART
		unmountcdfunc
		;;
	*)
		/usr/lib/gtkdialog/box_ok "$(gettext 'Puppy installer')" error "`eval_gettext \"Your \\\$DESTPART has a \\\$DESTFS filesystem. Currently only install to external vfat/ntfs/ext3/ext4 filesystems are supported.\"`" " " "$(gettext 'Click OK to quit...')"
		exit
		;;
	esac
	;;
esac

#===================================================================
#               INSTALL TO INTERNAL HARD DRIVE
#===================================================================

case $PMEDIA in ata*)
	#arrive here with DESTPART & DESTFS where installing to, PMEDIA boot param PMEDIA,
	#SRCPATH where to get vmlinuz, initrd, ${DISTRO_PUPPYSFS}
	#format 200 (without dots) =0 if no prior installed puppy,
	#NEWVER is new puppy version, DESTSIZM is size of dest partition in Mb (real number),
	DESTMNTPT="`mount | grep "/dev/${DESTPART} " | tr -s " " | cut -f 3 -d " "`" #120310 
	if [ "$DESTMNTPT" = "" ];then
		mkdir /mnt/$DESTPART 2> /dev/null
		mount -t $DESTFS /dev/$DESTPART /mnt/$DESTPART
		DESTMNTPT="/mnt/$DESTPART"
	fi
	#choose option1 frugal or option2 install...
	INSTOPTION="1"
	if [ "$ENABLE_FULLINSTALL" ] ; then
		if [ "$DESTFS" != "vfat" -a "$DESTFS" != "ntfs" -a "$DESTFS" != "exfat" ];then
			Xdialog --wmclass "gtkdialog2" --left --buttons-style text --title "$L_PUPPY_INSTALLER" --ok-label "$(gettext 'FRUGAL')" --cancel-label "$(gettext 'FULL')" --yesno "`eval_gettext \"You have chosen to install to /dev/\\\$DESTPART, which appears to be an internal
hard drive\"` ($PMEDIA).

$(gettext 'There are two ways to install Puppy to the partition:')

$(gettext '1. FRUGAL (standard install)')

$(gettext '2. FULL')
$(gettext 'A "regular" linux install. It is not properly supported and not recommended,
you lose all the interesting features.')

$(gettext 'Click window close box to quit...')" 0 0
			RET_VAL=$?
			[ $RET_VAL -eq 255 ] && exit
			[ $RET_VAL -eq 1 ] && INSTOPTION="2"
		fi
	fi

	#info for creating a grub entry...
	DESTPART_UUID=$(blkid /dev/${DESTPART} | grep -o ' UUID=".*' | cut -d '"' -f2)
	GRUBPART="#root (hd0,0) <-- GRUB legacy, ex: (hd1,0), etc..
find --set-root uuid () ${DESTPART_UUID}"

	#INSTOPTION, install puppy to DESTPART...
	if [ "$INSTOPTION" = "1" ];then #frugal.
		Xdialog --stdout --wmclass "gtkdialog2" --left --title "$L_PUPPY_INSTALLER" \
		--ok-label 'INSTALL' --fixed-font --no-cancel \
		--inputbox "`eval_gettext \"Puppy is going to be installed to partition \\\${DESTPART}, which is currently\"`
`eval_gettext \"mounted on path \\\${DESTMNTPT}. As this will be a frugal install, you can\"`
$(gettext 'choose to place the Puppy files in a folder. This is very convenient if you')
$(gettext 'want to have more than one installation of Puppy. Even if you only have one')
$(gettext 'installation, it may be good to have all the Puppy files in their own folder')
$(gettext 'and so not causing any potential conflicts with other files at the top') '/'
`gettext \"level (ex: a pre-existing full Linux install may have 'initrd.gz' at '/')\"`.

$(gettext 'Enter a unique name for the folder. No spaces.')
" 0 0 "${DISTRO_FILE_PREFIX}${NEWVER}frugal" >${TMPDIR}/NEWPSUBDIR #111011
		[ $? -ne 0 ] && exit
		NEWPSUBDIR="`cat ${TMPDIR}/NEWPSUBDIR | sed -e 's%^/%%' -e 's%/$%%' -e 's%[^/a-zA-Z0-9.]%%g'`" #101107 111011
		NEWPSUBCNT=`echo -n "$NEWPSUBDIR" | sed -e 's%[^/]%%g' | wc -c` #101107
		[ $NEWPSUBCNT -gt 2 ] && NEWPSUBDIR="`echo -n "$NEWPSUBDIR" | sed -e 's%/%%g'`" #101107 too many '/' chars.
		yaf-splash -bg orange -text "`eval_gettext \"Please wait, copying files to \\\$DESTPART, in folder \\\$NEWPSUBDIR...\"`" &
		XPID=$!
		mkdir -p "$DESTMNTPT"/"$NEWPSUBDIR"
		for pupfiles in vmlinuz initrd.gz ${DISTRO_PUPPYSFS} ${DISTRO_ZDRVSFS} ${DISTRO_FDRVSFS} ${DISTRO_ADRVSFS} ${DISTRO_YDRVSFS}; do
			[ -f "$SRCPATH"/"$pupfiles" ] && cp -f "$SRCPATH"/"$pupfiles" "$DESTMNTPT"/"$NEWPSUBDIR"/ || continue
			sync
		done #140630 made loop
		sync
		kill $XPID
		umount /dev/$DESTPART
		unmountcdfunc
		which grub4dosconfig >/dev/null 2>&1 && grub4dos_func #grub4dosconfig
		#=
		xNEWPSUBDIR=""
		OPTIONPSUBDIR=""
		if [ "$NEWPSUBDIR" != "" ];then
			xNEWPSUBDIR="/$NEWPSUBDIR"
			OPTIONPSUBDIR=" psubdir=${NEWPSUBDIR}"
		fi
		#091211...
		echo "`gettext \"If you have GRUB/GRUB4DOS installed, find the 'menu.lst' file (usually in /boot
in the partition in which GRUB is installed) and insert this:\"`
" > ${TMPDIR}/NEWGRUBTEXT
		echo "title Puppy Linux - $DISTRO_NAME ${NEWVER} frugal in ${DESTPART} dir ${NEWPSUBDIR}
${GRUBPART}
kernel ${xNEWPSUBDIR}/vmlinuz pmedia=${PMEDIA}${OPTIONPSUBDIR}
initrd ${xNEWPSUBDIR}/initrd.gz

-----
For GRUB you must set root (hdX,X) to the correct values and
comment/remove uuid. root (hdX,X) is also supported by grub4dos.. 
" >> ${TMPDIR}/NEWGRUBTEXT

		defaulttextviewer ${TMPDIR}/NEWGRUBTEXT &
		sleep 3

		Xdialog --wmclass "gtkdialog2" --left --title "$L_PUPPY_INSTALLER" --msgbox "$(gettext 'Now you can manually setup your GRUB, GRUB4DOS, LILO or other boot system.')

`eval_gettext \"Partition \\\$DESTPART has the files vmlinuz, initrd.gz and \\\${DISTRO_PUPPYSFS}\"`
$(gettext 'on it, where vmlinuz is the kernel, initrd.gz is the initial ramdisk and')
${DISTRO_PUPPYSFS} $(gettext 'is all the Puppy-files.')

$(gettext 'If you already have GRUB or GRUB4DOS installed, see the text editor')
$(gettext 'window for text that can be inserted into') 'menu.lst'.

$(gettext 'If you do NOT have GRUB or GRUB4DOS (or any other boot manager) installed,')
`gettext \"just click the 'OK' button to finish the installation, then go to the\"`
`gettext \"'System' menu and run the GRUB or GRUB4DOS installer (you probably will\"`
$(gettext 'not need the text in the text editor window, as the installers will probe')
$(gettext 'your PC for all installations of Puppy and other operating systems)')." 0 0
   
		#finished. could put up a final dlg here, then quit script.
		/usr/lib/gtkdialog/box_ok "$L_PUPPY_INSTALLER" info "$(gettext 'Okay, all done')"
		exit

	#--------- FULL INSTALL option2
	else
		#upgrade, ask if want delete partition...
		if [ -f "${DESTMNTPT}/etc/DISTRO_SPECS" ];then
			BTNS='<hbox homogeneous="true">
        <button image-position="Bottom" width-request="120">
			<label>'$(gettext "UPGRADE")'</label>
			<input file stock="gtk-go-up"></input>
			<action>EXIT:42</action>
		</button>
		<button image-position="Bottom" width-request="120">
			<label>'$(gettext " WIPE ")'</label>
			<input file stock="gtk-delete"></input>
			<action>EXIT:1</action>
		</button>
	  </hbox>'
			OLDNAME=`grep DISTRO_FILE_PREFIX "${DESTMNTPT}/etc/DISTRO_SPECS"|cut -d '=' -f2|sed -e "s%'%%g" -e 's%"%%g'`
			OLDVER=`grep DISTRO_VERSION "${DESTMNTPT}/etc/DISTRO_SPECS"|cut -d '=' -f2|sed -e "s%'%%g" -e 's%"%%g'`
			OLDPUP="${OLDNAME}-${OLDVER}"
			S1=$(eval_gettext 'There is already a version of Puppy <b>'"$OLDPUP"'</b> installed in '"${DESTPART}"'. ')
			S2=$(gettext 'Do you want to upgrade, or totally wipe the partition?')
			S3=$(gettext 'Select UPGRADE button to upgrade... ')
			S4=$(gettext 'Select WIPE button to wipe partition (recommended)...')
			TOPTEXT='<text use-markup="true"><label>"'"$S1 $S2"'"</label></text>'
			BTMTEXT='<text><label>'"$S3 $S4"'</label></text>'
		else
			BTNS='<hbox homogeneous="true">
	     <button ok></button><button cancel></button>
	   </hbox>'
			BTMTEXT='<text><label>'$(gettext 'Click "OK" to install.')'</label></text>'
		fi
		M1=$L_PUPPY_INSTALLER
		M2=$(eval_gettext 'FINAL SANITY CHECK : ARE YOU SURE '"${DESTPART}"' IS THE RIGHT PARTITION?')
		M3=$(eval_gettext ''"${DESTPART}"' is currently mounted on '"${DESTMNTPT}"'')
		# gui
		export maingui='<window title="'"$M1"'" window-position="1">
        <vbox>
          <frame>
           '"$TOPTEXT"'
           <text><label>""</label></text>
           <text use-markup="true"><label>"<b><big>'"$M2"'</big></b>"</label></text>
           <text><label>""</label></text>
           <text><label>'"$M3"'</label></text>
           '"$BTMTEXT"'
           <text><label>""</label></text>
          </frame>
         '"$BTNS"'
        </vbox>
      </window>'
		eval "$(gtkdialog -p maingui --styles=/tmp/gtkrc_xml_info.css)"
		case "$EXIT" in
			abort|Cancel)
				echo "bailing"
				umount $DESTMNTPT 2>/dev/null
				exit
				;;
			"OK"|"1") # wipe
				echo "wiping"
				yaf-splash -close never -bg orange -text "$(gettext 'Please wait, wiping all files in') $DESTPART..." &
				XPID=$!
				sleep 2
				rm -rf ${DESTMNTPT}/*
				sync
				kill $XPID
				;;
			42)
				UPGRADE_INSTALL=1
				;;
		esac
		# remove some critical files
		rm -f ${DESTMNTPT}/lib/modules/`uname -r`/modules.*
		RC_STUFF="$(ls ${DESTMNTPT}/etc/rc.d/rc.* | grep -v "/rc.local$" | tr '\n' ' ')"
		rm -fv ${RC_STUFF}
		rm -fv ${DESTMNTPT}/etc/rc.d/funct*
		echo "installing"
		#loop-device mount ${DISTRO_PUPPYSFS} in DESTPART, copy contents of ${DISTRO_PUPPYSFS} to DESTPART...
		for SFS in ${DISTRO_PUPPYSFS} ${DISTRO_ZDRVSFS} ${DISTRO_FDRVSFS} ${DISTRO_ADRVSFS} ${DISTRO_YDRVSFS}
		do
			[ -f ${SRCPATH}/${SFS} ] || continue
			echo "$SFS" #debug
			msg="$(printf "$(gettext 'Copying files from %s to %s...')" "$SFS" "$DESTPART")"
			yaf-splash -close never -bg orange -text "$msg" &
			XPID=$!
			FREEDEV=$(losetup -f)
			losetup ${FREEDEV} "${SRCPATH}/${SFS}" #100913
			mkdir -p ${DESTMNTPT}/srcmntpt
			mount -r -t squashfs ${FREEDEV} ${DESTMNTPT}/srcmntpt
			cp -a --remove-destination ${DESTMNTPT}/srcmntpt/* ${DESTMNTPT}/ || {
				[ "$SFS" = "$DISTRO_PUPPYSFS" ] && fatal
			}
			sync
			umount ${DESTMNTPT}/srcmntpt
			rm -rf ${DESTMNTPT}/srcmntpt
			kill $XPID
			sleep 0.5
		done
		sync

		( 
			cd ${DESTMNTPT}/
			rm -rf archive initrd tmp
			mkdir -p tmp sys
			ln -sf tmp run
		)

		mkdir -p ${DESTMNTPT}/boot
		cp -a --remove-destination ${SRCPATH}/vmlinuz $DESTMNTPT/boot/
		cp -a --remove-destination ${SRCPATH}/initrd.gz $DESTMNTPT/boot/
		[ -e "${SRCPATH}/ucode.cpio" ] && cp -a --remove-destination ${SRCPATH}/ucode.cpio $DESTMNTPT/boot/
   
		if [ $UPGRADE_INSTALL ] ; then
			touch ${DESTMNTPT}/var/local/full_install_update_flag #full update
			/usr/lib/gtkdialog/box_ok "$(gettext 'Puppy Installer')" info "$(gettext "Finished upgrading.")" "$(gettext "Hopefully everything went ok...")"
			which grub4dosconfig >/dev/null 2>&1 && grub4dos_func
			exit
		fi
		sync

		echo 'PUPMODE=2' > $DESTMNTPT/etc/rc.d/PUPSTATE
		sync
		sleep 1
		umount ${DESTMNTPT}
		unmountcdfunc
		which grub4dosconfig >/dev/null 2>&1 && grub4dos_func

		#menu entry for grub4dos...
		echo "`gettext \"If you have grub4dos installed, find the 'menu.lst' file (usually in /)
in the partition in which grub4dos is installed) and insert this:\"`
" > ${TMPDIR}/NEWGRUBTEXT
		echo "title Puppy Linux - $DISTRO_NAME ${NEWVER} full install in ${DESTPART}
${GRUBPART}
kernel /boot/vmlinuz fullinstall root=UUID=${DESTPART_UUID} pmedia=${PMEDIA}
errorcheck off
initrd /boot/initrd.gz
initrd /boot/ucode.cpio /boot/initrd.gz

" >> ${TMPDIR}/NEWGRUBTEXT

		defaulttextviewer ${TMPDIR}/NEWGRUBTEXT &
		sleep 3

		Xdialog --wmclass "gtkdialog2" --left --buttons-style text --title "$L_PUPPY_INSTALLER" --ok-label "OK" \
		--msgbox "$(gettext 'If all went well, Puppy has been installed to') $DESTPART.\n\
$(gettext 'The text-editor window shows text that you can insert into the menu.lst')
$(gettext 'file if you have or GRUB4DOS installed.')

$(gettext 'If your PC does not have GRUB4DOS')
$(gettext 'installed, or you want to do a reinstallation, just click the ')'OK'
$(gettext 'button to finish the Installer, then go to the "System" menu')
$(gettext 'and run the GRUB4DOS installer.')"  0 0
	fi
	;;
esac

unmountcdfunc

###END###
