#!/bin/sh
#(c) Copyright Barry Kauler, Oct. 2011, bkhome.org
#2011 license GPL3 (see /usr/share/doc/legal)
#called via menu or autodetected when camera plugged in (via /usr/sbin/pupautodetect).
#usbutils optionally used if installed, lsusb accesses usb.ids to obtain device description.
#pupcamera is not a separate application, it is builtin to Woof so is in all builds
# -- it detects if gphoto (and deps) not installed and informs the user.
#pupcamera rewritten by mistfire. Interface and behavior based from pmount for Puppy 4.0

if ! [ "`which gphoto2`" ];then
	/usr/lib/gtkdialog/box_ok "PupCamera" error "<b>$(gettext "The 'gphoto2' application is not installed.")</b>" "$(gettext "That means PupCamera cannot access the photos on a digital camera. Please run the Package Manager to install 'gphoto2'.")"
	exit 1
elif ! [ "`which gphotofs`" ]; then
	/usr/lib/gtkdialog/box_ok "PupCamera" error "<b>$(gettext "The 'gphotofs' application is not installed.")</b>" "$(gettext "That means PupCamera cannot access the photos on a digital camera. Please run the Package Manager to install 'gphotofs'.")"
	exit 1
fi

PIDOFMTP=`pidof mtpdevice`
[ "$PIDOFMTP" ] && exit # exits if mtpdevice process starts to tame udev rule 88-puppy-autodetect.rules

[ ! -e /media ] && mkdir /media

#==================================================

add_remote()
{
	IP_Add=`Xdialog --title "New Remote Connection" --stdout --inputbox "Enter IP address of the remote camera" 300x100`

	if [ "$IP_Add" == "" ]; then
		exit
	fi

	/usr/lib/gtkdialog/box_splash -close never -text "Checking remote camera $IP_Add..." &
	xPID=$!

	ping -q -c5 $IP_Add
	retvalp=$?

	kill $xPID

	if [ $retvalp -ne 0 ]; then
		/usr/lib/gtkdialog/box_ok "PupCamera" error "Remote camera $IP_Add is not reachable"
		exit
	fi

	port_no=`Xdialog --title "New Remote Connection" --stdout --inputbox "Enter port number of the remote camera (optional)" 350x100`

	if [ "$port_no" == "" ]; then
		port1=""
		ippath="$IP_Add"
	else
		port1=":$port_no"
		ippath="$IP_Add-$port_no"
	fi

	if [ ! -d /media/remote-cam-$ippath ]; then
		mkdir /media/remote-cam-$ippath
	fi

	gphotofs --port="ptpip:$IP_Add$port1" /media/remote-cam-$ippath

	retval=$?

	if [ $retval -eq 0 ]; then
		/usr/lib/gtkdialog/box_ok "PupCamera" info "Remote camera connected"
	else
		rmdir /media/remote-cam-$IP_Add
		/usr/lib/gtkdialog/box_ok "PupCamera" error "Cannot connect to remote camera"
	fi
}
export -f add_remote

#==================================================

#using ${$} which is pid of script...
MYPID=${$}

. /etc/rc.d/PUPSTATE #v3.96

ALLPS="`ps`"
OLDPIDS="`echo "$ALLPS" | grep 'gtkdialog' | grep 'PCAMGUI' | tr -s ' ' | sed -e 's%^ %%' | cut -f 1 -d ' ' | tr '\n' ' '`"
kill $OLDPIDS 2>/dev/null

/usr/lib/gtkdialog/box_splash -close never -text "Probing cameras..." &
xPID=$!
sleep 3s
kill $xPID

gphoto2 --auto-detect | tr -s ' ' | tail -n +3 > /tmp/pcamera_ports
content=`cat /tmp/pcamera_ports`

cp /tmp/pcamera_ports /tmp/pcamera_port_name

sed -i -e "s/ /|/g" /tmp/pcamera_ports

CAMCNT=1

for d1 in `cat /tmp/pcamera_ports | sort`
do
	portcam=`echo "$d1" | rev | cut -f 2 -d "|" | rev`
	DEVNAME=`cat /tmp/pcamera_port_name | grep "$portcam"`
	ONEMNTPT=`mount | grep /media/camera${CAMCNT}`

	if [ "$ONEMNTPT" = "" ];then #not mounted.
		PARTSGUI="${PARTSGUI}
<hbox>
  <text space-expand=\"true\" space-fill=\"true\">
    <label>${DEVNAME} (Cam ${CAMCNT})</label>
  </text>
  <button space-expand=\"true\" space-fill=\"true\">
    <label>MOUNT</label>
    <input file stock=\"gtk-connect\"></input>
    <action>mkdir /media/camera${CAMCNT}</action>
    <action>gphotofs --port='$portcam' /media/camera${CAMCNT}</action>
    <action>EXIT:refresh</action>
  </button>
  <button space-expand=\"true\" space-fill=\"true\">
    <input file stock=\"gtk-open\"></input>
    <height>22</height>
    <label>OPEN</label>
    <action>rox -d /media/camera${CAMCNT} &</action>
    <sensitive>false</sensitive>
  </button>
</hbox>"
	else
		PARTSGUI="${PARTSGUI}
<hbox>
  <text space-expand=\"true\" space-fill=\"true\">
    <label>${DEVNAME} (Cam ${CAMCNT})</label>
  </text>
  <button space-expand=\"true\" space-fill=\"true\">
    <label>UNMNT</label>
    <input file stock=\"gtk-disconnect\"></input>
    <action>umount /media/camera${CAMCNT}</action>
    <action>rmdir /media/camera${CAMCNT}</action>
    <action>EXIT:refresh</action>
  </button>
  <button space-expand=\"true\" space-fill=\"true\">
    <input file stock=\"gtk-open\"></input>
    <label>OPEN</label>
    <action>rox -d /media/camera${CAMCNT} &</action>
    <sensitive>true</sensitive>
  </button>
</hbox>"
	fi

	CAMCNT=`echo $(expr $CAMCNT + 1)`
done


RMT=1

for g1 in `mount | grep /media/remote-cam- | cut -f 3 -d " "`
do
	ipaddress=`echo "$g1" | cut -f 3 -d "-"`
	rport=`echo "$g1" | cut -f 4 -d "-"`
	ippath=`basename $g1`

	if [ "$rport" != "" ]; then
		label1="$ipaddress port $rport (Remote $RMT)"
	else
		label1="$ipaddress (Remote $RMT)"
	fi

	if [ "$g1" != "" ]; then
		PARTSGUI="${PARTSGUI}
<hbox>
  <text space-expand=\"true\" space-fill=\"true\">
    <label>$label1</label>
  </text>
  <button space-expand=\"true\" space-fill=\"true\">
    <label>UNMNT</label>
    <action>umount /media/$ippath</action>
    <action>rmdir /media/$ippath</action>
    <action>EXIT:refresh</action>
  </button>
  <button></input><label>REFRESH</label>
  <button space-expand=\"true\" space-fill=\"true\">
    <input file stock=\"gtk-open\">
    <label>OPEN</label>
    <action>rox -d /media/$ippath &</action>
    <sensitive>true</sensitive>
  </button>
</hbox>"
	fi
	RMT=`echo $(expr $RMT + 1)`
done

CICON=photocamera_yes.svg
PROBEINFO="$(gettext 'You may have to close your file manager to close the camera correctly')"
if [ "$PARTSGUI" = "" ]; then
	PROBEINFO="<b>$(gettext "No device is detected.")</b>
$(gettext "It means that the 1) Gphoto software does not recognise your device, or 2) the device is not connected or 3) the device needs to be turned on.")"
	CICON=photocamera_no.svg
	PARTSGUI="<text><label>NO CAMERAS DETECTED</label></text>"
fi

#==================================================
WIDTH=710
HEIGHT=300
SRCNXY=$(LANG=C xwininfo -root | grep -o '\-geometry .*' | sed 's/+.*// ;  s/-geometry //')
SCRN_X=`echo "$SRCNXY" | cut -f 1 -d 'x'`
#SCRN_Y=`echo "$SRCNXY" | cut -f 2 -d 'x'`
[ "$SCRN_X" -a $SCRN_X -le 720 ] && WIDTH=600
[ "$SCRN_X" -a $SCRN_X -le 640 ] && WIDTH=500
#==================================================

export PCAMGUI='
<window title="PupCamera - '$(gettext 'Access digital camera')'" icon-name="gtk-orientation-landscape" resizable="false">
 <vbox height-request="'${HEIGHT}'" width-request="'${WIDTH}'">
  <vbox>
   '`/usr/lib/gtkdialog/xml_info fixed $CICON 40 "$PROBEINFO"`'
  </vbox>
    <frame Detected cameras - DO NOT REMOVE MOUNTED MEDIA>
    <vbox scrollable="true" space-expand="true">
    '${PARTSGUI}'
  </vbox>
  </frame>
  <hbox>
   <button><input file stock="gtk-add"></input><label>REMOTE</label>
    <action>add_remote</action>
    <action type="exit">refresh</action>
   </button>
   <button><input file stock="gtk-refresh"></input><label>REFRESH</label>
    <action type="exit">refresh</action>
   </button>
   <button><input file stock="gtk-quit"></input><label>QUIT</label></button>
  </hbox>
 </vbox>
</window>'

#echo "$PCAMGUI" > /tmp/zz.xml
RETPARAMS="`gtkdialog --program=PCAMGUI --center --styles=/tmp/gtkrc_xml_info.css`"
result=`echo $RETPARAMS | grep "refresh"`

rm -f /tmp/pcamera_ports
rm -f /tmp/pcamera_port_name 

if [ "$result" != "" ]; then
	$0
fi

###END###
