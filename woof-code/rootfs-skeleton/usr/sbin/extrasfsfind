#!/bin/sh
# extrasfsfind 1 Mar 2012 by shinobar
# listing up loadable sfs files and load the ones user selected.
#v1.9.4 - 5May 2012: fix was dailog even when not found any packages (thanks to 01micko)
# 13may2012: unmount when canceled
#v1.9.6 - 28may2012: mount option

VERSION=1.9.6
MYNAME=$(basename "$0")
DEFAULTCHECK="true"	# true or false
DEBUGFLAG="y"
echo $MYNAME| grep -q 'debug' && DEBUGFLAG="y"
case "$1" in
*-d*) DEBUGFLAG="y";;
*-v*|*-h*) echo "$MYNAME $VERSION"; exit 0;;
esac

# I18n
export TEXTDOMAIN=sfs_load
export OUTPUT_CHARSET=UTF-8
eval_gettext() {
  local myMESSAGE=$(gettext "$1")
  eval echo \"$myMESSAGE\"
}

debug() {
  [ "$DEBUGFLAG" = "" ] && return
  echo "$MYNAME: $*" >&2
}
debug "$0 $@"
UNMOUNTME=""
unmountme() {
  [ "$UNMOUNTME" ] && umount "$UNMOUNTME" && UNMOUNTME=""
}
mountedpart() {
  [ "$1" != "" ] || return
  MOUNTLINE=$(LANG=C mount |grep "^/dev/$1 ") || return
  MNTPNT=$(echo "$MOUNTLINE" | tr -s ' '|cut -d' ' -f 3)
  echo "$MNTPNT"
}

mountpart(){
  # except cd(iso9660)
  #v1.9.5: mount option
  [ $1 ] || return
  local PART=$1
  case "$1" in
  /dev/*|/mnt/*) PART=$(echo $1 | cut -d'/' -f3);;
  /*) PART=$(echo $1 | cut -d'/' -f2);;
  esac
  mountedpart $PART >/dev/null && return
  local TYPE=$(probepart | grep -w "^/dev/$PART"| cut -s -d'|' -f2)
  local MPART="$PART"
  local OPT=""
  local NLS_PARAM=""
  case "$TYPE" in
  vfat) NLS_PARAM=""
    if [ -f /etc/codepage ]; then #100127...
	  grep -q -i '850' /etc/codepage && [ "$(echo $LANG|cut -d'.' -f1)" != "en_US" ] && NLS_PARAM=",codepage=850"
	  grep -q -i '852' /etc/codepage && NLS_PARAM=",codepage=852,iocharset=iso8859-2"
    fi
    echo $LANG | grep -q -i '\.utf' && NLS_PARAM="$NLS_PARAM,utf8"
    OPT="-t vfat -o shortname=mixed,quiet${NLS_PARAM}"
    ;;
   *)
    OPT="-t $TYPE"
    ;;
  esac
  if LANG=C mount | grep -w "/mnt/$MPART" >&2; then
    umount /mnt/$MPART || return
  fi
  mkdir -p /mnt/$MPART || return
  TIMEUP=3
  #UNMOUNTME=""
  debug "mount $OPT /dev/$PART /mnt/$MPART"
  mount $OPT /dev/$PART /mnt/$MPART || return
  UNMOUNTME=/dev/$PART
  MNTPNT=/mnt/$MPART
}
skiploaded() {
	FOUND=$(echo "$FOUND"| grep '.')	#v1.9.4 renove blank line
	[ "$FOUND" ] || return
	for F in $SFSBASE $ZDRBASE $FDRBASE $ADRBASE $YDRBASE $LASTUNIONRECORD; do
	  FOUND=$(echo "$FOUND"| grep -v $F)
	done
   FOUND=$(echo "$FOUND"| grep '.')	#v1.9.4 renove blank line
	[ "$FOUND" ]
}
skipinstalled() {
  FOUND=$(echo "$FOUND"| grep '.')	# renove blank line
  [ "$FOUND" ] || return
  [ "$HOME" ] || HOME=/root
  NEWLIST=""
  for F in $FOUND; do
    ONEBASE=$(basename $F | rev | cut -f2- -d'.' | rev)
    grep -qw "$ONEBASE" /root/.packages/woof-installed-packages && continue
    grep -qw "$ONEBASE" $HOME/.packages/user-installed-packages && continue
    NEWLIST="$NEWLIST
$F"
  done
  FOUND=$(echo "$NEWLIST"| grep '.')	# renove blank line
}
list_on_cd() {
  FOUND=""
  CDDEVS=$($PROBEDISK|grep -Ew 'optical|cdrom'| cut -d'|' -f1| cut -s -d'/' -f3)
  [ "$CDDEVS" ] || return
  #UNMOUNTME=""
  for D in $CDDEVS; do
    debug "CD drive:$D"
    MNTPNT=$(df | grep -w "^/dev/$D" | cut -d'%' -f2 | tr -d ' ')
    if [ "$MNTPNT" = "" ]; then
      cddetect_quick -d/dev/$D || continue # abort if the madia not inserted
      MNTPNT="/mnt/$D"
      if df | grep -qw "$MNTPNT"; then # seems different device is already mounted
        umount "$MNTPNT" || continue
      fi
      mkdir -p "$MNTPNT"
      mount -t iso9660 -o iocharset=utf8 "/dev/$D" "$MNTPNT" && UNMOUNTME="$MNTPNT" || continue
    fi
    FOUND=$(find -L "$MNTPNT" -mindepth 1 -maxdepth 3 -name *.sfs -type f)
    skiploaded
    FOUND="$FOUND
$(find -L "$MNTPNT" -mindepth 1 -maxdepth 3 -name *.pet -type f)"
    #FOUND=$(echo "$FOUND"| grep '.') 	# remove blank line
    skipinstalled
    [ "$FOUND" ] && return
    unmountme
  done
  return 1
}
list_on_subdir() {
  FOUND=""
  [ "$PSUBDIR" ] || return
  FOUND=$(find -L "$PUPHOME/$PSUBDIR" -mindepth 1 -maxdepth 3 -name *.sfs -type f)
  skiploaded
  FOUND="$FOUND
$(find -L "$PUPHOME/$PSUBDIR" -mindepth 1 -maxdepth 3 -name *.pet -type f)"
  #FOUND=$(echo "$FOUND"| grep '.') 	# remove blank line
  skipinstalled
  [ "$FOUND" ] && return
  unmountme
  return 1
}

EXTRASTATUS=/tmp/extrastate
PUPSTATE=/etc/rc.d/PUPSTATE
BOOTCONFIG=/etc/rc.d/BOOTCONFIG
PUPSAVECONF=/etc/rc.d/pupsave.conf
PUPSAVECONFIG=$(which pupsaveconfig)
SFSLOAD=$(which sfs_load)
PROBEDISK=probedisk
which probedisk2 &>/dev/null && PROBEDISK=probedisk2
GTKDIALOG=gtkdialog3
which gtkdialog4 &>/dev/null && GTKDIALOG=gtkdialog4
for F in $PUPSTATE $BOOTCONFIG; do
  [ -s $F ] && source $F
done
SFSPART=$(echo $PUPSFS|cut -d',' -f1)
SFSTYPE=$(echo $PUPSFS|cut -s -d',' -f2)
SFSFILE=$(echo $PUPSFS|cut -s -d',' -f3)
SFSBASE=$(basename "$SFSFILE")
ZDRPART=$(echo $ZDRV|cut -d',' -f1)
ZDRFILE=$(echo $ZDRV|cut -d',' -f3)
ZDRBASE=$(basename "$ZDRFILE")
#fdrv support
FDRPART=$(echo $FDRV|cut -d',' -f1)
FDRFILE=$(echo $FDRV|cut -d',' -f3)
FDRBASE=$(basename "$FDRFILE")
#adrv support
ADRPART=$(echo $ADRV|cut -d',' -f1)
ADRFILE=$(echo $ADRV|cut -d',' -f3)
ADRBASE=$(basename "$ADRFILE")
#ydrv support
YDRPART=$(echo $YDRV|cut -d',' -f1)
YDRFILE=$(echo $YDRV|cut -d',' -f3)
YDRBASE=$(basename "$YDRFILE")

# does not support without the sfs_load
if [ -z "$SFSLOAD" ]; then
  echo "$MYNAME does nothing without 'sfs_load'." >&2
  exit
fi

# home path
PUPHOME=""
PSUBDIR=""
SAVEFILE=""
SAVEPART=""
DESTDIR=""
if [ "$PUPSAVE" != "" ]; then
  SAVEPART=$(echo $PUPSAVE| cut -d',' -f1)
  SAVEFILE=$(echo $PUPSAVE| cut -sd',' -f3| grep '\.') # PUPMODE=6 or 77 have not '.'
  [ "$PUP_HOME" != "" ] && PUPHOME=/initrd$PUP_HOME
  [ "$PUPHOME" = "/initrd$PUP_HOME" ] && DESTDIR=$PUPHOME && PUPHOME=/mnt/home
else
  # PUPMODE=2 or 5
  if [ "$PUPMODE" = "2" ]; then
    DESTDIR="$HOME"; PUPHOME="/"
  else
    # PUPMODE=5
    [  -s "$PUPSAVECONF" ] && source "$PUPSAVECONF" && PUPSAVE="$SAVEPART,,$SAVEFILE"
    if [ "$SAVEFILE" ]; then
      # saving the session to a file
      mountpart "$SAVEPART" && PUPHOME=$MNTPNT && DESTDIR=$PUPHOME
    #elif [ "$SAVEPART" ]; then
      # saving the session back to live CD
      #DESTDIR="/initrd/pup_rw"
    elif [ "$SAVEPART" = "" ]; then
      debug "SFSFILE=$SFSFILE"
      # nowhere to save the session
      [ "$SFSFILE" != "" ] && PSUBDIR=$(dirname "$SFSFILE"| cut -b2-)
      if [ "$SFSPART" != "" -a "$SFSTYPE" != "iso9660" ]; then	# v1.3.9
        # internal or external HDD or FLASH
        DESTPART=$SFSPART
        mountpart "$DESTPART" && PUPHOME=$MNTPNT && DESTDIR=$PUPHOME	# v1.3.9
      fi
    fi
  fi
fi
[ "$SAVEFILE" != "" ] && DESTPART=$SAVEPART && PSUBDIR=$(dirname "$SAVEFILE"| cut -b2-)  # remove '/' at head
#[ "$DESTDIR" -a "$PSUBDIR" -a ! -d "$DESTDIR/$PSUBDIR" ] && PSUBDIR=""  # may not yet be created

# search
FOUND=""
if [ "$DESTDIR" ]; then
  debug "list_on_subdir:"
  list_on_subdir
fi
#FOUND=$(echo "$FOUND"| grep '.')	# renove blank line
if [ -z "$FOUND" ]; then
  unmountme
  debug "list_on_cd:"
  list_on_cd
fi
#FOUND=$(echo "$FOUND"| grep '.')	# renove blank line
if [ -z "$FOUND" ]; then
  echo "none" > $EXTRASTATUS
  unmountme
  exit 0
fi
debug "FOUND:$FOUND:"

# make dialog
TITLE="Extra SFS/PET"
SFSLIST=$(echo "$FOUND"| rev | cut -f1 -d'/' | rev)
N=0
CHECKLIST=""
for P in $FOUND; do
  N=$(($N + 1))
  B=$(basename $P)
  S=$(du -h -L "$P"| cut -f1)
  CHECKLIST="$CHECKLIST
  <checkbox><label>$B (${S}B)</label><variable>${N}_$B</variable><default>$DEFAULTCHECK</default></checkbox>"
done
export MAIN_DIALOG='<window title="'$TITLE'" icon-name="gtk-dialog-question">
<vbox>
<text><input>echo -en "'"$(gettext "Do you want to load/install these packages?")"'"</input></text>
'$CHECKLIST'
<hbox><button ok></button><button cancel></button></hbox>
</vbox>
</window>'
REP=$($GTKDIALOG -c -p MAIN_DIALOG || echo "$MAIN_DIALOG" >&2)
debug "$REP"
if echo "$REP"| grep -q 'EXIT=.*OK' ; then
 LOADLIST=$(echo "$REP"| grep '=.*true'| cut -f1 -d'='  | sort -nu| cut -f2- -d'_')
#echo "$LOADLIST"

# load sfs / install pet
 for F in $LOADLIST; do
  P=$(echo "$FOUND"| grep -w "$F$")
  EXT=$(echo $F | rev | cut -f1 -d'.'| rev)
  case "$EXT" in
  sfs) sfs_load +"$P";;
  pet) petget +"$P";;
  esac
 done
 echo "done" > $EXTRASTATUS
else
 echo "canceled" > $EXTRASTATUS
fi
unmountme
exit 0
