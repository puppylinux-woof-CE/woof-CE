#!/bin/bash
#depends: stat, bc, du (coreutils), which

function help() {
	script=${0##*/}
	echo
	echo $script
	echo
	echo "Get accurate size from file or directory:"
	echo
	echo "  $script [-v] [-b|-k|-m|-g|-t] <file|dir>"
	echo
	echo "   By default, the script outputs FILESIZE B|KB|MB|GB|TB"
	echo "     Where the unit is calculated automatically (if not specified)"
	echo "   When a unit is specified, you can use -v to show the suffix"
	echo
	echo "   $script -m -v file.mp4"
	echo
	echo "Format filesize in bytes:"
	echo
	echo "  $script <-format> [-v] [-b|-k|-m|-g|-t] <bytes>"
	echo
	echo "   By default the unit is calculated automatically"
	echo "   When a unit is specified, you can use -v to show the suffix"
	echo
	echo "  <-format> can also be:"
	echo "   -format512 process filesize in sectors (512 bytes)"
	echo "   -format2048 process filesize in sectors (2048 bytes)"
	echo "   -format4096 process filesize in sectors (4096 bytes)"
	echo
	echo "   $script -format -m -v 8747587687"
	echo
	echo "Where 'k' means kilobytes, 'm' megabytes, 'g' gigabytes, 't' terabytes"
	echo
	echo " There is a special switch: -s"
	echo " It's useful to retrieve the size of file in \$PATH:"
	echo "   $script -s mplayer"
	exit
}

filex=
dirsize=
export type="all"

for i in $@ ; do
	case $i in
		-s) search=1 ; shift ;;
		-b) type="b" ; shift ;;
		-k) type="k" ; shift ;;
		-m) type="m" ; shift ;;
		-g) type="g" ; shift ;;
		-t) type="t" ; shift ;;
		-format)  FORMATONLY=1 ; shift ;;
		-format512)  FORMATONLY=1 ; funit=512 ; shift ;;
		-format2048) FORMATONLY=1 ; funit=2048 ; shift ;;
		-format4096) FORMATONLY=1 ; funit=4096 ; shift ;;
		-v) VERBOSE=1    ; shift ;;
		-h|-help|--help) help ; exit ;;
		-[a-z]) shift ;;
	esac
done

#############################################################
#					FUNCTIONS
#############################################################

function formatbytes() { #args: bytes
	local bytes=$1 suf res
	if [[ $bytes -ge 1099511627776 ]] ; then #terabytes
		res=$(bc <<< "scale = 2; $bytes/1099511627776")
		suf=TB
	elif [[ $bytes -ge 1073741824 ]] ; then #gigabytes
		res=$(bc <<< "scale = 2; $bytes/1073741824")
		suf=GB
	elif [[ $bytes -ge 1048576 ]] ; then #megabytes
		res=$(bc <<< "scale = 2; $bytes/1048576")
		suf=MB
	elif [[ $bytes -ge 1024 ]] ; then #kilobyes
		res=$(bc <<< "scale = 0; $bytes/1024")
		suf=KB
	elif [[ $bytes -lt 1024 ]] ; then #bytes
    	res=$(bc <<< "scale = 0; $bytes ")
		suf=B
	else
		suf=N/A
	fi
	[[ $res == \.* ]] && res="0${res}"
	res=${res%.00}
	res=${res%,00}
	echo "$res $suf"
} 

function bytes() {  #input: filename / output: bytes (number)
	local byt=$(stat -c%s "$@")
	echo "$byt"
}
function filesizex() { #args: filename
	local sizze=$(stat -c%s "$@")
	echo "$(formatbytes $sizze)"
}

function results() {
	local bytes=$1 s ss res
	if [ "$funit" ] ; then
		bytes=$((bytes*funit))
	fi
	case $type in
		b) res=$bytes ; s=B ;;
		k) res=$(bc <<< "scale = 0; $bytes/1024 ") ; s=KB ;;
		m) res=$(bc <<< "scale = 2; $bytes/1048576") ; s=MB ;;
		g) res=$(bc <<< "scale = 2; $bytes/1073741824") ; s=GB ;;
		t) res=$(bc <<< "scale = 2; $bytes/1099511627776") ; s=TB ;;
		*) res=$(formatbytes $bytes) ;;
	esac
	[[ $res == \.* ]] && res="0${res}"
	res=${res%.00}
	res=${res%,00}
	[ "$VERBOSE" ] && ss=$s
	echo $res $ss
}

#############################################################

if [ "$FORMATONLY" ] ; then
	[ ! "$1" ] && echo "* Need bytes" >&2 && exit 1
	case "$1" in
		''|*[!0-9]*) echo "$1: invalid number" >&2 ; exit 1 ;; 
	esac
	results $1
	exit
fi

#############################################################

filex="$@"
fileonly=${filex##*/}
[ ! "$filex" ] && echo "* No file specified" >&2 && exit 1
if [ -d "$filex" ] ; then
	dirsize=$(du -b -c "$filex" | tail -1 | sed -e 's/\t.*//' -e 's/ .*//')
	results ${dirsize}
	exit
fi

#############################################################

if [ "$search" ] ; then
	if [ ! -f "$filex" ]; then
		filex=$(which $fileonly 2>/dev/null)
		if [ ! -f "$filex" ] ; then
			echo "error: can't find '$filex' in \$PATH" >&2
			exit 1
		fi
	fi
fi

#############################################################

[ ! -e "$filex" ] && echo "ERROR: '${filex}' does not exist" >&2 && exit 1
results $(bytes "$filex")

### END ###
