#!/bin/sh

. /etc/rc.d/BOOTCONFIG
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS

[ "$PUNIONFS" != "overlay" ] && exit 1

export TEXTDOMAIN=sfs_load
export OUTPUT_CHARSET=UTF-8

queue() {
	. /etc/rc.d/BOOTCONFIG
	cat << EOF > /etc/rc.d/BOOTCONFIG.tmp
EXTRASFSLIST='`echo "$EXTRASFSLIST $1" | tr ' ' '\n' | sort | uniq | tr '\n' ' ' | sed -e 's/^ //' -e 's/ $//'`'
PREVUNIONRECORD='$PREVUNIONRECORD'
LASTUNIONRECORD='$LASTUNIONRECORD'
EOF
	mv -f /etc/rc.d/BOOTCONFIG.tmp /etc/rc.d/BOOTCONFIG
}

unqueue() {
	. /etc/rc.d/BOOTCONFIG
	cat << EOF > /etc/rc.d/BOOTCONFIG.tmp
EXTRASFSLIST='`echo "$EXTRASFSLIST $1" | tr ' ' '\n' | sort | uniq | grep -Fv $1 | tr '\n' ' ' | sed -e 's/^ //' -e 's/ $//'`'
PREVUNIONRECORD='$PREVUNIONRECORD'
LASTUNIONRECORD='$LASTUNIONRECORD'
EOF
	mv -f /etc/rc.d/BOOTCONFIG.tmp /etc/rc.d/BOOTCONFIG
}

queued(){
	EXTRASFSLIST=`grep EXTRASFSLIST /etc/rc.d/BOOTCONFIG | sed -e 's/=/\n\n/' -e "s/'//g" -e 's/ /\n/g' -e 's/EXTRASFSLIST/                                        EXTRA SFS FILES                                        /g'`
	[ ! "`echo "$EXTRASFSLIST" | grep '\.sfs'`" ] && EXTRASFSLIST=`echo "               $(gettext 'No extra SFS files are selected to load at boot time !')               "`
	Xdialog --title "$(gettext 'Extra SFS Files')" --msgbox "\n${EXTRASFSLIST}\n" 0 0
}

QUIET=0
CLI=0
START=0
STOP=0
while [ -n "$1" ]
do
	case "$1" in
		-q|--quiet) QUIET=1 ;;
		-c|--cli) CLI=1 ;;
		-qc|-cq)
			CLI=1
			QUIET=1
			;;
		start) START=1 ;;
		stop) STOP=1 ;;
		-*.sfs) break ;;
		-*)
			echo "Usage: $0 [-q|--quiet] [-c|--cli] [start|stop] [+sfs|-sfs|sfs]..." 1>&2
			exit 1
			;;
		*) break ;;
	esac

	shift
done

# wait until other instances are done, otherwise we can't list files added by each SFS
exec 9<>/run/sfs_load.lock
flock 9

# loading of SFSs in EXTRASFSLIST is handled by initrd, see initrd-progs/0initrd/init
if [ $START -eq 1 -o $STOP -eq 1 ]; then
	[ $PUPMODE -eq 5 ] && exit 0

	DIRTY=0
	CHANGED=0
	# the directory may exist if a user moves away from PUMODE 12, so we still need to do this under 13
	for LIST in `ls /var/lib/sfs_load.overlay/* 2>/dev/null`; do
		MNT="/initrd/${LIST#/var/lib/sfs_load.overlay/}"

		OK=1
		# delete all symlinks to files under the SFS mount point
		while read RELPATH; do
			ABSPATH="/${RELPATH}"
			if [ -L "$ABSPATH" ]; then
				DST=`readlink "$ABSPATH"`
				case "$DST" in
				${MNT}/*)
					rm "$ABSPATH" && CHANGED=1 || OK=0
					;;
				esac
			elif [ -d "$ABSPATH" ]; then
				rmdir "$ABSPATH" 2>/dev/null
			fi
		done < "$LIST"

		if [ $OK -eq 1 -a -d "$MNT" ]; then
			umount -l "$MNT" 2>/dev/null
			rmdir "$MNT" 2>/dev/null
		fi

		# delete the list only if all symlinks are deleted, to allow retry
		[ $OK -eq 1 ] && DIRTY=1
	done

	# update cache and delete the list if all symlinks are deleted
	if [ $DIRTY -eq 1 ]; then
		/etc/rc.d/rc.update w
		rm -f /var/lib/sfs_load.overlay/*
		sync
	# otherwise, if we made any change, update cache but keep the lists to allow retry
	elif [ $CHANGED -eq 1 ]; then
		/etc/rc.d/rc.update w
	fi

	exit 0
fi

if [ -z "$PUP_HOME" ]; then
	SFS_DIRS="/initrd/mnt/pdrv"
else
	SFS_DIRS="/initrd${PUP_HOME}"
	[ -n "$PSUBDIR" ] && SFS_DIRS="/initrd${PUP_HOME}${PSUBDIR} $SFS_DIRS"
fi

if [ $# -ne 0 ]; then
	for SFS in "$@"; do
		ACTION=toggle
		case "$SFS" in
		+*)
			SFS=${SFS:1}
			ACTION=load
			;;
		-*)
			SFS=${SFS:1}
			ACTION=unload
			;;
		esac

		case "$SFS" in
		*/*.sfs) ;;
		*.sfs)
			for SFS_DIR in $SFS_DIRS; do
				[ -s "${SFS_DIR}/${SFS}" ] || continue
				SFS="${SFS_DIR}/${SFS}"
				break
			done
			;;
		esac

		ASKMOUNT=1
		# assumption: if we have a loop device associated with this SFS, it's mounted or loaded
		LOOPDEV="`losetup -n -j "$SFS" | head -n 1 | cut -f 1 -d :`"

		if [ $ACTION != unload ] && [ -z "$LOOPDEV" ]; then
			if [ $QUIET -eq 1 ]; then
				:
			else
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to <b>load</b>") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
			fi
			if [ $? -eq 0 ]; then
				FOUND=0
				for i in `seq 3 99`
				do
					MNT="/initrd/pup_ro$i"
					[ -e "$MNT" ] && continue
					FOUND=1
					break
				done
				[ $FOUND -eq 0 ] && exit 1

				mkdir -p "$MNT" || continue
				mount -r -t squashfs -o loop,noatime "$SFS" "$MNT"
				if [ $? -ne 0 ]; then
					rmdir "$MNT"
					continue
				fi
				ASKMOUNT=0

				if [ $CLI -eq 0 ]; then
					yaf-splash -bg orange -placement top -close never -text "$(gettext Loading) ${SFS##*/}" &
					PID=$!
				fi

				# create a list of new files and flush it to disk before we create the symlinks
				mkdir -p /var/lib/sfs_load.overlay
				LIST="/var/lib/sfs_load.overlay/${MNT#/initrd/}"
				while read RELPATH; do
					ABSPATH="/${RELPATH}"
					[ -e "$ABSPATH" -o -L "$ABSPATH" ] || echo "$RELPATH" >> "$LIST"
				done < <(find "$MNT" -mindepth 1 | cut -f 4- -d / | sort -r)
				[ $PUPMODE -eq 12 ] && sync "$LIST"

				cp -asn "$MNT"/* /
				/etc/rc.d/rc.update w
				pidof -s jwm > /dev/null && jwm -reload
				[ $CLI -eq 0 ] && kill $PID
			fi
		elif [ $ACTION != load -a -n "$LOOPDEV" ]; then
			MNT="`grep "^$LOOPDEV " /proc/mounts 2>/dev/null | head -n 1 | cut -f 2 -d ' '`"
			case "$MNT" in
			/initrd/pup_ro1|/initrd/pup_ro2) ;;
			/initrd/pup_ro[1-9]*)
				if [ $QUIET -eq 1 ]; then
					:
				else
					yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to <b>unload</b>") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
				fi
				if [ $? -eq 0 ]; then
					if [ $CLI -eq 0 ]; then
						yaf-splash -bg orange -placement top -close never -text "$(gettext Unloading) ${SFS##*/}" &
						PID=$!
					fi
					LIST="/var/lib/sfs_load.overlay/${MNT#/initrd/}"
					while read RELPATH; do
						ABSPATH="/${RELPATH}"
						if [ -L "$ABSPATH" ]; then
							DST=`readlink "$ABSPATH"`
							case "$DST" in
							${MNT}/*) rm -f "$ABSPATH" ;;
							esac
						elif [ -d "$ABSPATH" ]; then
							rmdir "$ABSPATH" 2>/dev/null
						fi
					done < "$LIST"
					umount -l "$MNT"
					rmdir "$MNT"
					rm -f "$LIST"
					/etc/rc.d/rc.update w
					pidof -s jwm > /dev/null && jwm -reload
					[ $PUPMODE -eq 12 ] && sync
					[ $CLI -eq 0 ] && kill $PID
				fi
				;;
			esac

			ASKMOUNT=0
		fi

		[ $QUIET -eq 1 ] && continue

		BASE="${SFS##*/}"

		SKIP=0
		case "$BASE" in
		$DISTRO_BDRVSFS|$DISTRO_PUPPYSFS|$DISTRO_ZDRVSFS|$DISTRO_FDRVSFS|$DISTRO_ADRVSFS|$DISTRO_YDRVSFS|kbuild-*.sfs|devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs) SKIP=1 ;;
		esac

		if [ $SKIP -eq 0 -a $PUPMODE -ne 5 ]; then
			QUEUED=0
			for QBASE in $EXTRASFSLIST; do
				[ "$BASE" != "$QBASE" ] && continue
				QUEUED=1
				break
			done

			if [ $QUEUED -eq 0 ]; then
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to <b>queue</b>") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
				if [ $? -eq 0 ]; then
					DST="/initrd${PUP_HOME}${PSUBDIR}/${BASE}"
					if [ ! -e "$DST" -a ! -e "/initrd${PUP_HOME}/${BASE}" ]; then
						cp -f "$SFS" "$DST" || continue
					fi
					SFS="$DST"
					queue "$BASE"
				fi
			else
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to <b>unqueue</b>") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
				[ $? -eq 0 ] && unqueue "$BASE"
			fi
		fi

		[ $ASKMOUNT -eq 0 ] && continue
		yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to <b>mount and view</b>") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
		[ $? -ne 0 ] && continue
		MNT="/mnt/`echo "$BASE" | tr '/ ' '+_'`"
		mkdir -p "$MNT"
		mountpoint -q "$MNT"
		if [ $? -ne 0 ]; then
			mount -r -t squashfs -o loop,noatime "$SFS" "$MNT" || continue
		fi

		defaultfilemanager "$MNT" &
	done

	exit 0
fi

[ $QUIET -eq 1 -o $CLI -eq 1 ] && exit 0

export -f queue unqueue queued

BUTTONS=""
KBUILDSFS="kbuild-`uname -r`.sfs"
for SFS in `find $SFS_DIRS -maxdepth 1 -name '*.sfs' -printf '%f\n' | sort | uniq`; do
	case "$SFS" in
	$DISTRO_BDRVSFS|$DISTRO_PUPPYSFS|$DISTRO_ZDRVSFS|$DISTRO_FDRVSFS|$DISTRO_ADRVSFS|$DISTRO_YDRVSFS|$KBUILDSFS|devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs)
		BUTTONS="<togglebutton><label>$SFS</label><default>true</default><sensitive>false</sensitive></togglebutton>$BUTTONS"
		continue
		;;
	esac

	DEF=false
	for BASE in $EXTRASFSLIST; do
		[ "$BASE" != "$SFS" ] && continue
		DEF=true
		break
	done

	BUTTONS="$BUTTONS<togglebutton><label>$SFS</label><default>$DEF</default><action>if true queue \"$SFS\"</action><action>if false unqueue \"$SFS\"</action></togglebutton>"
done

if [ -z "$BUTTONS" ]; then
	BUTTONS="<text><label>$(gettext 'Could not find any SFS to queue.')</label></text>"
	[ $PUPMODE -eq 5 ] && BUTTONS="<text><label>\" \"</label></text>
	<text><label>$(gettext 'PUPMODE = 5')</label></text>
	<text><label>$(gettext '(First Boot)')</label></text>
	<text><label>\" \"</label></text>
	<text><label>$(gettext 'PUPMODE 5 does not support queueing an SFS')</label></text>
	<text><label>$(gettext 'file for automatic loading at system boot time.')</label></text>
	<text><label>\" \"</label></text>
	<text><label>$(gettext 'PUPMODE 5 does support clicking the SFS file in')</label></text>
	<text><label>$(gettext 'ROX-Filer and choosing to load or unload now.')</label></text>"
fi

export DIALOG='<window title="SFS-Load" image-name="/usr/share/pixmaps/puppy/package_sfs.svg" window-position="1" resizable="false">
	<vbox space-expand="true" space-fill="true">
		'`/usr/lib/gtkdialog/xml_info fixed package_sfs.svg 80 " " "$(gettext "Please select the extra SFS to load at boot time !")" " "`'
		<vbox scrollable="true" height="400">
		'$BUTTONS'
		</vbox>
		<hbox space-expand="true" space-fill="true">
			<button tooltip-text=" '$(gettext 'View extra SFS files selected to load at boot time')' ">
				<label>'$(gettext "Extra SFS")'</label>
				<input file>/usr/share/pixmaps/puppy/find.svg</input><height>18</height><width>18</width>
				<action>queued &</action>
			</button>
			<button tooltip-text=" '"$(gettext 'Command Line')"' ">
				<label>'$(gettext "CLI")'</label>
				<input file>/usr/share/pixmaps/puppy/execute_yes.svg</input><height>18</height><width>18</width>
				<action>`Xdialog --wrap --screencenter --left --title "'$(gettext 'SFS-Load - Command Line')'" --msgbox "'$(gettext '\nSFS-Load also supports a command-line quiet mode for convenient loading of extra SFS files, in which case the SFS-Load GUI is not required. For example, to automate loading of extra SFS files at boot time, add a command line to a Puppy startup script (such as /etc/rc.d/rc.local) in the following format:\n\nCommon Usage\n•    sfs_load  [-q|--quiet]   [-c|--cli]   [+sfs|-sfs|sfs]...\n\nParameters\n•    -q   (assume yes to all questions)\n•    -c   (hide the Loading splash-dialog)\n\nLoad/Unload by PATH\n•    +/path/to/sfs   (load SFS if not loaded already)\n•    -/path/to/sfs   (unload SFS if loaded)\n•    /path/to/sfs   (toggle load or unload SFS, depending on current state)\n\nLoad/Unload by NAME\n•    +name.sfs   (load SFS in PSUBDIR or root if not loaded already)\n•    -name.sfs   (unload SFS in PSUBDIR or root if loaded)\n•    name.sfs   (toggle load or unload SFS, depending on current state)\n\nExamples\n•    load by PATH:   sfs_load -qc +/path/to/sfs-1  /path/to/sfs-2  /path/to/sfs-3...\n•    load by NAME:   sfs_load -qc +name-1.sfs  name-2.sfs  name-3.sfs...\n\n')'" 700x0` &</action>
			</button>
			<button>
				<label>'$(gettext "Info")'</label>
				<input file>/usr/share/pixmaps/puppy/info.svg</input><height>18</height><width>18</width>
				<action>`Xdialog --wrap --screencenter --left --title "'$(gettext 'SFS-Load - INFO')'" --msgbox "'$(gettext '\nThis release of Puppy Linux utilizes an overlay file system with limited support for extra (optional) SFS files that add one or more applications to the underlying file system. With the exception of PUPMODE 5 (first boot), you can use this GUI to queue SFS files for loading at boot time. Specifically, the SFS queue requires a save file/folder for persistence of settings.\n\nThe SFS-Load GUI provides a clickable list of available extra SFS files stored with the Puppy SFS boot files. This location would be /mnt/home if you have already created a save file/folder. Select (click) an SFS file to add it to the queue for automatic loading at boot time. Click the SFS file again to remove it from the queue. Loading or unloading an SFS file by this method is not dynamic, so please reboot to activate your selection.\n\nAlternatively, you can use ROX-Filer to load or unload an SFS file. In this scenario, simply click the SFS file of interest and you will have the option to load/unload the SFS immediately (dynamically). Additionally, with the exception of PUPMODE 5 (first boot), you will have the option to queue/unqueue the selected file for loading at boot time. If the SFS file is loaded dynamically, you can later unload without rebooting.\n\nIn Puppy Linux with the overlay file system, dynamic loading of SFS files is implemented with multiple symlinks and this process may be associated with increased RAM consumption and prolonged load time if the SFS file is large. Although a dynamically-loaded SFS will add files to the system, any existing files with the same name are not replaced. Such limitations are not present when loading a queued SFS at boot time. Consequently, the preferred method for loading an SFS file is to create a save file/folder, then queue the SFS for loading at boot time.\n\n')'" 700x0` &</action>
			</button>
			<button>
				<label>'$(gettext "Help")'</label>
				<input file>/usr/share/pixmaps/puppy/help.svg</input><height>18</height><width>18</width>
				<action>defaulthtmlviewer /usr/share/doc/HOWTO_SFS-load.html &</action>
			</button>
			<button>
				<label>'$(gettext "Quit")'</label>
				<input file>/usr/share/pixmaps/puppy/quit.svg</input><height>18</height><width>18</width>
				<action>exit:quit_now</action>
			</button>
		</hbox>
	</vbox>
	<action signal="key-press-event" condition="command_is_true([ $KEY_SYM = Escape ] && echo true )">exit:EXIT</action>
</window>'

. /usr/lib/gtkdialog/xml_info gtk
exec gtkdialog -p DIALOG --styles=/tmp/gtkrc_xml_info.css
