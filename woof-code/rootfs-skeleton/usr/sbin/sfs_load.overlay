#!/bin/sh

. /etc/rc.d/BOOTCONFIG
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS

[ "$PUNIONFS" != "overlay" ] && exit 1

export TEXTDOMAIN=sfs_load
export OUTPUT_CHARSET=UTF-8

queue() {
	. /etc/rc.d/BOOTCONFIG
	cat << EOF > /etc/rc.d/BOOTCONFIG.tmp
EXTRASFSLIST='`echo "$EXTRASFSLIST $1" | tr ' ' '\n' | sort | uniq | tr '\n' ' ' | sed -e 's/^ //' -e 's/ $//'`'
PREVUNIONRECORD='$PREVUNIONRECORD'
LASTUNIONRECORD='$LASTUNIONRECORD'
EOF
	mv -f /etc/rc.d/BOOTCONFIG.tmp /etc/rc.d/BOOTCONFIG
}

unqueue() {
	. /etc/rc.d/BOOTCONFIG
	cat << EOF > /etc/rc.d/BOOTCONFIG.tmp
EXTRASFSLIST='`echo "$EXTRASFSLIST $1" | tr ' ' '\n' | sort | uniq | grep -Fv $1 | tr '\n' ' ' | sed -e 's/^ //' -e 's/ $//'`'
PREVUNIONRECORD='$PREVUNIONRECORD'
LASTUNIONRECORD='$LASTUNIONRECORD'
EOF
	mv -f /etc/rc.d/BOOTCONFIG.tmp /etc/rc.d/BOOTCONFIG
}

QUIET=0
CLI=0
while [ -n "$1" ]
do
	case "$1" in
		-q|--quiet) QUIET=1 ;;
		-c|--cli) CLI=1 ;;
		-qc|-cq)
			CLI=1
			QUIET=1
			;;
		-*.sfs) break ;;
		-*)
			echo "Usage: $0 [-q|--quiet] [-c|--cli] [+sfs|-sfs|sfs]..." 1>&2
			exit 1
			;;
		*) break ;;
	esac

	shift
done

if [ $# -ne 0 ]; then
	for SFS in "$@"; do
		ACTION=toggle
		case "$SFS" in
		+*)
			SFS=${SFS:1}
			ACTION=load
			;;
		-*)
			SFS=${SFS:1}
			ACTION=unload
			;;
		esac

		ASKMOUNT=1
		# assumption: if we have a loop device associated with this SFS, it's mounted or loaded
		LOOPDEV="`losetup -n -j "$SFS" | head -n 1 | cut -f 1 -d :`"

		# TODO: add PUPMODE 12 support, without leaving broken symlinks behind after reboot
		if [ $ACTION != unload ] && [ $PUPMODE -eq 5 -o $PUPMODE -eq 13 ] && [ -z "$LOOPDEV" ]; then
			if [ $QUIET -eq 1 ]; then
				:
			else
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to load") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
			fi
			if [ $? -eq 0 ]; then
				FOUND=0
				for i in `seq 3 99`
				do
					MNT="/initrd/pup_ro$i"
					mountpoint -q "$MNT" && continue
					FOUND=1
					break
				done
				[ $FOUND -eq 0 ] && exit 1

				mkdir -p "$MNT" || continue
				mount -r -t squashfs -o loop,noatime "$SFS" "$MNT"
				if [ $? -ne 0 ]; then
					rmdir "$MNT"
					continue
				fi
				ASKMOUNT=0

				if [ $CLI -eq 0 ]; then
					yaf-splash -bg orange -placement top -close never -text "$(gettext Loading) ${SFS##*/}" &
					PID=$!
				fi

				cp -asn "$MNT"/* /
				/etc/rc.d/rc.update w
				pidof -s jwm > /dev/null && jwm -reload
				[ $CLI -eq 0 ] && kill $PID
			fi
		elif [ $ACTION != load -a -n "$LOOPDEV" ]; then
			if [ $QUIET -eq 1 ]; then
				:
			else
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to unload") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
			fi
			if [ $? -eq 0 ]; then
				MNT="`grep "^$LOOPDEV " /proc/mounts 2>/dev/null | head -n 1 | cut -f 2 -d ' '`"
				case "$MNT" in
				/initrd/pup_ro1|/initrd/pup_ro2) ;;
				/initrd/pup_ro[1-9]*)
					if [ $CLI -eq 0 ]; then
						yaf-splash -bg orange -placement top -close never -text "$(gettext Unloading) ${SFS##*/}" &
						PID=$!
					fi
					while read ABSPATH; do
						rm -f "${ABSPATH#/initrd/pup_rw}"
					done < <(find /initrd/pup_rw/ -lname "$MNT/*")
					umount -l "$LOOPDEV"
					rmdir "$MNT"
					/etc/rc.d/rc.update w
					pidof -s jwm > /dev/null && jwm -reload
					[ $CLI -eq 0 ] && kill $PID
					;;
				"")
					losetup -d "$LOOPDEV" ;;
				esac
			fi

			ASKMOUNT=0
		fi

		[ $QUIET -eq 1 ] && continue

		BASE="${SFS##*/}"

		SKIP=0
		case "$BASE" in
		$DISTRO_BDRVSFS|$DISTRO_PUPPYSFS|$DISTRO_ZDRVSFS|$DISTRO_FDRVSFS|$DISTRO_ADRVSFS|$DISTRO_YDRVSFS|kbuild-*.sfs|devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs) SKIP=1 ;;
		esac

		if [ $SKIP -eq 0 -a $PUPMODE -ne 5 ]; then
			QUEUED=0
			for QBASE in $EXTRASFSLIST; do
				[ "$BASE" != "$QBASE" ] && continue
				QUEUED=1
				break
			done

			if [ $QUEUED -eq 0 ]; then
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to queue") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
				if [ $? -eq 0 ]; then
					DST="/initrd${PUP_HOME}${PSUBDIR}/${BASE}"
					if [ ! -e "$DST" -a ! -e "/initrd${PUP_HOME}/${BASE}" ]; then
						cp -f "$SFS" "$DST" || continue
					fi
					SFS="$DST"
					queue "$BASE"
				fi
			else
				yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to unqueue") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
				[ $? -eq 0 ] && unqueue "$BASE"
			fi
		fi

		[ $ASKMOUNT -eq 0 ] && continue
		yad --title sfs_load --window-icon=dialog-question --image=dialog-question --text "$(gettext "Do you want to mount") ${SFS}?" --form --button="gtk-yes:0" --button="gtk-no:1"
		[ $? -ne 0 ] && continue
		MNT="/mnt/`echo "$BASE" | tr '/ ' '+_'`"
		mkdir -p "$MNT"
		mountpoint -q "$MNT"
		if [ $? -ne 0 ]; then
			mount -r -t squashfs -o loop,noatime "$SFS" "$MNT" || continue
		fi

		defaultfilemanager "$MNT" &
	done

	exit 0
fi

[ $QUIET -eq 1 ] && exit 0

export -f queue unqueue

if [ -z "$PUP_HOME" ]; then
	SFS_DIRS="/initrd/mnt/pdrv"
else
	SFS_DIRS="/initrd${PUP_HOME}"
	[ -n "$PSUBDIR" ] && SFS_DIRS="$SFS_DIRS /initrd${PUP_HOME}${PSUBDIR}"
fi

BUTTONS=""
KBUILDSFS="kbuild-`uname -r`.sfs"
for SFS in `find $SFS_DIRS -maxdepth 1 -name '*.sfs' -printf '%f\n' | sort | uniq`; do
	case "$SFS" in
	$DISTRO_BDRVSFS|$DISTRO_PUPPYSFS|$DISTRO_ZDRVSFS|$DISTRO_FDRVSFS|$DISTRO_ADRVSFS|$DISTRO_YDRVSFS|$KBUILDSFS|devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs|nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs)
		BUTTONS="<togglebutton><label>$SFS</label><default>true</default><sensitive>false</sensitive></togglebutton>$BUTTONS"
		continue
		;;
	esac

	DEF=false
	for BASE in $EXTRASFSLIST; do
		[ "$BASE" != "$SFS" ] && continue
		DEF=true
		break
	done

	BUTTONS="$BUTTONS<togglebutton><label>$SFS</label><default>$DEF</default><action>if true queue \"$SFS\"</action><action>if false unqueue \"$SFS\"</action></togglebutton>"
done

[ -z "$BUTTONS" ] && BUTTONS="<text><label>$(gettext 'Could not find any SFS to queue.')</label></text>"

export DIALOG='<window title="SFS-Load" default_width="400">
	<vbox space-expand="true" space-fill="true">
		'`/usr/lib/gtkdialog/xml_info fixed package_sfs.svg 20 "$(gettext "Which SFS do you want to load?")"`'
		<vbox scrollable="true" height="400">
		'$BUTTONS'
		</vbox>
	</vbox>
</window>'

exec gtkdialog -p DIALOG