#!/bin/bash
#written by mistfire
#automatically generate xorg configuration

#Look for Xorg executable
if [ "$(which Xorg)" != "" ]; then
 XEXEC="$(which Xorg)" 
elif [ "$(which X)" != "" ]; then
 XEXEC="$(which X)"
else
 #Xorg not installed. It might be running Wayland
 echo "# Xorg not found. Unable to generate xorg configuration."
 exit
fi

XORG_PATHS="/usr/lib/xorg /usr/lib64/xorg /usr/lib/X11 /usr/lib64/X11"

MODLIST="$(busybox lsmod 2>/dev/null)"
PCILIST="$(busybox lspci 2>/dev/null)"
[ "$MODLIST" == "" ] && MODLIST="$(lsmod 2>/dev/null)" 
[ "$PCILIST" == "" ] && PCILIST="$(lspci -nD 2>/dev/null | sed "s#^0000:##g")"

if [ -e /etc/keymap.conf ]; then
 KBSELECT="$(cat /etc/keymap.conf | head -n 1)"
elif [ -e /etc/keymap ]; then
 KBSELECT="$(cat /etc/keymap | head -n 1)"
else
 KBSELECT="us"
fi

#Detect udev
UDEVD="$(which udevd)" 
[ "$UDEVD" == "" ] && UDEVD="$(which systemd-udevd)" 

if [ "$UDEVD" == "" ] && [ -e /usr/lib/systemd/systemd-udevd ]; then
 UDEVD="/usr/lib/systemd/systemd-udevd"
elif [ "$UDEVD" == "" ] && [ -e /lib/systemd/systemd-udevd ]; then
 UDEVD="/lib/systemd/systemd-udevd"  
fi 

#Look for xorg version
XORG_VERSION="$($XEXEC -version 2>&1 | grep -oE "X Server.*" | grep -oE "[0-9]\..*\.[0-9]")"

#Look for Xorg module path
XORG_MODULE_PATH="$($XEXEC -showDefaultModulePath 2>&1)"
[ "$XORG_MODULE_PATH" == "" ] && XORG_MODULE_PATH="/usr/lib/xorg/modules"

if [ "$XORG_MODULE_PATH" == "" ] || [ ! -e "$XORG_MODULE_PATH" ]; then
 for xpath in $XORG_PATHS
 do
  if [ -e "$xpath/modules" ]; then
   XORG_MODULE_PATH="$xpath/modules"
   break
  fi
 done
fi

decode_busid(){

XPID="$1"

RID="$(echo "$XPID" | sed -e "s#\.#:#g")"

R1=$(echo $((0x$(echo $RID | cut -f 1 -d ':'))))
R2=$(echo $((0x$(echo $RID | cut -f 2 -d ':'))))
R3=$(echo $((0x$(echo $RID | cut -f 3 -d ':'))))

echo "$R1:$R2:$R3"
	
}

write_evdev_conf(){
	
CFGPATH="$1"

echo '#
# Catch-all evdev loader for udev-based systems
# We dont simply match on any device since that also adds accelerometers
# and other devices that we dont really want to use. The list below
# matches everything but joysticks.

Section "InputClass"
        Identifier "evdev pointer catchall"
        MatchIsPointer "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
EndSection

Section "InputClass"
        Identifier "evdev keyboard catchall"
        MatchIsKeyboard "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
EndSection

Section "InputClass"
        Identifier "evdev touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
EndSection

Section "InputClass"
        Identifier "evdev tablet catchall"
        MatchIsTablet "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
EndSection

Section "InputClass"
        Identifier "evdev touchscreen catchall"
        MatchIsTouchscreen "on"
        MatchDevicePath "/dev/input/event*"
        Driver "evdev"
EndSection
' > $CFGPATH
	
	
}

write_libinput_conf(){

CFGPATH="$1"

echo '# Match on all types of devices but joysticks
#
# If you want to configure your devices, do not copy this file.
# Instead, use a config snippet that contains something like this:
#
# Section "InputClass"
#   Identifier "something or other"
#   MatchDriver "libinput"
#
#   MatchIsTouchpad "on"
#   ... other Match directives ...
#   Option "someoption" "value"
# EndSection
#
# This applies the option any libinput device also matched by the other
# directives. See the xorg.conf(5) man page for more info on
# matching devices.

Section "InputClass"
        Identifier "libinput pointer catchall"
        MatchIsPointer "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection

Section "InputClass"
        Identifier "libinput keyboard catchall"
        MatchIsKeyboard "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection

Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection

Section "InputClass"
        Identifier "libinput touchscreen catchall"
        MatchIsTouchscreen "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection

Section "InputClass"
        Identifier "libinput tablet catchall"
        MatchIsTablet "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection
' > $CFGPATH	
	
}

vercomp() {
	
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
    
}

probe_intel(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
 bid="$(decode_busid "$xbid")"

 accel=""

case $devid in
 7800)
  drv="i740"
 ;;
 0412|2562|2772|27a2|27ae|5a85|0126)
  drv="intel"
  accel="uxa"
 ;;
 1240|1132|3577|a001|a011|0042|0046)
  drv="intel"
 ;;
 010a|0102|0116|0126|0112|0122)
  drv="intel"
 ;;
 015a|0152|0162|0166|016a)
  drv="intel"
 ;;
 2e5b|8108|8109|4102|0be*)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^gma500_gfx|^cedarview_gfx")" != "" ]; then
   drv="modesetting"
  else
   if [ -e /sys/firmware/efi ]; then
	drv="fbdev"
   else
	if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
     drv="fbdev"
    else
     drv="vesa"
    fi
   fi
  fi
 ;;
 712*|27a*|358*|258*)
  drv="intel"
 ;;
 29?2|25?2|2a?2|2e?2)
  drv="intel"
 ;;
 *)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^i[0-9][0-9][0-9]")" != "" ]; then
   drv="modesetting"
   [ -e $XORG_MODULE_PATH/libglamoregl.so ] && accel="glamor"
  else
    if [ -e /sys/firmware/efi ]; then
     drv="fbdev"
    else
	  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
	   drv="fbdev"
	  else
	   drv="vesa"
	  fi
    fi
  fi
 ;;
esac


drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
  accel=""
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

if [ "$accel" != "" ]; then

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	Option      "AccelMethod" "'$accel'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
else

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

fi

}

probe_amd(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

accel=""

case $devid in
2081)
 drv="geode"
;;
980*)
 drv="radeon"
 accel=""
;;
15dd|683f|6800|6819|6798|679a|67b1|67b0|665c|665f|6938|7300|67ef|67df|699f|67ff|6fdf|9874|aad8|aae8)
 if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
  drv="amdgpu"
 else
  drv="radeon"
 fi
;;
661*|693*|686*|69a*|66a*|731*)
 if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
  drv="amdgpu"
 else
  drv="radeon"
 fi
;;
4742|4744|4749|474d|474e|474f|4750|4752|4753|4756|4757|4759|475a)
 drv="r128"
;;
4c45|4c46|4c47|4c49|4c4d|4c50|4c52|4d46|5050|5052|504*)
 drv="r128"
;;
5046|5245|5246|524b|524c|5346|534d|5446|5452|4d4c|524*|534*|544*|545*)
 drv="r128"
;;
4354|4358|4554|4654|4754|4755|4758|4c42|4c54|5354|5654|5655|5656)
 drv="mach64"
;;
424*|4c6*|496*|4f7*|783*|4a*|4e*|414*|56*|5b*|5e*|71*|79*)
 drv="radeon"
 [ -e $XORG_MODULE_PATH/libexa.so ] && accel="exa"
;;
5157|5159|514*|546*|594*|564*|565*|585*|587*|595*|596*|5c6*|5d4*)
 drv="radeon"
 [ -e $XORG_MODULE_PATH/libexa.so ] && accel="exa"
;;
7210|66*|67*|68*|94*|95*|96*|97*|98*|99*|aa*)
 drv="radeon"
 [ -e $XORG_MODULE_PATH/libexa.so ] && accel="exa"
;;
*)
 drv="ati"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ] && [ "$drv" == "amdgpu" ]; then
    
    [ -e $XORG_MODULE_PATH/drivers/radeon_drv.so ] && drvfound="1"
    
	if [ "$drvfound" != "" ]; then
	  drv="radeon"
	  accel=""
	elif [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^amdgpu")" != "" ]; then
	  drv="modesetting"
	  accel=""
	fi
fi

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ] && [ "$drv" == "radeon" ]; then    
    if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^radeon")" != "" ]; then
	  drv="modesetting"
	  accel=""
    fi
fi

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ] && [ "$drv" != "ati" ]; then

   [ -e $XORG_MODULE_PATH/drivers/ati_drv.so ] && drvfound="1"
	
	if [ "$drvfound" != "" ]; then
	 drv="ati"
	 accel=""
	fi
	
fi


if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
  accel=""
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi


if [ "$accel" != "" ]; then

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	Option 		"AccelMethod" "'$accel'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

else

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

fi
	
}

probe_s3(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

case $devid in
8c03|8c02|8c01|8c00|8a10|8a01|883d|5631)
 drv="s3virge"
;;
9102|8e26|8c2*|8d0*|8c1*|8a2*)
 drv="savage"
;;
*)
 drv="s3"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_3dfx(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

case $devid in
0001|0002)
 drv="voodoo"
;;
*)
 drv="tdfx"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_xgi(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

case $devid in
0047)
 drv="xgixp"
;;
*)
 drv="xgi"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_nvidia(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
 bid="$(decode_busid "$xbid")"

 drvfound=""	

 case $devid in
 0008|0009|0018|0019|002*)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^nvidia")" != "" ]; then
   drv="nvidia"
  else
   drv="nv"
  fi
 ;;
 *)
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^nvidia")" != "" ]; then
   drv="nvidia"
  else
   drv="nouveau"
  fi
 ;;
 esac	
 
drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^nouveau")" != "" ]; then
  drv="modesetting"
 fi
fi

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
  else
   drv="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
	
}

probe_via(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
 bid="$(decode_busid "$xbid")"

 drvfound=""	

  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^via_chrome")" != "" ]; then
   drv="via"
  else
   drv="openchrome"
  fi
 
drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
  else
   drv="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
 
	
}

write_nodrv(){
	
devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
drvname="$3"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'	
	
}

write_nodrv2(){
	
devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
drvname="$3"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
EndSection
'	
	
}

probe_arm_gpu(){

if [ "$(echo "$MODLIST" | grep -E "^vcio*")" != "" ]; then
 
echo 'Section "Device"
        Identifier      "VideoCore"
        Driver          "modesetting"
EndSection
'

elif [ "$(echo "$MODLIST" | grep -E '^lima$')" != "" ] || [ "$(echo "$MODLIST" | grep -E '^mali$')" != "" ]; then

echo 'Section "Device"
        Identifier      "Mali GPU"
        Driver          "modesetting"
EndSection
'

elif  [ "$(ls /sys/class/misc/mali* 2>/dev/null)" != "" ]; then
 
 
 armdrv="mali"
 
 drvfound=""
 
 [ -e $XORG_MODULE_PATH/drivers/${armdrv}_drv.so ] && drvfound="1"
 
 if [ "$drvfound" == "" ]; then
 
	 armdrv="fbturbo"
	 
	 [ -e $XORG_MODULE_PATH/drivers/${armdrv}_drv.so ] && drvfound="1"
 
 fi
 
 [ "$drvfound" == "" ] && armdrv=""
 
 
 if [ "$armdrv" == "" ]; then

echo 'Section "Device"
        Identifier      "ARM FBDEV"
        Driver          "fbdev"
EndSection
'

 elif [ "$armdrv" == "mali" ]; then

echo ' Section "Device"
	Identifier "Mali FBDEV"
	Driver	"mali"
	Option	"fbdev"            "/dev/fb0"
	Option	"DRI2"             "true"
	Option	"DRI2"             "true"
	Option	"DRI2_PAGE_FLIP"   "true"
	Option	"DRI2_WAIT_VSYNC"  "false"
EndSection

Section "DRI"
	Mode 0666
EndSection
' 

 elif [ "$armdrv" == "fbturbo" ]; then

echo 'Section "Device"
        Identifier      "ARM FB TURBO"
        Driver          "fbturbo"
        Option          "fbdev" "/dev/fb0"
        Option          "SwapbuffersWait" "true"
EndSection
'

 fi
 
elif [ -e /sys/devices/platform/omapdss ]; then

 drvfound=""
 armdrv="omap"

 [ -e $XORG_MODULE_PATH/drivers/${armdrv}_drv.so ] && drvfound="1"
 
 [ "$drvfound" == "" ] && armdrv="fbdev"

echo 'Section "Device"
    Identifier             "ARM OMAP 0"
    Driver                 "'$armdrv'" 
EndSection
'
 
elif [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
 
echo 'Section "Device"
        Identifier      "ARM Graphics Card"
        Driver          "fbdev"
EndSection
'

fi
	
}

write_fallback(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

if [ -e /sys/firmware/efi ]; then
 drvname="fbdev"
else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drvname="fbdev"
  else
   drvname="vesa"
  fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drvname'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

}

write_generic(){
	
devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
drvname="$3"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drvname}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 modfound="$(echo "$MODLIST" | grep -wE "^$drvname")"
 [ "$modfound" != "" ] && drvname="modesetting"
fi

[ -e $XORG_MODULE_PATH/drivers/${drvname}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drvname="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drvname="fbdev"
  else
   drvname="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drvname'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'	
	
}

probe_vmware(){

 devid="$(echo "$1" | cut -f 2 -d ':')"
 cnum="$2"
 xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
 bid="$(decode_busid "$xbid")"

 drv=""
 drvfound=""	
 
if [ -e $XORG_MODULE_PATH/drivers/vmware_drv.so ]; then
 drv="vmware"
 drvfound="1"
fi

if [ "$drvfound" == "" ]; then
  if [ "$(echo "$MODLIST" | awk '{ print $1 }' | grep -E "^vmwgfx")" != "" ]; then
   drv="modesetting"
   drvfound="1"
  fi
fi

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
  else
   drv="vesa"
  fi
 fi
fi
		
echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'

}

probe_trident(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

case $devid in
9420|9430)
 drv="tvga8900"
;;
*)
 drv="trident"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

probe_diamond(){

devid="$(echo "$1" | cut -f 2 -d ':')"
cnum="$2"
xbid="$(echo "$PCILIST" | grep "$1" | cut -f 1 -d ' ')"
bid="$(decode_busid "$xbid")"

case $devid in
00a0|00a8)
 drv="cirrus"
;;
0550|1092)
 drv="nv"
;;
*)
 drv="diamond"
;;
esac

drvfound=""

[ -e $XORG_MODULE_PATH/drivers/${drv}_drv.so ] && drvfound="1"

if [ "$drvfound" == "" ]; then
 if [ -e /sys/firmware/efi ]; then
  drv="fbdev"
 else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drv="fbdev"
   accel=""
  else
   drv="vesa"
   accel=""
  fi
 fi
fi

echo 'Section "Device"
	Identifier  "Card'$cnum'"
	Driver      "'$drv'" #card'$cnum'driver
	BusID       "'$bid'" #card'$cnum'busid
EndSection
'
	
}

write_fallback_guess(){

if [ -e /sys/firmware/efi ]; then
 drvname="fbdev"
else
  if [ "$(ls /dev/fb* 2>/dev/null)" != "" ]; then
   drvname="fbdev"
  else
   drvname="vesa"
  fi
fi

echo 'Section "Device"
	Identifier  "Card0"
	Driver      "'$drvname'" #card0driver
EndSection
'

}	

#Look for available input drivers
if [ ! -e $XORG_MODULE_PATH/input/kbd_drv.so ]; then
 KBDRV=""
else
 KBDRV="kbd"
fi

if [ ! -e $XORG_MODULE_PATH/input/mouse_drv.so ]; then
  MOUSEDRV=""
else
  MOUSEDRV="mouse"
fi

ARMCPU="$(uname -m | grep -E "arm*|aarch*")"
TOUCHSCREEN="$(udevadm info --export-db | grep "ID_INPUT_TOUCHSCREEN=1")"


#Detect xorg version otherwise use fallback method
if [ "$XORG_VERSION" != "" ]; then

	if [ "$(which vercmp)" != "" ]; then
	 vercmp $XORG_VERSION ge 1.8.0
	 retval=$?
	else

	 vercomp "$XORG_VERSION" "1.7.0"
	 retval2=$?
	 
	 if [ $retval2 -eq 1 ]; then
	  retval=0
	 else
	  retval=1
	 fi 
	 
	fi
	
	if [ $retval -eq 0 ] && [ "$UDEVD" != "" ]; then
	 AUTOADD="true"
	else
	 AUTOADD="false"
	fi

else

	APPLECOMP="$(grep -i '^Apple' /sys/class/dmi/id/board_vendor)"

	if [ "$KBDRV" == "" ] || [ "$MOUSEDRV" == "" ]; then
	 AUTOADD="true"
	elif [ "$TOUCHSCREEN" != "" ]; then
	 AUTOADD="true"
	elif [ "$APPLECOMP" != "" ] || [ "$ARMCPU" != "" ]; then
	 AUTOADD="true"
	else
	 AUTOADD="false"
	fi

fi


if [ "$AUTOADD" == "true" ]; then
 #Check if libinput or evdev xorg driver exists
 if [ -e $XORG_MODULE_PATH/input/libinput_drv.so ] || [ -e $XORG_MODULE_PATH/input/evdev_drv.so ]; then 
  
  AUTOADD="true"
  
  #Check for libinput or evdev xorg config file
  if [ -e $XORG_MODULE_PATH/input/libinput_drv.so ]; then
   if [ "$(ls /etc/X11/xorg.conf.d/*-libinput.conf 2>/dev/null)" == "" ] && [ "$(ls /usr/share/X11/xorg.conf.d/*-libinput.conf 2>/dev/null)" == "" ]; then
     [ -w /etc/X11/xorg.conf.d ] && write_libinput_conf "/etc/X11/xorg.conf.d/40-libinput.conf"
   fi
  elif [ -e $XORG_MODULE_PATH/input/evdev_drv.so ]; then 
   if [ "$(ls /etc/X11/xorg.conf.d/*-evdev.conf 2>/dev/null)" == "" ] && [ "$(ls /usr/share/X11/xorg.conf.d/*-evdev.conf 2>/dev/null)" == "" ]; then
     [ -w /etc/X11/xorg.conf.d ] && write_evdev_conf "/etc/X11/xorg.conf.d/41-evdev.conf"
   fi  
  fi
  
 else
  AUTOADD="false"
 fi
fi


#Setup server layout input devices
if [ "$MOUSEDRV" != "" ] && [ "$MOUSEDRV" == "mouse" ] && [ "$AUTOADD" == "false" ]; then
 MOUSEDEV='InputDevice    "Mouse0" "CorePointer"'
else
 MOUSEDEV='#InputDevice    "Mouse0" "CorePointer"'
fi

if [ "$(echo "$MODLIST" | grep "vboxguest")" != "" ] && [ -e $XORG_MODULE_PATH/input/vboxmouse_drv.so ] && [ "$AUTOADD" == "false" ]; then
 VBOXMOUSEDEV='InputDevice    "VboxMouse" "CorePointer"'
 vboxfound=1
else
 VBOXMOUSEDEV='#	InputDevice    "VboxMouse" "CorePointer"'
 vboxfound=0
fi

[ "`grep 'Elantech' /proc/bus/input/devices`" ] && TOUCHPAD='Elantech'
[ "`grep 'Vendor=10e9' /proc/bus/input/devices`" ] && TOUCHPAD='Elantech'
[ "`grep 'Vendor=04f3' /proc/bus/input/devices`" ] && TOUCHPAD='Elantech'

[ "`grep 'Alps' /proc/bus/input/devices`" ] && TOUCHPAD='Alps'
[ "`grep 'Vendor=0433' /proc/bus/input/devices`" ] && TOUCHPAD='Alps'
[ "`grep 'Vendor=044e' /proc/bus/input/devices`" ] && TOUCHPAD='Alps'
[ "`grep 'Vendor=048c' /proc/bus/input/devices`" ] && TOUCHPAD='Alps'

[ "`grep 'Synaptics' /proc/bus/input/devices`" ] && TOUCHPAD='Synaptics'
[ "`grep -E 'SYNA*' /proc/bus/input/devices`" ] && TOUCHPAD='Synaptics'
[ "`grep 'Vendor=06cb' /proc/bus/input/devices`" ] && TOUCHPAD='Synaptics'

if [ "$TOUCHPAD" != "" ] && [ "$AUTOADD" == "false" ];then
 SYNAPDEV='	InputDevice "Synaptics Mouse" "AlwaysCore" #serverlayoutsynaptics'
 LOADSYNAP='	Load "synaptics" #loadsynaptics'
else
 SYNAPDEV='#	InputDevice "Synaptics Mouse" "AlwaysCore" #serverlayoutsynaptics'
 LOADSYNAP='#	Load "synaptics" #loadsynaptics'
fi

if [ "$KBDRV" != "" ] && [ "$KBDRV" == "kbd" ] && [ "$AUTOADD" == "false" ]; then
 KBDEV='InputDevice    "Keyboard0" "CoreKeyboard"'
else
 KBDEV='#InputDevice    "Keyboard0" "CoreKeyboard"'
fi

#Generate Server Flags Section
echo '# **********************************************************************
# Server flags section.
# **********************************************************************

Section "ServerFlags"

    Option "IgnoreABI" "true"

# Uncomment this to disable the <Crtl><Alt><Fn> VT switch sequence
# (where n is 1 through 12).  This allows clients to receive these key
# events.

    Option "DontVTSwitch" "true"

# Enables mode switching with xrandr
# There is a report that this can cause Xorg not to work on some
# video hardware, so default is commented-out...
# but i want to use it in xorgwizard so leave on...

    Option "RandR" "on"

# With this, Xorg wont talk to HAL to add evdev devices and youll be back
# with the old Xorg behavior (pre-7.4)...

    Option "AutoAddDevices" "'$AUTOADD'"

# For no-Hal, kirk also suggests this...

#    Option "AllowMouseOpenFail" "true"

# Xorg 7.4, Ubuntu Jaunty, CTRL-ALT-BACKSPACE is disabled by default...

    Option "DontZap" "false"

EndSection


Section "ServerLayout"
	Identifier     "X.org Configured"
	Screen      0  "Screen0" 0 0
	'$SYNAPDEV'
	'$VBOXMOUSEDEV'	
	'$MOUSEDEV'
	'$KBDEV'
EndSection


Section "Files"
	ModulePath   "'$XORG_MODULE_PATH'"
	FontPath     "/usr/share/fonts/local"
	FontPath     "/usr/share/fonts/TTF"
	FontPath     "/usr/share/fonts/OTF"
	FontPath     "/usr/share/fonts/Type1"
	FontPath     "/usr/share/fonts/misc"
	FontPath     "/usr/share/fonts/truetype"
	FontPath     "/usr/share/fonts/opentype"
	FontPath     "/usr/share/fonts/woff"
	FontPath     "/usr/share/fonts/CID"
	FontPath     "/usr/share/fonts/75dpi/:unscaled"
	FontPath     "/usr/share/fonts/100dpi/:unscaled"
	FontPath     "/usr/share/fonts/75dpi"
	FontPath     "/usr/share/fonts/100dpi"
	FontPath     "/usr/share/fonts/cyrillic"
	FontPath     "/usr/share/fonts/X11/misc"
	FontPath     "/usr/share/X11/fonts/misc"
	FontPath     "/usr/share/fonts/X11/TTF"
	FontPath     "/usr/share/fonts/X11/OTF"
	FontPath     "/usr/share/fonts/X11/Type1"
	FontPath     "/usr/share/fonts/X11/100dpi"
	FontPath     "/usr/share/fonts/X11/75dpi"
	FontPath     "/usr/share/X11/fonts"
	FontPath     "/usr/local/share/fonts"
	FontPath     "/usr/local/share/X11/fonts"
EndSection

'

xorg_mods=$(ls "$XORG_MODULE_PATH/extensions" 2>/dev/null | grep -vE "\.la" | sed -e "s#^lib##g" -e "s#\.so\$##g" -e "s#\.o\$##g" -e "s#\.a\$##g")

if [ "$xorg_mods" != "" ]; then

echo 'Section "Module"'
echo $LOADSYNAP

	for xmod in $xorg_mods
	do
	 echo '	Load  "'$xmod'"'
	done 

echo 'EndSection
'

fi

#Generate keyboard config
if [ "$KBDRV" == "kbd" ] && [ "$AUTOADD" == "false" ]; then

echo 'Section "InputDevice"
	Identifier  "Keyboard0"
	Driver      "kbd"
	Option      "XkbRules" "xorg"
	Option      "XkbModel" "pc102" #xkbmodel0
	Option      "XkbLayout" "'$KBSELECT'" #xkeymap0
	#Option      "XkbVariant" "" #xkbvariant0
	Option      "XkbOptions" "terminate:ctrl_alt_bksp" #xkboptions0
EndSection
'

fi

#Generate mouse config
if [ "$MOUSEDRV" == "mouse" ] && [ "$AUTOADD" == "false" ]; then

echo 'Section "InputDevice"
	Identifier  "Mouse0"
	Driver      "mouse"
	Option	    "Protocol" "auto" #mouse0protocol
	Option	    "Device" "/dev/input/mice"
	#Option      "Emulate3Buttons"
	#Option      "Emulate3Timeout" "50"
	Option      "ZAxisMapping" "4 5" #scrollwheel
EndSection
'

fi

if [ $vboxfound -ne 0 ] && [ "$AUTOADD" == "false" ]; then

echo 'Section "InputDevice"
        Identifier  "VBoxMouse"
        Driver      "vboxmouse"
        Option      "CorePointer"
EndSection
'

fi


if [ "$AUTOADD" == "true" ]; then

echo 'Section "InputClass"
	Identifier "Keyboard Defaults"
	MatchIsKeyboard "yes"
	Option      "XkbModel" "pc104" #xkbmodel0
	Option      "XkbLayout" "'$KBSELECT'" #xkeymap0
	#Option      "XkbVariant" "" #xkbvariant0
	Option      "XkbOptions" "terminate:ctrl_alt_bksp" #xkboptions0
EndSection
'

fi

if [ "$TOUCHPAD" != "" ] && [ "$AUTOADD" == "false" ]; then

echo 'Section "InputDevice"
	Identifier "Synaptics Mouse"
	Driver "synaptics"
	Option "SHMConfig" "on"
EndSection
'

fi

#Generate Monitor and Modes Section
echo 'Section "Monitor"
	Identifier   "Monitor0"
	VendorName   "Monitor Vendor"
	ModelName    "Monitor Model"
	HorizSync    35-81
	VertRefresh  59-76
	#UseModes     "Modes0" #monitor0usemodes
#	Option      "PreferredMode" "1024x768" #monitor0prefmode
EndSection


Section "Modes"
	Identifier "Modes0"
	#modes0modeline0
EndSection

'

if [ "$ARMCPU" != "" ]; then

 probe_arm_gpu

else

#Probe video cards and generate configuration

 if [ -e /sys/class/drm ]; then
  vcards=$(ls /sys/class/drm/card*/device/vendor 2>/dev/null | sed -e "s#\/device\/vendor##g" | xargs basename 2>/dev/null)
 else
  vcards=""
 fi

 if [ "$vcards" != "" ]; then

	for vcard in $vcards
	do

		vid="$(cat /sys/class/drm/$vcard/device/vendor | cut -f 2 -d 'x' 2>/dev/null)"
		dvid="$(cat /sys/class/drm/$vcard/device/device | cut -f 2 -d 'x' 2>/dev/null)"
		cnum="$(echo $vcard | sed -e "s#card##g" 2>/dev/null)"

		case $vid in
			8086) probe_intel "${vid}:${dvid}" "$cnum" ;;
			5333) probe_s3 "${vid}:${dvid}" "$cnum" ;;
			121a) probe_3dfx "${vid}:${dvid}" "$cnum" ;;
			18ca) probe_xgi "${vid}:${dvid}" "$cnum" ;;
			10de) probe_nvidia "${vid}:${dvid}" "$cnum" ;;
			1092) probe_diamond "${vid}:${dvid}" "$cnum" ;;
			1023) probe_trident "${vid}:${dvid}" "$cnum" ;;
					1002|1022) probe_amd "${vid}:${dvid}" "$cnum" ;;		
			1412|1106) probe_via "${vid}:${dvid}" "$cnum" ;;
			15ad|fffe) probe_vmware "${vid}:${dvid}" "$cnum" ;;
			1013) write_generic "${vid}:${dvid}" "$cnum" cirrus ;;
			1039) write_generic "${vid}:${dvid}" "$cnum" sis ;;
			102b) write_generic "${vid}:${dvid}" "$cnum" mga ;;
			10c8) write_generic "${vid}:${dvid}" "$cnum" neomagic ;;
			100c) write_generic "${vid}:${dvid}" "$cnum" tseng ;;
			1a03) write_generic "${vid}:${dvid}" "$cnum" ast ;;
			1142) write_generic "${vid}:${dvid}" "$cnum" apm ;;
			edd8) write_generic "${vid}:${dvid}" "$cnum" ark ;;
			102c) write_generic "${vid}:${dvid}" "$cnum" chips ;;
			105d) write_generic "${vid}:${dvid}" "$cnum" i128 ;;
			126f) write_generic "${vid}:${dvid}" "$cnum" siliconmotion ;;
			1011) write_generic "${vid}:${dvid}" "$cnum" tga ;;
			1078) write_generic "${vid}:${dvid}" "$cnum" cyrix ;;
			10a9) write_generic "${vid}:${dvid}" "$cnum" newport ;;
			100b) write_generic "${vid}:${dvid}" "$cnum" nsc ;;
			1163) write_generic "${vid}:${dvid}" "$cnum" rendition ;;
			80ee) write_generic "${vid}:${dvid}" "$cnum" vboxvideo ;;
			10e0) write_generic "${vid}:${dvid}" "$cnum" imstt ;;
			104e) write_generic "${vid}:${dvid}" "$cnum" oak ;;
			003d) write_generic "${vid}:${dvid}" "$cnum" i740 ;;
			10b4) write_generic "${vid}:${dvid}" "$cnum" s3virge ;;
			1179) write_generic "${vid}:${dvid}" "$cnum" trident ;;
			1af4) write_nodrv2 "${vid}:${dvid}" "$cnum" ;;
			1115|104c|3d3d) write_generic "${vid}:${dvid}" "$cnum" glint ;;		
			*) write_fallback "${vid}:${dvid}" "$cnum";;
		esac

	done

 else

  write_fallback_guess

 fi

fi

scrnum=0

#Generate Screen Section
echo '
Section "Screen"
	Identifier "Screen0"
#	Device     "Card0"
	Monitor    "Monitor0"
#	DefaultDepth 24
	#Option         "metamodes" "1280x800_60 +0+0" #METAMODES_0
	Subsection "Display"
		Depth       24 #screen0depth
#		Modes       "1024x768" #screen0modes
	EndSubsection
EndSection
'
