#!/bin/bash
# Pfontview (c) Thunor 2012
# GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# See http://www.gnu.org/licenses/gpl-2.0.txt

#set -x

export TEXTDOMAIN=pfontview
export OUTPUT_CHARSET=UTF-8

TARGET=pfontview
TITLE=Pfontview
VERSION=0.2
LOCAL_DATA_DIR=$HOME/.$TARGET
WINDOW_TITLE="$TITLE - ${1##*/}"
DEBUG_CONTENT=0
DEBUG_TRANSITS=0

DebugSpacer=
LocalFontDir=$HOME/.fonts
FontSymlink=$LocalFontDir/${TARGET}.XXXXXXXX
WindowIcon=/usr/share/pixmaps/puppy/font.svg
PreviewFontSize=20
PreviewText=
WindowWidth=640
WindowHeight=400

#===============================================================
#                        FUNCTIONS
#===============================================================
funcFontQuery() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcFontQuery; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi

	local style stylelang column columnlang
	local styleen stylenative
	local nativelang=${LANG%%_*}
	local family line
	local first=1

	fc-query "$1" > $TEMP_DIR/FontQuery
	if [ $? -eq 0 ]; then

		while read -r line; do
			case $line in
				family:*"(s)")    family=$line    ;;
				style:*"(s)")     style=$line     ;;
				stylelang:*"(s)") stylelang=$line ;;
			esac
		done < $TEMP_DIR/FontQuery

		family=${family%%(s)*}
		family=${family%\"*}
		family=${family#*\"}
		FontFamily=$family

		while [ -n "$style" -a -n "$stylelang" ]; do

			column=${style%%(s)*}
			columnlang=${stylelang%%(s)*}
			column=${column%\"*}
			columnlang=${columnlang%\"*}
			column=${column#*\"}
			columnlang=${columnlang#*\"}

			if [ $DEBUG_CONTENT -ne 0 ]; then
				echo "$FUNCNAME(): columnlang=$columnlang column=$column"
			fi

			if [ $first -eq 1 ]; then
				styleen=$column
				first=0
			fi
			if [ "$columnlang" = en ]; then
				styleen=$column
			fi
			if [ "$columnlang" = "$nativelang" ]; then
				stylenative=$column
			fi

			style=${style#*(s)}
			stylelang=${stylelang#*(s)}

		done

		if [ -n "$stylenative" ]; then
			FontStyle=$stylenative
		else
			FontStyle=$styleen
		fi

	else
		FontFamily="$i18nInvalid_font"
		FontStyle=""
	fi

	if [ $DEBUG_CONTENT -ne 0 ]; then
		echo "$FUNCNAME(): nativelang=$nativelang"
		echo "$FUNCNAME(): FontFamily=$FontFamily"
		echo "$FUNCNAME(): FontStyle=$FontStyle"
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcgtkrcCreate() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcgtkrcCreate; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi
	functmpSet gtkrc '
style "styleBlackFg" {
	fg[NORMAL] = "black"
}
widget "*BlackFg" style "styleBlackFg"

style "styleWhiteBg" {
	bg[NORMAL] = "white"
}
widget "*WhiteBg" style "styleWhiteBg"

style "stylePreview" {
	font_name = "'"${FontFamily}, $FontStyle $PreviewFontSize"'"
}
widget "*Preview" style "stylePreview"
'
	GTK2_RC_FILES=$TEMP_DIR/gtkrc:~/.gtkrc-2.0

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funci18nApply() {
	if [ -z "$BASH" ]; then local FUNCNAME=funci18nApply; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi
	i18nFile="$(gettext '_File')"
	i18nSave_Settings="$(gettext '_Save Settings')"
	i18nPangram="$(gettext 'The quick brown fox jumps over the lazy dog')"
	i18nPreview="$(gettext 'Preview')"
	i18nInvalid_font="$(gettext 'Invalid font')"
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcrcCreate() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcrcCreate; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi
	if [ ! -f $LOCAL_DATA_DIR/PreviewText ]; then
		funcrcSet PreviewText "$PreviewText"
	fi
	if [ ! -f $LOCAL_DATA_DIR/WindowWidth ]; then
		funcrcSet WindowWidth $WindowWidth
	fi
	if [ ! -f $LOCAL_DATA_DIR/WindowHeight ]; then
		funcrcSet WindowHeight $WindowHeight
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcrcGet() {
	local input
	read -r input < $LOCAL_DATA_DIR/$1
	echo "$input"
}

funcrcSave() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcrcSave; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi

	local line value width height
	local found=0

	funcrcSet PreviewText "$entPreview"

	if [ `command -v xwininfo` ]; then
		xwininfo -name "$WINDOW_TITLE" > $TEMP_DIR/XWinInfo
		while read -r line; do
			case $line in
				xwininfo:*\"$WINDOW_TITLE\") found=1 ;;
				Width:*)  width=${line#*:} ;;
				Height:*) height=${line#*:} ;;
			esac
		done < $TEMP_DIR/XWinInfo

		if [ $found -eq 1 ]; then
			funcrcSet WindowWidth $width
			funcrcSet WindowHeight $height
		fi
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}
export -f funcrcSave

funcrcSet() {
	echo "$2" > $LOCAL_DATA_DIR/$1
}
export -f funcrcSet

functmpGet() {
	local input

	read -r input < $TEMP_DIR/$1
	echo "$input"
}

functmpSet() {
	echo "$2" > $TEMP_DIR/$1
}
#===============================================================

[ -d $LOCAL_DATA_DIR ] || mkdir -p $LOCAL_DATA_DIR
[ -d $LocalFontDir ] || mkdir -p $LocalFontDir

funcrcCreate

if [ -z "$1" -o "$1" = -h -o "$1" = --help ]; then
	echo "$TITLE $VERSION (C) 2012 Thunor
Usage: $TARGET [FILE]

Where FILE is a TrueType font file.
"
	exit 1
fi

TEMP_DIR=`mktemp -d -t ${TARGET}.XXXXXXXX`
if [ $? -ne 0 ]; then
	echo "Couldn't create temporary directory."
	exit 1
fi

PreviewText="`funcrcGet PreviewText`"
WindowWidth="`funcrcGet WindowWidth`"
WindowHeight="`funcrcGet WindowHeight`"

funci18nApply

FontSymlink=`mktemp $FontSymlink`
ln -fs "$(realpath "$1")" $FontSymlink

funcFontQuery $FontSymlink
funcgtkrcCreate

functmpSet PreviewText "`funcrcGet PreviewText`"
functmpSet Pangrams '<span font="'"${FontFamily}, $FontStyle 8"'">'"$i18nPangram"'</span>
<span font="'"${FontFamily}, $FontStyle 12"'">'"$i18nPangram"'</span>
<span font="'"${FontFamily}, $FontStyle 16"'">'"$i18nPangram"'</span>
<span font="'"${FontFamily}, $FontStyle 24"'">'"$i18nPangram"'</span>
<span font="'"${FontFamily}, $FontStyle 48"'">'"$i18nPangram"'</span>
<span font="'"${FontFamily}, $FontStyle 64"'">'"$i18nPangram"'</span>'

echo '
<window title="'$WINDOW_TITLE'" image-name="'$WindowIcon'"
	default-width="'$WindowWidth'" default-height="'$WindowHeight'"
	window-position="2" border-width="0">
	<vbox spacing="0">
		<menubar space-expand="false" space-fill="false">
			<menu use-underline="true" label="'$i18nFile'">
				<menuitem stock-id="gtk-save" label="'$i18nSave_Settings'"
					accel-key="0x53" accel-mods="4">
					<action>funcrcSave</action>
				</menuitem>
				<menuitemseparator></menuitemseparator>
				<menuitem stock-id="gtk-quit" accel-key="0x51" accel-mods="4">
					<action>exit:Quit</action>
				</menuitem>
			</menu>
		</menubar>
		<vbox border-width="5" space-expand="true" space-fill="true">
			<fontbutton font-name="'${FontFamily}, $FontStyle $PreviewFontSize'"
				use-font="true" use-size="true" show-size="false" title=""
				visible="true" sensitive="true" space-expand="false" space-fill="false">
				<variable>ftbBig</variable>
			</fontbutton>
			<vbox space-expand="true" space-fill="true">
				<vbox scrollable="true" hscrollbar-policy="2">
					<eventbox name="WhiteBg">
						<text name="BlackFg" use-markup="true" wrap="false">
							<input file>'$TEMP_DIR'/Pangrams</input>
						</text>
					</eventbox>
				</vbox>
			</vbox>
			<hbox space-expand="false" space-fill="false">
				<text space-expand="false" space-fill="false">
					<label>"'$i18nPreview':"</label>
				</text>
				<text space-expand="true" space-fill="true">
					<label>"'$DebugSpacer'"</label>
				</text>
			</hbox>
			<hbox space-expand="false" space-fill="false">
				<entry name="Preview" secondary-icon-stock="gtk-clear"
					space-expand="true" space-fill="true">
					<variable>entPreview</variable>
					<input file>'$TEMP_DIR'/PreviewText</input>
					<action signal="secondary-icon-release">clear:entPreview</action>
				</entry>
				<button use-stock="true" label="gtk-quit" has-focus="true"
					space-expand="false" space-fill="false">
					<action>exit:Quit</action>
				</button>
			</hbox>
		</vbox>
	</vbox>
	<variable>winMain</variable>
</window>
' > $TEMP_DIR/winMain

export TARGET
export TITLE
export LOCAL_DATA_DIR
export PACKAGE_DATA_DIR
export WINDOW_TITLE
export DEBUG_CONTENT
export DEBUG_TRANSITS
export PATH
export TEMP_DIR
export GTK2_RC_FILES
export GTKDIALOG_PIXMAP_PATH=/usr/local/lib/X11/pixmaps:/usr/share/pixmaps:/usr/share/icons

gtkdialog --space-expand=true --space-fill=true --file=$TEMP_DIR/winMain

rm $FontSymlink
rm -rf $TEMP_DIR
