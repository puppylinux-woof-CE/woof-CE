#!/bin/sh
# Pfontview (c) Thunor 2012
# GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# See http://www.gnu.org/licenses/gpl-2.0.txt

#set -x

export TEXTDOMAIN=pfontview
export OUTPUT_CHARSET=UTF-8

GTKDIALOG=gtkdialog

TARGET=pfontview
TITLE=Pfontview
VERSION=0.1.4
LOCAL_DATA_DIR=$HOME/.$TARGET
WINDOW_TITLE="$TITLE - ${1##*/}"
DEBUG_CONTENT=0
DEBUG_TRANSITS=0

DebugSpacer=
#"[]"
LocalFontDir=$HOME/.fonts
FontSymlink=$LocalFontDir/${TARGET}.XXXXXXXX
WindowIcon=/usr/share/pixmaps/puppy/font.svg
FamilyTextState=true
StyleTextState=true
FontButtonState=1
PreviewFontSize=20
PreviewText=
WindowWidth=640
WindowHeight=400

#===============================================================
#                        FUNCTIONS
#===============================================================
funcFontQuery() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcFontQuery; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi

	local style stylelang column columnlang
	local styleen stylenative
	local nativelang=${LANG%%_*}
	local family line
	local first=1

	fc-query "$1" > $TEMP_DIR/FontQuery
	if [ $? -eq 0 ]; then

		while read -r line; do
			case $line in
				family:*"(s)")
					family=$line ;;
				style:*"(s)")
					style=$line ;;
				stylelang:*"(s)")
					stylelang=$line ;;
			esac
		done < $TEMP_DIR/FontQuery

		family=${family%%(s)*}
		family=${family%\"*}
		family=${family#*\"}
		FontFamily=$family

		while [ -n "$style" -a -n "$stylelang" ]; do

			column=${style%%(s)*}
			columnlang=${stylelang%%(s)*}
			column=${column%\"*}
			columnlang=${columnlang%\"*}
			column=${column#*\"}
			columnlang=${columnlang#*\"}

			if [ $DEBUG_CONTENT -ne 0 ]; then
				echo "$FUNCNAME(): columnlang=$columnlang column=$column"
			fi

			if [ $first -eq 1 ]; then
				styleen=$column
				first=0
			fi
			if [ "$columnlang" = en ]; then
				styleen=$column
			fi
			if [ "$columnlang" = "$nativelang" ]; then
				stylenative=$column
			fi

			style=${style#*(s)}
			stylelang=${stylelang#*(s)}

		done

		if [ -n "$stylenative" ]; then
			FontStyle=$stylenative
		else
			FontStyle=$styleen
		fi

	else
		FontFamily="$i18nInvalid_font"
		FontStyle=""
	fi

	if [ $DEBUG_CONTENT -ne 0 ]; then
		echo "$FUNCNAME(): nativelang=$nativelang"
		echo "$FUNCNAME(): FontFamily=$FontFamily"
		echo "$FUNCNAME(): FontStyle=$FontStyle"
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcgtkrcCreate() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcgtkrcCreate; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi
	functmpSet gtkrc '
style "styleBlackFg" {
	fg[NORMAL] = "black"
}
widget "*BlackFg" style "styleBlackFg"

style "styleWhiteBg" {
	bg[NORMAL] = "white"
}
widget "*WhiteBg" style "styleWhiteBg"

style "stylePreview" {
	font_name = "'"$FontFamily $FontStyle $PreviewFontSize"'"
}
widget "*Preview" style "stylePreview"
'
	GTK2_RC_FILES=$TEMP_DIR/gtkrc:~/.gtkrc-2.0

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funci18nApply() {
	if [ -z "$BASH" ]; then local FUNCNAME=funci18nApply; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi
	i18nFile="$(gettext '_File')"
	i18nSave_Settings="$(gettext '_Save Settings')"
	i18nView="$(gettext 'View')"
	i18nShow_Family="$(gettext 'Show _Family')"
	i18nShow_Style="$(gettext 'Show _Style')"
	i18nShow_Font_Button="$(gettext 'Show Font _Button')"
	i18nTools="$(gettext '_Tools')"
	i18nNone="$(gettext '_None')"
	i18nSmall="$(gettext '_Small')"
	i18nBig="$(gettext '_Big')"
	i18nFamily="$(gettext 'Family')"
	i18nStyle="$(gettext 'Style')"
	i18nPangram="$(gettext 'The quick brown fox jumps over the lazy dog')"
	i18nPreview="$(gettext 'Preview')"
	i18nInvalid_font="$(gettext 'Invalid font')"
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcrcCreate() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcrcCreate; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi

	if [ ! -f $LOCAL_DATA_DIR/Version ]; then
		funcrcSet Version "$VERSION"
	fi
	if [ ! -f $LOCAL_DATA_DIR/FamilyTextState ]; then
		funcrcSet FamilyTextState $FamilyTextState
	fi
	if [ ! -f $LOCAL_DATA_DIR/StyleTextState ]; then
		funcrcSet StyleTextState $StyleTextState
	fi
	if [ ! -f $LOCAL_DATA_DIR/FontButtonState ]; then
		funcrcSet FontButtonState $FontButtonState
	fi
	if [ ! -f $LOCAL_DATA_DIR/PreviewText ]; then
		funcrcSet PreviewText "$PreviewText"
	fi
	if [ ! -f $LOCAL_DATA_DIR/WindowWidth ]; then
		funcrcSet WindowWidth $WindowWidth
	fi
	if [ ! -f $LOCAL_DATA_DIR/WindowHeight ]; then
		funcrcSet WindowHeight $WindowHeight
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcrcGet() {
	local input

	read -r input < $LOCAL_DATA_DIR/$1
	echo "$input"
}

funcrcSave() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcrcSave; fi
	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): IN"; fi

	local line value width height
	local found=0

	funcrcSet FamilyTextState $muiShowFamily
	funcrcSet StyleTextState $muiShowStyle

	if [ $muiFontButtonNone = true ]; then
		value=1
	elif [ $muiFontButtonSmall = true ]; then
		value=2
	elif [ $muiFontButtonBig = true ]; then
		value=4
	fi
	funcrcSet FontButtonState $value

	funcrcSet PreviewText "$entPreview"

	if [ `command -v xwininfo` ]; then

		xwininfo -name "$WINDOW_TITLE" > $TEMP_DIR/XWinInfo
		while read -r line; do
			case $line in
				xwininfo:*\"$WINDOW_TITLE\")
					found=1 ;;
				Width:*)
					width=${line#*:} ;;
				Height:*)
					height=${line#*:} ;;
			esac
		done < $TEMP_DIR/XWinInfo

		if [ $found -eq 1 ]; then
			funcrcSet WindowWidth $width
			funcrcSet WindowHeight $height
		fi
	fi

	if [ $DEBUG_TRANSITS -ne 0 ]; then echo "$FUNCNAME(): OUT"; fi
}

funcrcSet() {
	echo "$2" > $LOCAL_DATA_DIR/$1
}

functmpGet() {
	local input

	read -r input < $TEMP_DIR/$1
	echo "$input"
}

functmpSet() {
	echo "$2" > $TEMP_DIR/$1
}
#===============================================================

Comment() { :; }

funcTorF() {
	if [ $1 -eq 1 ]; then
		echo true
	else
		echo false
	fi
}

funcAppVersionGet() {
	local field
	local index=0

	for field in `$1`; do
		if [ $((index++)) -eq $2 ]; then break; fi
	done
	major_version=${field%%.*}; field=${field#*.}
	minor_version=${field%%.*}
	micro_version=${field#*.}
}

funcToolsMenuCreate() {
	local pfont2=`command -v pfont2`
	local ttf=`command -v ttf`
	local sfontview=`command -v sfontview`

	if [ "$pfont2" -o "$ttf" -o "$sfontview" ]; then
		echo '<menu use-underline="true" label="'$i18nTools'">'
		if [ "$pfont2" ]; then
			echo \
'				<menuitem use-underline="true" label="_Pfont2">
					<action>pfont2 "'$1'" &</action>
				</menuitem>'
		fi
		if [ "$ttf" ]; then
			echo \
'				<menuitem use-underline="true" label="Pfont2 P_review">
					<action>ttf "'$1'" &</action>
				</menuitem>'
		fi
		if [ "$sfontview" ]; then
			echo \
'				<menuitem use-underline="true" label="_Sfontview">
					<action>sfontview "'$1'" &</action>
				</menuitem>'
		fi
		echo '			</menu>'
	fi
}


if [ ! `command -v fc-query` ]; then
	echo "Couldn't find fc-query"
	exit 1
fi
if [ ! `command -v $GTKDIALOG` ]; then
	echo "Couldn't find $GTKDIALOG"
	exit 1
fi
funcAppVersionGet "$GTKDIALOG -v" 2
if [ $minor_version -ge 8 -a $micro_version -ge 2 ]; then
	true
else
	echo "Couldn't find $GTKDIALOG >= 0.8.2"
	exit 1
fi

if [ ! -d $LOCAL_DATA_DIR ]; then
	mkdir $LOCAL_DATA_DIR
	if [ $? -ne 0 ]; then
		echo "Couldn't create $LOCAL_DATA_DIR"
		exit 1
	fi
fi

if [ ! -d $LocalFontDir ]; then
	mkdir $LocalFontDir
	if [ $? -ne 0 ]; then
		echo "Couldn't create $LocalFontDir"
		exit 1
	fi
fi

funcrcCreate

if [ -z "$1" -o "$1" = -h -o "$1" = --help ]; then
	echo "$TITLE $VERSION (C) 2012 Thunor
Usage: $TARGET [FILE]

Where FILE is a TrueType font file.
"
	exit 1
fi

TEMP_DIR=`mktemp -d -t ${TARGET}.XXXXXXXX`
if [ $? -ne 0 ]; then
	echo "Couldn't create temporary directory."
	exit 1
fi

FamilyTextState="`funcrcGet FamilyTextState`"
StyleTextState="`funcrcGet StyleTextState`"
FontButtonState="`funcrcGet FontButtonState`"
PreviewText="`funcrcGet PreviewText`"
WindowWidth="`funcrcGet WindowWidth`"
WindowHeight="`funcrcGet WindowHeight`"

funci18nApply

FontSymlink=`mktemp $FontSymlink`
ln -fs "$(realpath "$1")" $FontSymlink

funcFontQuery $FontSymlink

funcgtkrcCreate

functmpSet PreviewText "`funcrcGet PreviewText`"
functmpSet Pangrams '<span font="'"$FontFamily $FontStyle 8"'">'"$i18nPangram"'</span>
<span font="'"$FontFamily $FontStyle 12"'">'"$i18nPangram"'</span>
<span font="'"$FontFamily $FontStyle 16"'">'"$i18nPangram"'</span>
<span font="'"$FontFamily $FontStyle 24"'">'"$i18nPangram"'</span>
<span font="'"$FontFamily $FontStyle 48"'">'"$i18nPangram"'</span>
<span font="'"$FontFamily $FontStyle 64"'">'"$i18nPangram"'</span>'

echo '
<window title="'$WINDOW_TITLE'" image-name="'$WindowIcon'"
	default-width="'$WindowWidth'" default-height="'$WindowHeight'"
	window-position="2" border-width="0">
	<vbox spacing="0">
		<menubar space-expand="false" space-fill="false">
			<menu use-underline="true" label="'$i18nFile'">
				<menuitem stock-id="gtk-save" label="'$i18nSave_Settings'"
					accel-key="0x53" accel-mods="4">
					<action>. funcrcSave; funcrcSave</action>
				</menuitem>
				<menuitemseparator></menuitemseparator>
				<menuitem stock-id="gtk-quit" accel-key="0x51" accel-mods="4">
					<action>exit:Quit</action>
				</menuitem>
			</menu>
			<menu use-underline="true" label="'$i18nView'">
				<menuitem checkbox="'$FamilyTextState'" use-underline="true">
					<variable>muiShowFamily</variable>
					<label>"'$i18nShow_Family'"</label>
					<action>if true show:hbxFamily</action>
					<action>if true enable:hbxFamily</action>
					<action>if false hide:hbxFamily</action>
					<action>if false disable:hbxFamily</action>
				</menuitem>
				<menuitem checkbox="'$StyleTextState'" use-underline="true">
					<variable>muiShowStyle</variable>
					<label>"'$i18nShow_Style'"</label>
					<action>if true show:hbxStyle</action>
					<action>if true enable:hbxStyle</action>
					<action>if false hide:hbxStyle</action>
					<action>if false disable:hbxStyle</action>
				</menuitem>
				<menuitemseparator></menuitemseparator>
				<menu stock-id="gtk-select-font" label="'$i18nShow_Font_Button'">
					<menuitem radiobutton="'`echo $(($FontButtonState & 1))`'"
						use-underline="true">
						<variable>muiFontButtonNone</variable>
						<label>"'$i18nNone'"</label>
						<action>if true hide:ftbBig</action>
						<action>if true disable:ftbBig</action>
						<action>if true hide:ftbSmall</action>
						<action>if true disable:ftbSmall</action>
					</menuitem>
					<menuitem radiobutton="'`echo $(($FontButtonState >> 1 & 1))`'"
						use-underline="true">
						<variable>muiFontButtonSmall</variable>
						<label>"'$i18nSmall'"</label>
						<action>if true hide:ftbBig</action>
						<action>if true disable:ftbBig</action>
						<action>if true show:ftbSmall</action>
						<action>if true enable:ftbSmall</action>
					</menuitem>
					<menuitem radiobutton="'`echo $(($FontButtonState >> 2 & 1))`'"
						use-underline="true">
						<variable>muiFontButtonBig</variable>
						<label>"'$i18nBig'"</label>
						<action>if true show:ftbBig</action>
						<action>if true enable:ftbBig</action>
						<action>if true hide:ftbSmall</action>
						<action>if true disable:ftbSmall</action>
					</menuitem>
				</menu>
			</menu>
			'"$(funcToolsMenuCreate "$1")"'
		</menubar>
		<vbox border-width="5" space-expand="true" space-fill="true">
			<hbox visible="'$FamilyTextState'" sensitive="'$FamilyTextState'"
				space-expand="false" space-fill="false">
				<text use-markup="true" width-request="60"
					space-expand="false" space-fill="false">
					<label>"<b>'$i18nFamily':</b>"</label>
				</text>
				<text selectable="true"
					space-expand="false" space-fill="false">
					<label>"'$FontFamily'"</label>
				</text>
				<text space-expand="true" space-fill="true">
					<label>"'$DebugSpacer'"</label>
				</text>
				<variable>hbxFamily</variable>
			</hbox>
			<hbox visible="'$StyleTextState'" sensitive="'$StyleTextState'"
				space-expand="false" space-fill="false">
				<text use-markup="true" width-request="60"
					space-expand="false" space-fill="false">
					<label>"<b>'$i18nStyle':</b>"</label>
				</text>
				<text selectable="true"
					space-expand="false" space-fill="false">
					<label>"'$FontStyle'"</label>
				</text>
				<text space-expand="true" space-fill="true">
					<label>"'$DebugSpacer'"</label>
				</text>
				<variable>hbxStyle</variable>
			</hbox>
			<fontbutton font-name="'$FontFamily $FontStyle $PreviewFontSize'"
				use-font="true" use-size="true" show-size="false" title=""
				visible="'`funcTorF $(($FontButtonState >> 2 & 1))`'"
				sensitive="'`funcTorF $(($FontButtonState >> 2 & 1))`'"
				space-expand="false" space-fill="false">
				<variable>ftbBig</variable>
			</fontbutton>
			<vbox space-expand="true" space-fill="true">
				<vbox scrollable="true" hscrollbar-policy="2">
					<eventbox name="WhiteBg">
						<text name="BlackFg" use-markup="true" wrap="false">
							<input file>'$TEMP_DIR'/Pangrams</input>
						</text>
					</eventbox>
				</vbox>
			</vbox>
			<hbox space-expand="false" space-fill="false">
				<text space-expand="false" space-fill="false">
					<label>"'$i18nPreview':"</label>
				</text>
				<text space-expand="true" space-fill="true">
					<label>"'$DebugSpacer'"</label>
				</text>
			</hbox>
			<hbox space-expand="false" space-fill="false">
				<button space-expand="false" space-fill="false"
					visible="'`funcTorF $(($FontButtonState >> 1 & 1))`'"
					sensitive="'`funcTorF $(($FontButtonState >> 1 & 1))`'">
					<variable>ftbSmall</variable>
					<input file stock="gtk-select-font"></input>
					<action>activate:ftbBig</action>
				</button>
				<entry name="Preview" secondary-icon-stock="gtk-clear"
					space-expand="true" space-fill="true">
					<variable>entPreview</variable>
					<input file>'$TEMP_DIR'/PreviewText</input>
					<action signal="secondary-icon-release">clear:entPreview</action>
				</entry>
				<button use-stock="true" label="gtk-quit" has-focus="true"
					space-expand="false" space-fill="false">
					<action>exit:Quit</action>
				</button>
			</hbox>
		</vbox>
	</vbox>
	<variable>winMain</variable>
</window>
' > $TEMP_DIR/winMain

export GTKDIALOG
export TARGET
export TITLE
export VERSION
export LOCAL_DATA_DIR
export PACKAGE_DATA_DIR
export WINDOW_TITLE
export DEBUG_CONTENT
export DEBUG_TRANSITS
export PATH
export TEMP_DIR
export GTK2_RC_FILES
export GTKDIALOG_PIXMAP_PATH=/usr/local/lib/X11/mini-icons:\
/usr/local/lib/X11/pixmaps:/usr/share/pixmaps:/usr/share/icons

$GTKDIALOG --space-expand=true --space-fill=true --file=$TEMP_DIR/winMain

rm $FontSymlink
rm -rf $TEMP_DIR
