#!/bin/bash
#(c) Copyright Dec. 2016, Barry Kauler, www.barryk.org
#license: gpl v3 (ref: /usr/share/doc/legal)
#want to test if an active ethernet cable plugged in at first bootup.
#previously, /etc/rc.d/rc.sysinit called /etc/rc.d/rc.network to
#do this, ehich is gross overkill. now rc.sysinit calls this script.
#161215 first release.
#170730 add conditional later attempt to detect interfaces.
#171226 use lspci to detect ethernet hardware, replacing 170730.
#180104 check for ethernet bridge hardware if controller not detected; increase wait for detection; move sleep to after test; change report of wait time.
#180624 add check for predictable network interface device names (e.g. enp0s25).
#190209 increase wait for ethtool link detected, to 7.5 secs total).
#200206 replace deprecated ifconfig & iwconfig with busybox ip.
#200412 increase wait for ethtool link detected, to 15 secs.
#210415 /tmp/sns_interface_success no longer used by SNS 3.0+; simplify test for wireless; resolve shellcheck warnings.
#220122 Override default dhcpcd response timeout if not already in conf file, to compensate for router possibly slowing due to MAC spoofing; replace ethtool with ip-show test for LOWER_UP.
#220402 Retry dhcpcd once if failed.
#220704 Add sleep after link up, to reduce chance of dhcpcd not receiving valid IP address.

export LANG='C'

#171226 improved wait for eth...
ifCNT=0; loopCNT=0
ethCNT="$(lspci -n | grep -c ' 0200: ')"
if [ "$ethCNT" -eq 0 ]; then
    ethCNT="$(lspci -nn | grep -c ' \[0680\]: .* Ethernet ')" #180104
fi

while [ "$ifCNT" -lt "$ethCNT" ];do
    ifCNT=$(ip link show | grep -B 1 'link/ether' | grep -Ec ': eth[0-9]|: en[oPps][0-9]|: enx[0-9a-f]') #200206
    [ "$ifCNT" -gt 0 ] || [ $loopCNT -ge 30 ] && break #finding one i/f is enough, other may not have a driver. 180104
    sleep 1 #180104
    ((++loopCNT))
done
[ "$loopCNT" -gt 0 ] && echo "rc.network_eth: waited for ethernet interfaces: seconds = ${loopCNT}" >&2 #180104

#code adapted from /usr/local/simple_network_setup/rc.network...
INTERFACES="$(ip link show | grep -B 1 'link/ether' | grep '^[0-9]' | cut -f 2 -d ':' | tr -d '\n')" #200206
for INTERFACE in $INTERFACES #exs: wlan0 eth0
do
    [ -d /sys/class/net/${INTERFACE}/wireless ] && continue #only want wired. #210415
    ip link set "$INTERFACE" up || continue #200206

    TIMEOUT=15 #200412
    while [ $TIMEOUT -ge 0 ]; do #200412
      ip link show "$INTERFACE" | grep -q 'LOWER_UP' && break #220122
      [ $((--TIMEOUT)) -ge 0 ] && sleep 1 #200412
    done

    if [ "$TIMEOUT" -lt 0 ]; then #220122
        ip link set "$INTERFACE" down #200206
        continue #no network.
    fi

    sleep 2 #220704
# shellcheck disable=SC2089
    DHCPCDFIX="-I ''"
    for ATTEMPT in 1 2 ; do #220402
        #Override the 30-second default wait time for getting  a lease #220122...
        if grep -wq '^timeout' /etc/dhcpcd.conf; then
# shellcheck disable=SC2086,SC2090 #Do not quote $DHCPCDFIX, 's OK
            dhcpcd $DHCPCDFIX "$INTERFACE" #timeout already set
        else
# shellcheck disable=SC2086,SC2090 #Do not quote $DHCPCDFIX, 's OK
            dhcpcd --timeout 40 $DHCPCDFIX "$INTERFACE" #MAC spoofing may slow router response
        fi
        sleep 0.2 #180110
        grep -q '^nameserver' /etc/resolv.conf && break #210415
        ip link set "$INTERFACE" down #200206
        dhcpcd --release "$INTERFACE" 2>/dev/null
        ip route flush dev "$INTERFACE"
        [ "$ATTEMPT" -eq 1 ] && sleep 8 #220402
    done #220402
done
exit
