#!/bin/bash

#set -x

# From https://stackoverflow.com/a/44660519/702738
# --
# Compares two tuple-based, dot-delimited version numbers a and b (possibly
# with arbitrary string suffixes). Returns:
# 1 if a<b
# 2 if equal
# 3 if a>b
# Everything after the first character not in [0-9.] is compared
# lexicographically using ASCII ordering if the tuple-based versions are equal.
compare_version() {
    if [[ $1 == $2 ]]; then
        return 2
    fi
    local IFS=.
    local i a=(${1%%[^0-9.]*}) b=(${2%%[^0-9.]*})
    local arem=${1#${1%%[^0-9.]*}} brem=${2#${2%%[^0-9.]*}}
    for ((i=0; i<${#a[@]} || i<${#b[@]}; i++)); do
        if ((10#${a[i]:-0} < 10#${b[i]:-0})); then
            return 1
        elif ((10#${a[i]:-0} > 10#${b[i]:-0})); then
            return 3
        fi
    done
    if [ "$arem" '<' "$brem" ]; then
        return 1
    elif [ "$arem" '>' "$brem" ]; then
        return 3
    fi
    return 2
}

#=================================================================
#                        MAIN
#=================================================================

if [ ! "$1" ] || [ ! "$3" ] ; then
	echo "usage: version1 lt|gt|le|ge|eq version2
       return value 0 if true, else 1"
	exit 2;
fi

#compare_version $1 $3
#rv=$?

case $2 in
	le) #[ $rv -eq 2 -o $rv -eq 1 ] && exit 0 ;;
		[ "$1" = "$3" ] && exit 0
		compare_version $1 $3 ; [ $? -eq 1 ] && exit 0
		;;
	ge) #[ $rv -eq 2 -o $rv -eq 3 ] && exit 0 ;;
		[ "$1" = "$3" ] && exit 0
		compare_version $1 $3 ; [ $? -eq 3 ] && exit 0
		;;
	lt) #[ $rv -eq 1 ] && exit 0
		compare_version $1 $3 ; [ $? -eq 1 ] && exit 0
		;;
	gt) #[ $rv -eq 3 ] && exit 0
		compare_version $1 $3 ; [ $? -eq 3 ] && exit 0
		;;
	eq) #[ $rv -eq 2 ] && exit 0 ;;
		[ "$1" = "$3" ] && exit 0
		;;
	*)
		echo "unknown operator: $2"
		;;
esac

exit 1

### END ###