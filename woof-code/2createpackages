#!/bin/bash
#(c) Copyright Barry Kauler 2009.
# grab binary ubuntu/debian/slackware packages and build puppy packages.
# to packages-$DISTRO_FILE_PREFIX/, into the "generic name". Note that one generic
# name can have one or more binary pkgs.
#110820 support/findpkgs is new script to find all pkgs to be used in Puppy build. Major changes!
#110830 fix if 3rd field specifies multiple pet pkgs.
#111204 do not execute post-install script if FIXUPHACK has DISABLE_POST_INSTALL_SCRIPT=yes.
#
#some information about template-packages/GENERICNAME:
#  copy all non-zero files to target (overwrite existing files)
#As a last resort, if target pkg is wrong, a file 'FIXUPHACK' is a script that can be at top dir
#  in template. It executes in target, with current-dir set to where FIXUPHACK is located. (ex: perl_tiny).

[ -n "$GITPOD_WORKSPACE_ID" -a "`id -u`" -ne 0 ] && exec fakeroot $0 "$@"

#set -x
MWD=$(pwd)
export LANG=C #faster.

case $1 in # pkg / -all / -downloaded
	-all) COMMANDLINE_CHOICE=ALL_PACKAGES ;;
	-downloaded)
		#create all packages listed in status/download_list as made by 1download
		if [ ! -f ./status/download_list ] ; then
			echo "/status/download_list cannot be found - exiting"
			exit -1
		fi
		for pkg in `sort -u ./status/download_list | cut -d : -f 2` ; do
			[ "$pkg" != "" ] && $0 $pkg
		done
		exit 0
		;;
esac

. ./_00build.conf
. ./_00func
. ./DISTRO_SPECS #has DISTRO_BINARY_COMPAT, DISTRO_COMPAT_VERSION
[ ! "$DISTRO_DB_SUBNAME" ] && DISTRO_DB_SUBNAME="$DISTRO_COMPAT_VERSION" #121102 fallback if DISTRO_DB_SUBNAME not defined in file DISTRO_SPECS.
source_compat_repos  # ./DISTRO_COMPAT_REPOS-
source_pkgs_specs    #sets DPSFILE / has FALLBACKS_COMPAT_VERSIONS
. ./DISTRO_PET_REPOS #has PET_REPOS, PACKAGELISTS_PET_ORDER
source_woofmergevars # ./WOOFMERGEVARS
set_archdir_var      #ex: ARCHDIR=x86_64-linux-gnu
set_binaries_var     #ex: BINARIES=tgz_txz-14.2 BINARIES=deb-xenial
create_local_repos_dirs

#./DISTRO_SPECS
export DISTRO_BINARY_COMPAT #120517 i want this in FIXUPHACK scripts.
export DISTRO_COMPAT_VERSION DISTRO_FILE_PREFIX DISTRO_TARGETARCH
#./WOOFMERGEVARS
export WOOF_HOSTARCH WOOF_TARGETARCH WOOF_COMPATDISTRO WOOF_COMPATVERSION
export BINARIES ARCHDIR #ex: deb-xenial

# $PLIBDIRS
PLIBDIRS="lib usr/lib"
if [ "$DISTRO_BINARY_COMPAT" = "slackware64" ] ; then
	PLIBDIRS="lib64 usr/lib64"
elif [ "$ARCHDIR" ] ; then
	PLIBDIRS="$PLIBDIRS lib/${ARCHDIR} usr/lib/${ARCHDIR}"
fi
export PLIBDIRS

PLIB=lib
[ "$DISTRO_BINARY_COMPAT" = "slackware64" ] && PLIB=lib64
export PLIB

#PKGS_SPECS_TABLE table fomat: see README.pkgs_specs
#remove comments from PKGS_SPECS_TABLE... make sure '|' on end... get rid of old |+udev,+whatever on end...
PKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep -v '^#' | grep -v '^$' | tr '\t' ' ' | tr -s ' ' | tr '+' '&' | sed -e 's%|&.*%%' | tr '&' '+' | sed -e 's% #.*%%' -e 's% $%%' -e 's%$%|%' -e 's%||$%|%'`"

run_findpkgs #find all packages that will be used in the Puppy build...

if [ -z "$COMMANDLINE_CHOICE" ] ; then
	COMMANDLINE_CHOICE=""
	[ $1 ] && COMMANDLINE_CHOICE="$1"
fi

mkdir -p status
if [ "$COMMANDLINE_CHOICE" = "ALL_PACKAGES" ] ; then
	#this file will keep growing, so reset it...
	echo -n "" > status/2createpackages_history_builds-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
else
	touch status/2createpackages_history_builds-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
	sort -u status/2createpackages_history_builds-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} > status/z2c
	mv -f status/z2c status/2createpackages_history_builds-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
fi

mkdir -p packages-${DISTRO_FILE_PREFIX}
if [ "$COMMANDLINE_CHOICE" = "" ];then
	echo -e "\nPress ENTER only to build all pkgs,"
	echo -n " or type generic name of one pkg: "
	read USERINPUT
else
	USERINPUT="$COMMANDLINE_CHOICE"
	if [ "$COMMANDLINE_CHOICE" = "ALL_PACKAGES" ];then
		USERINPUT=""
	fi
fi
if [ "$USERINPUT" = "" ];then
	rm -rf packages-${DISTRO_FILE_PREFIX}
	mkdir packages-${DISTRO_FILE_PREFIX}
	CHOICE_PKGS_SPECS_TABLE="$PKGS_SPECS_TABLE"
else
	CHOICE_PKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep "^yes|${USERINPUT}|"`"
	[ "$CHOICE_PKGS_SPECS_TABLE" ] || echo "ERROR: pkg not defined or not enabled in $DPSFILE"
fi

############################################################################
#read through PKGS_SPECS_TABLE, find matching pkg(s) in 'packages-${BINARIES}',
#process and create raw woof packages in 'packages-${DISTRO_FILE_PREFIX}'...

STRIP_BIN="`which strip`"
rm -f ERROR-2CREATEPACKAGES 2>/dev/null

pre_process_pkg() {
	[ ! -d ${PKG_DIR} ] && return

	# before processing the whole package, check if there is a _PRE file
	# which contains code to fix/trim dowm stuff to speed up processing...
	if [ -f ${MWD}/packages-templates/${GENERICNAME}/_PRE ] ; then
		echo " executing packages-templates/${GENERICNAME}/_PRE"
		( cd ${PKG_DIR} ; sh ${MWD}/packages-templates/${GENERICNAME}/_PRE )
	elif [ -f packages-templates/${GENERICNAME}_PRE ] ; then
		echo " executing packages-templates/${GENERICNAME}_PRE"
		( cd ${PKG_DIR} ; sh ${MWD}/packages-templates/${GENERICNAME}_PRE )
	fi
}

for ONEPKGSPEC in $CHOICE_PKGS_SPECS_TABLE
do

 [ "$ONEPKGSPEC" = "" ] && continue

 IFS="|" read -r YESNO GENERICNAME BINARYPARTNAMES SPLITRULE PKGLOCFLD ETC <<< "$ONEPKGSPEC"
 [ "$YESNO" = "no" ] && continue
 BINARYPARTNAMES="${BINARYPARTNAMES//,/ }" #convert "," to " "

 echo -e "\nProcessing ${GENERICNAME}"

 #processing pkgs that will be combined into ${GENERICNAME}...
 #a pkg may be shared by multiple generic names, ex: :gcc_lib::gcc_dev:|compat|... (ex from Slacko).
 FNDIT="`grep ":${GENERICNAME}:" status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}`"
 if [ "$FNDIT" = "" ];then
	( echo
	echo "ERROR: '${GENERICNAME}' package does not exist."
	echo "You will need to find a matching package and place in packages-pet,"
	echo "or packages-${BINARIES} as appropriate."
	echo "Do it, then rerun this script and choose to build ${GENERICNAME}." ) >> ERROR-2CREATEPACKAGES
	[ -z "$GITHUB_ACTIONS" ] || exit 1
	continue
 fi

 PDIR=${PWD}/packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}
 [ -d ${PDIR} ] && rm -rf ${PDIR}
 [ -d ${PDIR}_DEV ] && rm -rf ${PDIR}_DEV
 [ -d ${PDIR}_DOC ] && rm -rf ${PDIR}_DOC
 [ -d ${PDIR}_NLS ] && rm -rf ${PDIR}_NLS
 [ -d ${PDIR}_NULL ] && rm -rf ${PDIR}_NULL
 
 # rootfs-packages override pet pkgs
 if [ -d ${PWD}/rootfs-packages/${GENERICNAME} ] ; then
	echo " * rootfs-packages/${GENERICNAME} overrides pet pkg"
	cp -a ${PWD}/rootfs-packages/${GENERICNAME} ${PWD}/packages-${DISTRO_FILE_PREFIX}
	continue
 fi

 #PKGS_SPECS_TABLE may specify redirections...
 EXE=""
 DEV="_DEV"
 DOC="_DOC"
 NLS="_NLS"
 #exe>dev,dev>exe,etc
 #exe,dev,doc>exe,nls>null
 for TOK in ${SPLITRULE//,/ } ; do #convert "," to " "
	case $TOK in
		exe*) EXE="${TOK#*>}" ; EXE="_${EXE^^}" ;;
		dev*) DEV="${TOK#*>}" ; DEV="_${DEV^^}" ;;
		doc*) DOC="${TOK#*>}" ; DOC="_${DOC^^}" ;;
		nls*) NLS="${TOK#*>}" ; NLS="_${NLS^^}" ;;
	esac
 done
 #the "packagename_EXE" is just named "packagename"...
 [ "$EXE" = "_EXE" ] && EXE=""
 [ "$DEV" = "_EXE" ] && DEV=""
 [ "$DOC" = "_EXE" ] && DOC=""
 [ "$NLS" = "_EXE" ] && NLS=""

 if [ "$EXE" = "_DEV" ] ; then
	DEVX=1
 else
	DEVX=
 fi

 #------------------------------------------------------------------------
 EXE_DIR=${PWD}/packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${EXE%_NULL}
 DEV_DIR=${PWD}/packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${DEV}
 DOC_DIR=${PWD}/packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${DOC}
 NLS_DIR=${PWD}/packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${NLS}
 PKG_DIR=${EXE_DIR}
 #------------------------------------------------------------------------

 FIXUPHACK_FILE=""
 DISABLE_POST_INSTALL_SCRIPT=""

 #inject $FNDIT at end of do-done, runs faster...
 #==== extract packages ======
 while read ONEDBENTRY
 do
	#120812 category now allows optional subcategory...
	#ONEDBENTRY=:GENERICNAME:|PETorCOMPAT|DBFILE|pkgname|nameonly|version|pkgrelease|category[;subcategory]|size|path|fullfilename|dependencies|description|compileddistro|compiledrelease|repo|
	#...pkgname onwards is the full db entry for a package.
	IFS="|" read -r F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 ETC <<< "$ONEDBENTRY"
	PETorCOMPAT="$F2" #ex: compat
	DBFILE="$F3"           #ex: Packages-puppy-5-official
	DB_pkgname="$F4"       #ex: abiword-2.3.4-w5
	DB_fullfilename="$F11" #ex: abiword-2.3.4-w5.pet

	#---- check if need to stop here
	if [ "$EXE" = "_NULL" -a "$DEV" = "_NULL" -a "$NLS" = "_NULL" ] ; then
		# don't want anything fromt this pkg... a 'fake install'
		mkdir -p "packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${EXE%_NULL}"
		continue
	fi
	case "$DB_fullfilename" in
		*"-dev_"*|*"_DEV"*)
			if [ "$DEV" = "_NULL" ] ; then
				mkdir -p "packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}${EXE%_NULL}_DEV"
				continue
			fi ;;
		*"-doc_"*|*"_DOC"*) [ "$DOC" = "_NULL" ] && continue ;;
	esac
	#--

	#--------------------------------
	case $DB_fullfilename in
		*.pet) PSUB='pet'       ;;
		*)     PSUB=${BINARIES} ;;
	esac
	ONEBINARYPKG="./packages-${BINARIES}/${DB_fullfilename}"
	[ ! -f $ONEBINARYPKG ] && ONEBINARYPKG="./packages-pet/${DB_fullfilename}"
	if [ ! -f $ONEBINARYPKG ];then
		( echo
		echo "ERROR: ${ONEBINARYPKG} does not exist."
		echo "Please find a package that matches, place it in packages-${PSUB},"
		echo "then run this script again and choose to build ${GENERICNAME}." ) >> ERROR-2CREATEPACKAGES
		[ -z "$GITHUB_ACTIONS" ] || exit 1
		continue 2 #skip this pkg.
	fi
  
	echo "${GENERICNAME}|${DB_fullfilename}" >> status/2createpackages_history_builds-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

	echo " processing $DB_fullfilename"
	PKGNAME=${DB_fullfilename}

	TARGET_DIR=${PKG_DIR}
	case "$PKGNAME" in
		*"-dev_"*|*"_DEV"*) TARGET_DIR=${DEV_DIR} ;;
		*"-doc_"*|*"_DOC"*) TARGET_DIR=${DOC_DIR} ;;
		*"-nls_"*|*"_NLS"*) TARGET_DIR=${NLS_DIR} ;;
	esac

	case $DB_fullfilename in
	*.pet) echo -n ;;
	*)
		if [ -f packages-templates/${GENERICNAME}/FIXUPHACK ] ; then
			FIXUPHACK_FILE="packages-templates/${GENERICNAME}/FIXUPHACK"
		elif [ -f packages-templates/${GENERICNAME}_FIXUPHACK ] ; then
			FIXUPHACK_FILE="packages-templates/${GENERICNAME}_FIXUPHACK"
		fi
		if [ -f "$FIXUPHACK_FILE" ];then
			DISABLE_POST_INSTALL_SCRIPT="`grep '^DISABLE_POST_INSTALL_SCRIPT' "$FIXUPHACK_FILE"`"
		fi
		;;
	esac

	case $DB_fullfilename in
	*.pet) # need tar 1.26+ (slacko 14.0)
		PETPKG=${DB_fullfilename%.pet} #remove trailing ".pet"
		head -c -32 packages-pet/${PETPKG}.pet > packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar
		PETPREFIX=$(tar -tf packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar | head -1)
		[ -d ${TARGET_DIR} ] || mkdir -p ${TARGET_DIR}
		case "$PETPREFIX" in
			"./"*) tar --strip=2 --directory=${TARGET_DIR} -xf packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar ;;
			*) tar --strip=1 --directory=${TARGET_DIR} -xf packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar ;;
		esac
		if [ $? -ne 0 ] ; then
			echo "ERROR: failed to unpack ${PETPKG}.pet"
			rm -f packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar
			continue
		fi
		rm -f packages-${DISTRO_FILE_PREFIX}/${PETPKG}.tar
		if [ -d ${TARGET_DIR}/usr/share/applications/ ] ; then
			sed -i 's| %u|| ; s| %U|| ; s| %f|| ; s| %F||' ${TARGET_DIR}/usr/share/applications/*.desktop
		fi
		continue
		;;
	*.deb) #ubuntu|trisquel|debian|devuan|raspbian etc
		mkdir -p ${TARGET_DIR}/
		PKGNAME="${PKGNAME%.deb}" #ex: bash_3.2-4ububtu1_i386
		dpkg-deb -x $ONEBINARYPKG ${TARGET_DIR}/
		[ $? -ne 0 ] && { echo "ERROR: failed to unpack $PKGNAME"; continue; }
		pre_process_pkg
		;;
	*.tgz|*.txz) #slackware*
		mkdir -p ${TARGET_DIR}/
		PKGNAME="${PKGNAME%.*}" #no extension
		tar --directory=${TARGET_DIR}/ -ixf ${ONEBINARYPKG}
		[ $? -ne 0 ] && { echo "ERROR: failed to unpack $PKGNAME"; continue; }
		pre_process_pkg
		if [ -f ${TARGET_DIR}/install/doinst.sh ];then
			# slackware post-install script
			if [ ! "$DISABLE_POST_INSTALL_SCRIPT" ] ; then
				echo " executing (Slackware) install script"
				( cd ${TARGET_DIR} ; sh ./install/doinst.sh )
				rm -rf ${TARGET_DIR}/install
			fi
		fi
		;;
	*.tar.*|*.xbps) #gentoo and others 120515
		mkdir -p ${TARGET_DIR}/
		PKGNAME="${PKGNAME%.tar.bz2}" #ex: bash-3.2
		tar --directory=${TARGET_DIR}/ -xf ${ONEBINARYPKG}
		[ $? -ne 0 ] && { echo "ERROR: failed to unpack $PKGNAME"; continue; }
		pre_process_pkg
		;;
	esac
	#...get next pkg in same GENERICNAME
 done <<< "${FNDIT}"
 #==== fishined extracting packages =====

 case "$DB_fullfilename" in *.pet) continue ;; esac
 ###POST-PROCESSING FOR NON-PET PKGS###  

 #====================================================================
 XDBENTRY=
 while read ONEDBENTRY ; do
	case $ONEDBENTRY in *"|$GENERICNAME|"*)
		XDBENTRY=$ONEDBENTRY ; break ;;
	esac
 done <<< "${FNDIT}"
 [ ! "$XDBENTRY" ] && read -r XDBENTRY <<< "${FNDIT}"
 if [ -d ${PKG_DIR}/usr/share/applications ] ; then
	./support/2createpackages.fix.desktop.files.sh "${PKG_DIR}" "$XDBENTRY"
 fi
 #====================================================================

 # NLS_DIRS='usr/share/locale'
 # DOC_DIRS='usr/share/doc usr/share/info usr/share/man usr/share/gtk-doc usr/doc usr/info usr/man usr/share/gnome/help'

 if [ -d ${PKG_DIR} ] ; then
	cd ${PKG_DIR}
	# directories
	find . -mindepth 1 -type d | sed -e 's|^\.\/||' | sort | \
	while read ONEDIR
	do
		if [ ! -e "$ONEDIR" ] ; then
			continue #might be already moved/deleted
		fi
		PARENTDIR="${ONEDIR%/*}"  #dirname "$ONEDIR"
		[ "$PARENTDIR" = "$ONEDIR" ] && PARENTDIR=
		case "$ONEDIR" in
		#-- NLS -- international language
		*"/locale"|*"/nls"|*"/i18n")
			if [ "$NLS" = "_NULL" ] ; then
				rm -rf ${ONEDIR}
				continue
			fi
			if [ "$NLS_DIR" = "$PKG_DIR" ] ; then
				continue
			fi
			if [ ! -d ${NLS_DIR}/${ONEDIR} ] ; then
				mkdir -p ${NLS_DIR}/${PARENTDIR}
				mv -f ${ONEDIR} ${NLS_DIR}/${PARENTDIR}/
			else
				mkdir -p ${NLS_DIR}/${ONEDIR}
				cp -a --remove-destination ${ONEDIR}/* ${NLS_DIR}/${ONEDIR}/
				rm -rf ${ONEDIR}
			fi
			continue
			;;
		#-- DOC -- documentation
		*"/man"|*"/doc"|*"/doc-base"|*"/docs"|*"/info"|*"/gtk-doc"|*"/faq"|*"/manual"|*"/examples"|*"/help"|*"/htdocs")
			if [ "$DOC" = "_NULL" ] ; then
				rm -rf ${ONEDIR}
				continue
			fi
			if [ "$DOC_DIR" = "$PKG_DIR" ] ; then
				continue
			fi
			if [ ! -d ${DOC_DIR}/${ONEDIR} ] ; then
				mkdir -p ${DOC_DIR}/${PARENTDIR}
				mv -f ${ONEDIR} ${DOC_DIR}/${PARENTDIR}/
			else
				mkdir -p ${DOC_DIR}/${ONEDIR}
				cp -a --remove-destination ${ONEDIR}/* ${DOC_DIR}/${ONEDIR}/
				rm -rf ${ONEDIR}
			fi
			continue
			;;
		#-- DEV -- development
		*"X11/config"|*"/include"|*"/pkgconfig"|*"/aclocal"|*"/cvs"*|*"/svn"*|*"/src"*|*"/gcc"|*"/gir-1.0"*|*"/share/cmake"*)
			if [ "$DEV" = "_NULL" ] ; then
				rm -rf ${ONEDIR}
				continue
			fi
			if [ -z "$DEV" ] ; then
				continue
			fi
			if [ "$DEVX" ] ; then
				continue
			fi
			if [ ! -d ${DEV_DIR}/${ONEDIR} ] ; then
				mkdir -p ${DEV_DIR}/${PARENTDIR}
				mv ${ONEDIR} ${DEV_DIR}/${PARENTDIR}/
			else
				mkdir -p ${DEV_DIR}/${ONEDIR}
				cp -a --remove-destination ${ONEDIR}/* ${DEV_DIR}/${ONEDIR}/
				rm -rf ${ONEDIR}
			fi
			continue
			;;
		esac
	done
	cd $MWD
 fi

 if [ "$EXE" = "" ] && [ -d ${EXE_DIR} ] ; then #EXE is not redirected to _DEV, _DOC, or _NLS
	# post-process $EXE_DIR...
	cd ${EXE_DIR}
	#this will find all files and symlinks to files...
	find ./ -noleaf -type f -or -type l | sed -e 's|^\.\/||' |
	while read ONEFILE
	do
		ONEBASE="${ONEFILE##*/}" #basename "$ONEFILE"
		ONEPATH="${ONEFILE%/*}" #dirname "$ONEFILE"
		[ "$ONEPATH" = "$ONEFILE" ] && ONEPATH=.
		[ "$ONEPATH" = "." ] && ONEPATH=""
		#find *.so symlink files...
		case "$ONEFILE" in *.so)
			if [ -h "$ONEFILE" ];then #-h tests for symlink
				[ "$DEV" = "_NULL" ] && { rm -f "$ONEFILE" ; continue ; }
				[ ! -d "${DEV_DIR}/${ONEPATH}" ] && mkdir -p "${DEV_DIR}/${ONEPATH}"
				mv -f "$ONEFILE" "${DEV_DIR}/${ONEPATH}/" 2>/dev/null
				continue
			fi
		esac
		
		#find various config files... all .a .la .m4 files
		case "$ONEFILE" in *"-config"|*"config.sh"|*"Conf.sh"|*.a|*.la|*.m4|*.o|*.cmake)
			[ "$DEV" = "_NULL" ] && { rm -f "$ONEFILE" ; continue ; }
			[ ! -d "${DEV_DIR}/${ONEPATH}" ] && mkdir -p "${DEV_DIR}/${ONEPATH}"
			mv -f "$ONEFILE" "$ONEFILE" "${DEV_DIR}/${ONEPATH}/" 2>/dev/null
			continue
		esac
		
		[ "$EXE" = "_NULL" ] && { rm -f "$ONEFILE" ; continue ; }
		
		#anything left over goes into the main 'executable' package...
		case "$ONEFILE" in *"/bin"*|*"/sbin"*|*"/lib"*)
			if [ "$STRIP_BINARIES" = "yes" ];then #build.conf
			if [ "$STRIP_BIN" -a "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #needs devx.
				if [ ! -h "$ONEFILE" ];then #make sure it isn't a symlink
					case $(file "$ONEFILE") in *" ELF "*)
					        strip --strip-unneeded "$ONEFILE"
						strip --strip-debug "$ONEFILE" ;;
					esac
				fi
			fi
			fi
			;;
		esac
	done
	cd $MWD
 fi

 #end of splitting.
 #--------------------------------------------

 #now do some post-processing using "template" found in 'packages-templates'...
 if [ -d packages-templates/${GENERICNAME} ];then
	echo " postprocessing with packages-templates/${GENERICNAME}"
	find packages-templates/${GENERICNAME}/ -empty \( -type f -o -type l \) -delete #this line will removed
	cp -a --remove-destination packages-templates/${GENERICNAME}/* ${PKG_DIR}/
	[ -f ${PKG_DIR}/_PRE ] && rm -f ${PKG_DIR}/_PRE
	[ -f ${PKG_DIR}/FIXUPHACK ] && rm -f ${PKG_DIR}/FIXUPHACK
 fi

 #a last resort fixup, if 'FIXUPHACK' exists, execute it... 111204 DISABLE_POST_INSTALL_SCRIPT code moved up.
 if [ -f "$FIXUPHACK_FILE" ];then
	echo " executing ${FIXUPHACK_FILE}"
	if [ -d $PKG_DIR ] ; then
		( cd $PKG_DIR ; sh ${MWD}/${FIXUPHACK_FILE} )
	elif [ -d $DEV_DIR ] ; then #python-dev
		( cd $DEV_DIR ; sh ${MWD}/${FIXUPHACK_FILE} )
	fi
 fi

 [ -d packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}_NULL ] && rm -rf packages-${DISTRO_FILE_PREFIX}/${GENERICNAME}_NULL
 [ -d /tmp/${GENERICNAME} ] && rm -rf /tmp/${GENERICNAME}

done #process next GENERICNAME.

echo -e "\nScript finished."
[ -s ERROR-2CREATEPACKAGES ] || exit 0
echo "WARNING: Errors were logged to file ERROR-2CREATEPACKAGES"
exit 1

###END###
