#!/bin/bash
#(c) Copyright 2009 Barry Kauler.
#110819 support/findpkgs is new script to find all pkgs to be used in Puppy build.

export LANG=C #faster.
[ $1 ] && XPKG=$1 #download specific pkg
MWD=$PWD

. ./_00build.conf
. ./_00func
. ./DISTRO_SPECS
source_compat_repos  # ./DISTRO_COMPAT_REPOS-
. ./DISTRO_PET_REPOS #has PACKAGELISTS_PET_ORDER
set_binaries_var     #ex: BINARIES=tgz_txz-14.2 BINARIES=deb-xenial
create_local_repos_dirs
rm -f DOWNLOAD-FAILS-* 2>/dev/null
wget --help | grep -q '\--show-progress' && WGET_SHOW_PROGRESS='-q --show-progress'

xabort() {
	if [ -f /tmp/1dl_busy ] ; then
		read file < /tmp/1dl_busy
		rm -f $file /tmp/1dl_busy
	fi
	do_exit "Aborted"
}

function do_exit() { #$1: msg
	echo -e "\n${1}"
	echo -e "\nScript finished."
	exit
}

trap "xabort" SIGINT SIGTERM

run_findpkgs #find all packages that will be used in the Puppy build...

#==============================================================================

REPOS_DISTRO_COMPAT=$(echo "$REPOS_DISTRO_COMPAT" | tr ' ' '\n')
PET_REPOS=$(echo "$PET_REPOS" | tr ' ' '\n')
XFILE=status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

echo -e "\nDownloading packages..."
if [ $XPKG ] ; then
	XFILE=/tmp/zz_downloadpkg
	grep ":${XPKG}:" status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} | sort > /tmp/zz_downloadpkg
fi

echo "" > $MWD/status/download_list
while read ONEDBENTRY
do
	#ONEDBENTRY=:GENERICNAME:|PETorCOMPAT|DBFILE|pkgname|nameonly|version|pkgrelease|category[;subcategory]|size|path|fullfilename|dependencies|description|compileddistro|compiledrelease|repo|
	#...pkgname onwards is the full db entry for a package.
	IFS="|" read -r F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 <<< "$ONEDBENTRY"
	PETorCOMPAT="$F2" #ex: compat
	DBFILE="$F3"           #ex: Packages-puppy-5-official
	DB_genericname="$F1"	#ex: abiword
	DB_pkgname="$F4"       #ex: abiword-2.3.4-w5
	DB_fullfilename="$F11" #ex: abiword-2.3.4-w5.pet
	DB_path="$F10"         #ex: pet_packages-5
	if [ ! "$DB_path" ];then
		ONLINESUBDIR="`echo -n "$DBFILE" | cut -f 3 -d '-'`"   #ex: 5
		if [ "$PETorCOMPAT" = "pet" ];then #120515
			DB_path="pet_packages-${ONLINESUBDIR}"
		else #compat binary tarballs
			DB_path="compat_packages-${ONLINESUBDIR}"
		fi
	fi
 
	if [ "$PETorCOMPAT" = "pet" ];then
		LFILE=${MWD}/DOWNLOAD-FAILS-PET
		FILE_DIR=${MWD}/packages-pet
	else #-- compat
		LFILE=${MWD}/DOWNLOAD-FAILS-${BINARIES}
		FILE_DIR=${MWD}/packages-${BINARIES}
	fi
	FILE_PATH=${FILE_DIR}/${DB_fullfilename}

	if [ -f "$FILE_PATH" ] ; then
		echo -n " ${DB_fullfilename}"
		continue
	fi
	echo -e "\n* Downloading ${DB_fullfilename}"

	if [ "$PETorCOMPAT" = "pet" ];then
		XREPOS="$PET_REPOS"
	else #-- compat
		XREPOS="$REPOS_DISTRO_COMPAT"
	fi

	SUCCESS='no'

	# have to give priority to the repo $DBFILE is in
	# $DBFILE ex: Packages-slackware-14.2-official
	# z|http://mirror.aarnet.edu.au/pub/slackware/slackware-14.2|Packages-slackware-14.2-official
	REPOS="$(echo "$XREPOS" | grep "|${DBFILE}$")
$(echo "$XREPOS" | grep -v "|${DBFILE}$")"
	URLS="$(echo "$REPOS" | cut -f 2 -d '|')"

	for ONE_URL in ${URLS}
	do
		REMOTE_PATH=${ONE_URL}/${DB_path}/${DB_fullfilename}
		echo "  - from ${REMOTE_PATH%/*}"
		echo -n "$PWD/${DB_fullfilename}" > /tmp/1dl_busy
		wget --no-check-certificate -c ${WGET_SHOW_PROGRESS} \
		 -O ${FILE_PATH} --timeout=15 ${REMOTE_PATH} || {
			echo "  failed (file not found on server or could not finish download)"
			rm -f ${FILE_PATH}
			continue
		}
		#-
		${MWD}/rootfs-skeleton/usr/local/petget/verifypkg.sh ${FILE_PATH}
		[ $? -eq 0 ] && SUCCESS='yes'
		#-
		if [ "$SUCCESS" = "no" ] ; then
			echo "  failed (file not found or corrupted file)"
			rm -f ${FILE_PATH} 2>/dev/null
		fi
		rm -f /tmp/1dl_busy
		#--
		if [ "$SUCCESS" = "yes" ] ; then
			echo "  success"
			echo "${DB_genericname}" >> $MWD/status/download_list
			break
		fi
	done

	if [ "$SUCCESS" = "no" ] ; then
		echo "DOWNLOAD FAIL: ${DB_fullfilename}"
		[ -z "$GITHUB_ACTIONS" ] || exit 1
		echo "$DB_fullfilename" >> ${LFILE}
	fi

done < $XFILE

[ $XPKG ] && echo && exit
do_exit ""

###END###
