#!/bin/bash
#(c) Copyright 2009 Barry Kauler.
#120825 debian/ubuntu: merge -updates dbs.
#121102 file DISTRO_SPECS has new variable DISTRO_DB_SUBNAME. ex: for 14.0-based slacko, DISTRO_DB_SUBNAME=slacko14
#121111 debdb2pupdb, new fast deb to pup db converter.
#121116 0setup also runs in running puppy called from ppm. some o/p needs to be translated, done in /usr/share/sss/script_strings/script_strings. see below all LANGORG insertions.
#130316 debdb2pupdb does not use /tmp/0setupcompletelistpkgs in a running puppy.

[ -n "$GITPOD_WORKSPACE_ID" -a "`id -u`" -ne 0 ] && exec fakeroot $0 "$@"

LANGORG="$(locale | grep '^LANG=' | cut -d '=' -f 2)" #121116
export LANG=C #faster.

exit_error() {
	echo "$@"
	if [ "$RUNNINGPUP" = "yes" ] ; then
		echo
		echo "$(gettext 'PPM database update failed.')" 
		echo  -n "Press ENTER key to exit: "
		read zzz
	fi
	exit 1
}

DEBDB2PUPDB='/usr/local/petget/debdb2pupdb'

if [ -d ./support -a -f ./DISTRO_SPECS -a -d ./rootfs-skeleton ] ;then
  . ./DISTRO_SPECS
  . ./_00func
  source_compat_repos
  source_pkgs_specs
  . ./PKGS_MANAGEMENT
  . ./DISTRO_PET_REPOS
  RUNNINGPUP='no'
  DEBDB2PUPDB="$(pwd)/support/debdb2pupdb"
  FIND_CAT="$(pwd)/support/find_cat"
  #note, 3builddistro copies it into rootfs-complete/usr/local/petget when building a pup.
else
  #want to run this script in running puppy, to update db's...
  FIND_CAT='/usr/local/petget/find_cat'
  . /etc/DISTRO_SPECS
  . /root/.packages/DISTRO_COMPAT_REPOS #v431
  . /root/.packages/DISTRO_PKGS_SPECS
  . /root/.packages/PKGS_MANAGEMENT
  . /root/.packages/DISTRO_PET_REPOS
  cd /root/.packages
  RUNNINGPUP='yes'
  if command -v apt > /dev/null; then
    PKG_DOCS_DISTRO_COMPAT=""
    REPOS_DISTRO_COMPAT=""
  fi
fi

#======================================================================
if [ "$1" = "" ] ; then
	PROMPT=
	for PKGLISTSPEC in $PKG_DOCS_DISTRO_COMPAT ; do
		PKGLISTFILE="`echo -n "$PKGLISTSPEC" | cut -f 3 -d '|'`"
		if [ -f "$PKGLISTFILE" ] ; then
			PROMPT=1
			break
		fi
	done
	if [ "$PROMPT" ] ; then
		echo -n "Press ENTER to update all package databases (or CTRL-C to cancel): "
		read downloadit
	fi
fi
#======================================================================

if wget --help | grep -q '\--show-progress' ; then
	WGET='wget --no-check-certificate -q --show-progress'
else
	WGET='wget --no-check-certificate -q'
fi

#w008 convert pkg database ${PKGLISTFILE}pre to a standard format...
#each line: pkgname|nameonly|version|pkgrelease|category[;subcategory]|size|path|fullfilename|dependencies|description|
#ex: abiword-1.2.4|abiword|1.2.4|5|Document|999K|slackware/ab|abiword-1.2.4-5-i486.tgz|+aiksausus,+gtk2|a nice wordprocessor|
PKGLISTS_COMPAT="`echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | cut -f 3 -d '|' | tr '\n' ' '`" #see file DISTRO_PKGS_SPECS-ubuntu

#======================================================================

mkdir -p /var/woof
echo -n "" > /var/woof/0setup_fail_report_$RUNNINGPUP #RUNNINGPUP=yes or no. latter if woof.

#download docs on compatible-distro pkgs...
function download_pkg_dbs() {
	PETPKG=
	[ "$1" = "pet" ] && PETPKG=1
	shift
	for PKGLISTSPEC in "$@" #see file DISTRO_PKGS_SPECS-ubuntu
	do
	 #PKG_DOCS_DISTRO_COMPAT="z|http://ftp.nluug.nl/pub/os/Linux/distr/salix/${DBIN_ARCH}/slackware-${DISTRO_COMPAT_VERSION}/PACKAGES.TXT|Packages-slackware${DSUFFIX}-${DISTRO_COMPAT_VERSION}-official"
	 #PKG_DOCS_PET_REPOS="z|https://raw.githubusercontent.com/puppylinux-woof-CE/woof-CE/testing/woof-distro/Packages-puppy-noarch-official|z"
	 PKGLISTURI="`echo -n "$PKGLISTSPEC" | cut -f 2 -d '|'`"
	 PKGLISTFILE="`echo -n "$PKGLISTSPEC" | cut -f 3 -d '|'`"
	 DLFILE=${PKGLISTURI##*/} #basename
	 xDLFILE=${DLFILE}
	 [ "$PKGLISTURI" = "" ] && continue #w478 no url, pkg db file only kept in woof.
	 if [ "$PKGLISTFILE" = "z" ] || [ ! "$PKGLISTFILE" ] ; then
	   PKGLISTFILE=${DLFILE}
	 fi
	 echo
	 echo "- PKG DB  : $PKGLISTFILE"
	 echo "- LOCATION: $PKGLISTURI"
	 echo "+ Downloading..."
	 $WGET -O ${DLFILE}.tmp $PKGLISTURI
	 if [ $? -ne 0 ];then
	   rm -f ${DLFILE}.tmp
	   echo "*** failed to download"
	   if [ -f ${PKGLISTFILE} ] ; then
	     echo "***  will use local pkg db - it may be outdated though"
	     continue
	   else
	     exit_error "* ERROR: ${PKGLISTFILE} is missing"
	   fi
	 fi
	 if [ "$PETPKG" ] ; then
	   [ -f ${DLFILE}.tmp ] && mv -f ${DLFILE}.tmp ${PKGLISTFILE}
	   echo "*** success"
	   continue
	 fi
	 #--
	 mv -f ${DLFILE}.tmp ${DLFILE}
	 RETSTAT=0
	 case "$DLFILE" in
	   *.gz)  gunzip  $DLFILE ; RETSTAT=$? ; xDLFILE=${xDLFILE%.*} ;;
	   *.bz2) bunzip2 $DLFILE ; RETSTAT=$? ; xDLFILE=${xDLFILE%.*} ;;
	   *.xz)  unxz    $DLFILE ; RETSTAT=$? ; xDLFILE=${xDLFILE%.*} ;;
	 esac
	 if [ $RETSTAT -eq 0 ];then
	   mv -f $xDLFILE ${PKGLISTFILE}pre
	   echo "...success."
	 else
	   LANG=${LANGORG} echo 
	   rm -f $DLFILE $xDLFILE 2>/dev/null
	   exit_error "Downloaded file is corrupted. Deleting file and aborting."
	 fi
	done
}

download_pkg_dbs pet    $PKG_DOCS_PET_REPOS
download_pkg_dbs compat $PKG_DOCS_DISTRO_COMPAT #---

# -update dbs... #${DISTRO_BINARY_COMPAT}-updates package databases
PKGLISTS_COMPAT_UPDATES=""
case $DISTRO_BINARY_COMPAT in ubuntu|trisquel|debian|devuan) #130319 removed |raspbian
   case $DISTRO_COMPAT_VERSION in
   sid|ceres) ;;
   *)
      DBUPDATEFLAG='yes'
      #Packages-ubuntu-precise-main -> Packages-ubuntu-precise_updates-main
      #http://archive.ubuntu.com/ubuntu/dists/precise/main/binary-i386/Packages.bz2 -> http://archive.ubuntu.com/ubuntu/dists/precise-updates/main/binary-i386/Packages.bz2
      PKGLISTS_COMPAT_U=$(echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | grep -v 'deb-multimedia' | \
        grep "Packages-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}" |
        sed -e "s|-${DISTRO_COMPAT_VERSION}-|-${DISTRO_COMPAT_VERSION}_updates-|" \
            -e "s|/${DISTRO_COMPAT_VERSION}/|/${DISTRO_COMPAT_VERSION}-updates/|")
      download_pkg_dbs compat $PKGLISTS_COMPAT_U
      #see further down
      PKGLISTS_COMPAT_UPDATES=$(echo "$PKGLISTS_COMPAT_U" | cut -f 3 -d "|" | tr '\n' ' ')
      ;;
   esac
esac

if [ "$DISTRO_BINARY_COMPAT" = "debian" -a -n "$PKG_DOCS_DISTRO_COMPAT" ]; then
  wget --spider --tries 1 -T 3 -F --max-redirect 0 http://deb.debian.org/debian-security/dists/${DISTRO_COMPAT_VERSION}-security/
  if [ $? -eq 0 ]; then
   PKGLISTS_COMPAT_S="z|http://deb.debian.org/debian-security/dists/${DISTRO_COMPAT_VERSION}-security/main/binary-${DBIN_ARCH}/Packages.xz|Packages-debian-${DISTRO_COMPAT_VERSION}-security-main
z|http://deb.debian.org/debian-security/dists/${DISTRO_COMPAT_VERSION}-security/non-free/binary-${DBIN_ARCH}/Packages.xz|Packages-debian-${DISTRO_COMPAT_VERSION}-security-non-free
z|http://deb.debian.org/debian-security/dists/${DISTRO_COMPAT_VERSION}-security/contrib/binary-${DBIN_ARCH}/Packages.xz|Packages-debian-${DISTRO_COMPAT_VERSION}-security-contrib
"
   download_pkg_dbs compat $PKGLISTS_COMPAT_S
   PKGLISTS_COMPAT_UPDATES="$PKGLISTS_COMPAT_UPDATES $(echo "$PKGLISTS_COMPAT_S" | cut -f 3 -d "|" | tr '\n' ' ')"

   if [ "$RUNNINGPUP" = "no" ]; then
    cat << EOF >> $DCRFILE
# appended by 0setup
REPOS_DISTRO_COMPAT="$REPOS_DISTRO_COMPAT z|http://deb.debian.org/debian-security|Packages-debian-${DISTRO_COMPAT_VERSION}-*"
EOF
   fi
 fi
elif [ "$DISTRO_BINARY_COMPAT" = "devuan" -a -n "$PKG_DOCS_DISTRO_COMPAT" ]; then
  wget --spider --tries 1 -T 3 -F --max-redirect 0 http://deb.devuan.org/merged/dists/${DISTRO_COMPAT_VERSION}-security/
  if [ $? -eq 0 ]; then
   PKGLISTS_COMPAT_S="z|http://deb.devuan.org/merged/dists/${DISTRO_COMPAT_VERSION}-security/main/binary-${DBIN_ARCH}/Packages.xz|Packages-devuan-${DISTRO_COMPAT_VERSION}-security-main
z|http://deb.devuan.org/merged/dists/${DISTRO_COMPAT_VERSION}-security/non-free/binary-${DBIN_ARCH}/Packages.xz|Packages-devuan-${DISTRO_COMPAT_VERSION}-security-non-free
z|http://deb.devuan.org/merged/dists/${DISTRO_COMPAT_VERSION}-security/contrib/binary-${DBIN_ARCH}/Packages.xz|Packages-devuan-${DISTRO_COMPAT_VERSION}-security-contrib
"
   download_pkg_dbs compat $PKGLISTS_COMPAT_S
   PKGLISTS_COMPAT_UPDATES="$PKGLISTS_COMPAT_UPDATES $(echo "$PKGLISTS_COMPAT_S" | cut -f 3 -d "|" | tr '\n' ' ')"
 fi
elif [ "$DISTRO_BINARY_COMPAT" = "ubuntu" -a -n "$PKG_DOCS_DISTRO_COMPAT" ]; then
  wget --spider --tries 1 -T 3 -F --max-redirect 0 http://archive.ubuntu.com/ubuntu/dists/${DISTRO_COMPAT_VERSION}-security/
  if [ $? -eq 0 ]; then
   PKGLISTS_COMPAT_S="z|http://archive.ubuntu.com/ubuntu/dists/${DISTRO_COMPAT_VERSION}-security/main/binary-${DBIN_ARCH}/Packages.xz|Packages-ubuntu-${DISTRO_COMPAT_VERSION}-security-main
z|http://archive.ubuntu.com/ubuntu/dists/${DISTRO_COMPAT_VERSION}-security/universe/binary-${DBIN_ARCH}/Packages.xz|Packages-ubuntu-${DISTRO_COMPAT_VERSION}-security-universe
z|http://archive.ubuntu.com/ubuntu/dists/${DISTRO_COMPAT_VERSION}-security/multiverse/binary-${DBIN_ARCH}/Packages.xz|Packages-ubuntu-${DISTRO_COMPAT_VERSION}-security-multiverse
z|http://archive.ubuntu.com/ubuntu/dists/${DISTRO_COMPAT_VERSION}-security/restricted/binary-${DBIN_ARCH}/Packages.xz|Packages-ubuntu-${DISTRO_COMPAT_VERSION}-security-restricted"
   download_pkg_dbs compat $PKGLISTS_COMPAT_S
   PKGLISTS_COMPAT_UPDATES="$PKGLISTS_COMPAT_UPDATES $(echo "$PKGLISTS_COMPAT_S" | cut -f 3 -d "|" | tr '\n' ' ')"

   if [ "$RUNNINGPUP" = "no" ]; then
    cat << EOF >> $DCRFILE
# appended by 0setup
REPOS_DISTRO_COMPAT="$REPOS_DISTRO_COMPAT z|http://archive.ubuntu.com/ubuntu|Packages-ubuntu-${DISTRO_COMPAT_VERSION}-*"
EOF
   fi
 fi
fi

case $DISTRO_BINARY_COMPAT in slackware*) # slackware official updates = patches repo
   DBUPDATEFLAG='yes'
   PKGLISTS_COMPAT_U=$(echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | grep official | \
    sed -e "s|-official|_updates-official|" \
        -e "s|/PACKAGES.TXT|/patches/PACKAGES.TXT|")
   download_pkg_dbs compat $PKGLISTS_COMPAT_U
   PKGLISTS_COMPAT_UPDATES=$(echo "$PKGLISTS_COMPAT_U" | cut -f 3 -d "|" | tr '\n' ' ')
esac

#130305 debdb2pupdb.bac now also check that deps exist, need this list of pkgs...
if [ "$RUNNINGPUP" = "no" ];then #130316 debdb2pupdb does not read this file in a running pup.
 case ${DISTRO_BINARY_COMPAT} in
  ubuntu|trisquel|debian|devuan|raspbian)
   echo -n " " > /tmp/0setupcompletelistpkgs
   COMPLETELISTPKGS="$(grep '^Package: ' Packages*pre | cut -f 2 -d ' ' | tr '\n' ' ')"
   echo "$COMPLETELISTPKGS" >> /tmp/0setupcompletelistpkgs
   [ -f /tmp/0setupnewinvaliddeps ] && rm -f /tmp/0setupnewinvaliddeps #see debdb2pupdb.
  ;;
 esac
else
 [ -f /tmp/0setupcompletelistpkgs ] && rm -f /tmp/0setupcompletelistpkgs
fi
echo

#...format ex: 'Packages-ubuntu-intrepid-main Packages-ubuntu-intrepid-universe'
for ONE_PKGLISTS_COMPAT in $PKGLISTS_COMPAT $PKGLISTS_COMPAT_UPDATES #120825
do
 [ ! -f ${ONE_PKGLISTS_COMPAT}pre ] && continue
 LANG=${LANGORG} echo "Processing ${ONE_PKGLISTS_COMPAT} into a standard format..."
 echo -n "" > $ONE_PKGLISTS_COMPAT
 echo -n "" > /tmp/${ONE_PKGLISTS_COMPAT}temp #130126
 case ${DISTRO_BINARY_COMPAT} in
  ubuntu|trisquel|debian|devuan|raspbian)
    #new fast compiled app...
    if [ ! -f $DEBDB2PUPDB ] ; then
      exit_error "FATAL: Could not find $DEBDB2PUPDB"
    fi
    #create an intermediate-converted file...
    #121113 added "Section"... 121113 insert STARTMARKER...
    MANIPULATED1="$(grep -E '^Package:|^Installed-Size:|^Architecture:|^Version:|^Pre-Depends:|^Depends:|^Filename:|^Description:|^Homepage:|^Section:' ${ONE_PKGLISTS_COMPAT}pre | tr '[\t"|`]' ' ' | tr -s ' ' | sed -e 's%^Installed\-Size%InstalledSize%' -e 's%^Package:%STARTMARKER|PKG\nPackage:%' -e 's%: %|%' -e 's% $%%')" #`geany
    #call new app. note, this in turn calls /usr/local/petget/find_pkgs...
    if [ -n "$MANIPULATED1" ];then
     echo "$MANIPULATED1" > /tmp/woof-debdb.in
     ${DEBDB2PUPDB} ${DISTRO_BINARY_COMPAT} ${DISTRO_COMPAT_VERSION} > /tmp/${ONE_PKGLISTS_COMPAT}temp #130126 $ONE_PKGLISTS_COMPAT
     ${FIND_CAT} /tmp/${ONE_PKGLISTS_COMPAT}temp > $ONE_PKGLISTS_COMPAT #130126
    else
     touch $ONE_PKGLISTS_COMPAT
    fi
    #homepages also get logged...
    if [ -f /tmp/woof-homepages.acc ];then #running in woof.
      sort --key=1,1 --field-separator=" " --unique /tmp/woof-homepages.acc > ./PKGS_HOMEPAGES #121113
    fi
    #130316 /tmp/0setupnewinvaliddeps is created by debdb2pupdb, when run in woof.
    # 3builddistro will have to copy this file 'invaliddepslist' into rootfs-complete/usr/local/petget/ ...
    # it is read by debdb2pupdb in a running puppy.
    if [ "$RUNNINGPUP" = "no" ];then
     echo -n ' ' > invaliddepslist
     NIDL1="$(sort -u /tmp/0setupnewinvaliddeps 2>/dev/null | tr '\n' ' ')"
     echo -n "$NIDL1" >> invaliddepslist
    fi
  ;;
  slackware*)
   DB_category="" #salix has dependency info
   cat ${ONE_PKGLISTS_COMPAT}pre | grep -v '^PACKAGE MIRROR' | tr '\t' ' ' | tr -s ' ' | sed -e 's% $%%' -e 's%  %\n%g' | \
   sed -e 's%^PACKAGE %%' -e 's%SIZE (compressed)%SIZE_COMP%' -e 's%SIZE (uncompressed)%SIZE_NOCOMP%' > ${ONE_PKGLISTS_COMPAT}pre2
    (
    while read -r field desc ; do
      case ${field%:} in
        "NAME")
          DB_fullfilename="$desc"
          DB_pkgname="${DB_fullfilename%-*}"
          DB_pkgname="${DB_pkgname%-*}"
          ;;
        "LOCATION") DB_path="${desc#*/}" ;;
        #"SIZE_COMP") ;;
        "SIZE_NOCOMP") DB_size="${desc// /}" ;;
        "REQUIRED")
          DB_dependencies="$desc"
          [ "$DB_dependencies" != "" ] && DB_dependencies='+'"${DB_dependencies}"
          [ "$DB_dependencies" != "" ] && DB_dependencies="${DB_dependencies//|/,}"
          #...processed to ex: +acl,+gcc,+glibc-solibs,+libXt,+libart_lgpl
          [ "$DB_dependencies" != "" ] && DB_dependencies="${DB_dependencies//,/,+}"
          [ "$DB_dependencies" = "+PACKAGE" ] &&  DB_dependencies='' #01micko 20110504 bug with "+PACKAGES" sneaking through
          case "$DB_dependencies" in *">"*|*"="*|*"<"*) #slacky: pkg >= version
            DB_dependencies=$(echo "$DB_dependencies" | tr ',' '\n' | sed -e 's| .*||' | tr '\n' ',')
          esac
          ;;
        #"CONFLICTS") ;;
        #"SUGGESTS") ;;
        "DESCRIPTION")
          read -r field desc
          DB_nameonly="${field%:}"
          #-
          DB_version=${DB_pkgname#${DB_nameonly}-}
          DB_pkgrelease=${DB_fullfilename##*-}
          DB_pkgrelease=${DB_pkgrelease%.t*} #slackware has a consistent format of pkgname-version-arch-tag.t?z
          #-
          DB_description="${desc#*(}"
          DB_description="${DB_description%)*}"
          DB_description="${DB_description//,/}"
          [ -z "$DB_description" ] && DB_description="no description provided"
          #-
          echo "$DB_pkgname|$DB_nameonly|$DB_version|$DB_pkgrelease|$DB_category|$DB_size|$DB_path|$DB_fullfilename|$DB_dependencies|$DB_description|$DISTRO_BINARY_COMPAT|$DISTRO_COMPAT_VERSION||" #>> /tmp/${ONE_PKGLISTS_COMPAT}temp #130126 $ONE_PKGLISTS_COMPAT
          while [ 1 ] ; do read -r zzz ; [ ! "$zzz" ] && break ; done
          ;;
      esac
    done < ${ONE_PKGLISTS_COMPAT}pre2
    ) > /tmp/${ONE_PKGLISTS_COMPAT}temp
    sed -i -e 's%,|%|%' -e 's%,+|%|%' /tmp/${ONE_PKGLISTS_COMPAT}temp #slacky
    rm -f ${ONE_PKGLISTS_COMPAT}pre2
   #get the category...
   ${FIND_CAT} /tmp/${ONE_PKGLISTS_COMPAT}temp > $ONE_PKGLISTS_COMPAT #130126
  ;;
  void)
	support/void/void0setup
   ;;
  puppy)
   echo "...it's already in the Puppy standard format."
  ;;
 esac
 #rm -f ${ONE_PKGLISTS_COMPAT}pre 2>/dev/null
 mv -f ${ONE_PKGLISTS_COMPAT}pre /tmp/ 2>/dev/null
 sort --field-separator='|' --key=1 ${ONE_PKGLISTS_COMPAT} > /tmp/$PKGLISTFILE
 mv -f /tmp/$PKGLISTFILE ${ONE_PKGLISTS_COMPAT}
done

####################################
#120825 merge updates into original db files...
if [ "$DBUPDATEFLAG" = "yes" ];then
 for ONE_PKGLISTS_COMPAT in $PKGLISTS_COMPAT
 do
  REPOFIELD="`echo -n "$ONE_PKGLISTS_COMPAT" | rev | cut -f 1 -d '-' | rev`" #ex: main
  echo -n "$PKGLISTS_COMPAT_UPDATES" | tr ' ' '\n' | grep "\-${REPOFIELD}$" | while read PKGUPDATES
  do
   [ ! -f "$PKGUPDATES" ] && continue
   cat $ONE_PKGLISTS_COMPAT $PKGUPDATES | sort --stable --field-separator='|' --key=2,2 > /tmp/0setup_xxx1
   #want to discard the older package...
   LASTPKG=
   MAXVER=
   MAXVERLINE=
   while read ONELINE; do
    IFS="|" read F1 F2 F3 F4 F5 F6 F7 F8 ETC <<< "$ONELINE"
    # debdb2pupdb strips 7.81.0-1 from 7.81.0-1ubuntu1.6, must take it from the file name
    VER=${F8##*/}
    VER=${VER#${F2}_}
    VER=${VER%_*.deb}
    if [ "$F2" = "$LASTPKG" ]; then
     vercmp "$VER" gt "$MAXVER" || continue
     echo "Selecting $F2 $VER over $MAXVER" 1>&2
    else
     [ -n "$MAXVERLINE" ] && echo "$MAXVERLINE"
     LASTPKG="$F2"
    fi
    MAXVER="$VER"
    MAXVERLINE="$ONELINE"
   done < /tmp/0setup_xxx1 > $ONE_PKGLISTS_COMPAT
   echo "$MAXVERLINE" >> $ONE_PKGLISTS_COMPAT
   #...assumes pkg names remain the same, ex "firefox" (2nd field in db).
   mv -f $PKGUPDATES /tmp/$PKGUPDATES #dump -updates db file.
  done
 done
fi

# slacko: must clear patches pkg db if it's specified in DISTRO_COMPAT_REPOS
[ -f Packages-slackware-*-patches ] && echo > Packages-slackware-*-patches

if [ "$SETUPCALLEDFROM" = "ppm" ];then
	echo -e "\nFINISHED - Please restart Package Manager (PPM) now"
	echo -n "Press ENTER key to exit: " ; read enditnow
	echo "`date +%Y%m%d `" > /root/.packages/db-date
	exit
fi

echo -e "\nChecking pkgs"
support/findpkgs || exit 1
if [ -s FINDPKGS-NOT-FOUND.log ]; then
  grep 'was not found' FINDPKGS-NOT-FOUND.log  | sort -u
  exit 1
fi
echo

### END ###
